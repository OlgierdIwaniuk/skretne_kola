
skretne_kola.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d88  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08008e98  08008e98  00009e98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009308  08009308  0000b1e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009308  08009308  0000a308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009310  08009310  0000b1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009310  08009310  0000a310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009314  08009314  0000a314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08009318  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  200001e8  08009500  0000b1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  08009500  0000b498  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da53  00000000  00000000  0000b211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000241c  00000000  00000000  00018c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  0001b080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ade  00000000  00000000  0001be90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192db  00000000  00000000  0001c96e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010412  00000000  00000000  00035c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eae6  00000000  00000000  0004605b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d4b41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050cc  00000000  00000000  000d4b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000d9c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08008e80 	.word	0x08008e80

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08008e80 	.word	0x08008e80

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2uiz>:
 8001110:	0042      	lsls	r2, r0, #1
 8001112:	d20e      	bcs.n	8001132 <__aeabi_f2uiz+0x22>
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001118:	d30b      	bcc.n	8001132 <__aeabi_f2uiz+0x22>
 800111a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d409      	bmi.n	8001138 <__aeabi_f2uiz+0x28>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800112c:	fa23 f002 	lsr.w	r0, r3, r2
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr
 8001138:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800113c:	d101      	bne.n	8001142 <__aeabi_f2uiz+0x32>
 800113e:	0242      	lsls	r2, r0, #9
 8001140:	d102      	bne.n	8001148 <__aeabi_f2uiz+0x38>
 8001142:	f04f 30ff 	mov.w	r0, #4294967295
 8001146:	4770      	bx	lr
 8001148:	f04f 0000 	mov.w	r0, #0
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <__aeabi_d2lz>:
 8001150:	b538      	push	{r3, r4, r5, lr}
 8001152:	2200      	movs	r2, #0
 8001154:	2300      	movs	r3, #0
 8001156:	4604      	mov	r4, r0
 8001158:	460d      	mov	r5, r1
 800115a:	f7ff fc2f 	bl	80009bc <__aeabi_dcmplt>
 800115e:	b928      	cbnz	r0, 800116c <__aeabi_d2lz+0x1c>
 8001160:	4620      	mov	r0, r4
 8001162:	4629      	mov	r1, r5
 8001164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001168:	f000 b80a 	b.w	8001180 <__aeabi_d2ulz>
 800116c:	4620      	mov	r0, r4
 800116e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001172:	f000 f805 	bl	8001180 <__aeabi_d2ulz>
 8001176:	4240      	negs	r0, r0
 8001178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800117c:	bd38      	pop	{r3, r4, r5, pc}
 800117e:	bf00      	nop

08001180 <__aeabi_d2ulz>:
 8001180:	b5d0      	push	{r4, r6, r7, lr}
 8001182:	2200      	movs	r2, #0
 8001184:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <__aeabi_d2ulz+0x34>)
 8001186:	4606      	mov	r6, r0
 8001188:	460f      	mov	r7, r1
 800118a:	f7ff f9a5 	bl	80004d8 <__aeabi_dmul>
 800118e:	f7ff fc7b 	bl	8000a88 <__aeabi_d2uiz>
 8001192:	4604      	mov	r4, r0
 8001194:	f7ff f926 	bl	80003e4 <__aeabi_ui2d>
 8001198:	2200      	movs	r2, #0
 800119a:	4b07      	ldr	r3, [pc, #28]	@ (80011b8 <__aeabi_d2ulz+0x38>)
 800119c:	f7ff f99c 	bl	80004d8 <__aeabi_dmul>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4630      	mov	r0, r6
 80011a6:	4639      	mov	r1, r7
 80011a8:	f7fe ffde 	bl	8000168 <__aeabi_dsub>
 80011ac:	f7ff fc6c 	bl	8000a88 <__aeabi_d2uiz>
 80011b0:	4621      	mov	r1, r4
 80011b2:	bdd0      	pop	{r4, r6, r7, pc}
 80011b4:	3df00000 	.word	0x3df00000
 80011b8:	41f00000 	.word	0x41f00000

080011bc <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80011c0:	4b16      	ldr	r3, [pc, #88]	@ (800121c <MX_CAN_Init+0x60>)
 80011c2:	4a17      	ldr	r2, [pc, #92]	@ (8001220 <MX_CAN_Init+0x64>)
 80011c4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80011c6:	4b15      	ldr	r3, [pc, #84]	@ (800121c <MX_CAN_Init+0x60>)
 80011c8:	2210      	movs	r2, #16
 80011ca:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80011cc:	4b13      	ldr	r3, [pc, #76]	@ (800121c <MX_CAN_Init+0x60>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80011d2:	4b12      	ldr	r3, [pc, #72]	@ (800121c <MX_CAN_Init+0x60>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80011d8:	4b10      	ldr	r3, [pc, #64]	@ (800121c <MX_CAN_Init+0x60>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80011de:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <MX_CAN_Init+0x60>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80011e4:	4b0d      	ldr	r3, [pc, #52]	@ (800121c <MX_CAN_Init+0x60>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80011ea:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <MX_CAN_Init+0x60>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80011f0:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <MX_CAN_Init+0x60>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80011f6:	4b09      	ldr	r3, [pc, #36]	@ (800121c <MX_CAN_Init+0x60>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = ENABLE;
 80011fc:	4b07      	ldr	r3, [pc, #28]	@ (800121c <MX_CAN_Init+0x60>)
 80011fe:	2201      	movs	r2, #1
 8001200:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 8001202:	4b06      	ldr	r3, [pc, #24]	@ (800121c <MX_CAN_Init+0x60>)
 8001204:	2201      	movs	r2, #1
 8001206:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001208:	4804      	ldr	r0, [pc, #16]	@ (800121c <MX_CAN_Init+0x60>)
 800120a:	f000 fe3b 	bl	8001e84 <HAL_CAN_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8001214:	f000 fa7b 	bl	800170e <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	2000022c 	.word	0x2000022c
 8001220:	40006400 	.word	0x40006400

08001224 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	@ 0x28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a2d      	ldr	r2, [pc, #180]	@ (80012f4 <HAL_CAN_MspInit+0xd0>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d153      	bne.n	80012ec <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001244:	4b2c      	ldr	r3, [pc, #176]	@ (80012f8 <HAL_CAN_MspInit+0xd4>)
 8001246:	69db      	ldr	r3, [r3, #28]
 8001248:	4a2b      	ldr	r2, [pc, #172]	@ (80012f8 <HAL_CAN_MspInit+0xd4>)
 800124a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800124e:	61d3      	str	r3, [r2, #28]
 8001250:	4b29      	ldr	r3, [pc, #164]	@ (80012f8 <HAL_CAN_MspInit+0xd4>)
 8001252:	69db      	ldr	r3, [r3, #28]
 8001254:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800125c:	4b26      	ldr	r3, [pc, #152]	@ (80012f8 <HAL_CAN_MspInit+0xd4>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	4a25      	ldr	r2, [pc, #148]	@ (80012f8 <HAL_CAN_MspInit+0xd4>)
 8001262:	f043 0308 	orr.w	r3, r3, #8
 8001266:	6193      	str	r3, [r2, #24]
 8001268:	4b23      	ldr	r3, [pc, #140]	@ (80012f8 <HAL_CAN_MspInit+0xd4>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	f003 0308 	and.w	r3, r3, #8
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001274:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800127a:	2300      	movs	r3, #0
 800127c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4619      	mov	r1, r3
 8001288:	481c      	ldr	r0, [pc, #112]	@ (80012fc <HAL_CAN_MspInit+0xd8>)
 800128a:	f001 fc7b 	bl	8002b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800128e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001298:	2303      	movs	r3, #3
 800129a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4619      	mov	r1, r3
 80012a2:	4816      	ldr	r0, [pc, #88]	@ (80012fc <HAL_CAN_MspInit+0xd8>)
 80012a4:	f001 fc6e 	bl	8002b84 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80012a8:	4b15      	ldr	r3, [pc, #84]	@ (8001300 <HAL_CAN_MspInit+0xdc>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80012ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b0:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 80012b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80012b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80012bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80012be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80012c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001300 <HAL_CAN_MspInit+0xdc>)
 80012c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ca:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2100      	movs	r1, #0
 80012d0:	2013      	movs	r0, #19
 80012d2:	f001 fc20 	bl	8002b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 80012d6:	2013      	movs	r0, #19
 80012d8:	f001 fc39 	bl	8002b4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80012dc:	2200      	movs	r2, #0
 80012de:	2100      	movs	r1, #0
 80012e0:	2014      	movs	r0, #20
 80012e2:	f001 fc18 	bl	8002b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80012e6:	2014      	movs	r0, #20
 80012e8:	f001 fc31 	bl	8002b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80012ec:	bf00      	nop
 80012ee:	3728      	adds	r7, #40	@ 0x28
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40006400 	.word	0x40006400
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40010c00 	.word	0x40010c00
 8001300:	40010000 	.word	0x40010000

08001304 <CAN_Filter_Config>:
  }
}

/* USER CODE BEGIN 1 */
void CAN_Filter_Config(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	@ 0x28
 8001308:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef sFilterConfig;

    sFilterConfig.FilterBank = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800130e:	2300      	movs	r3, #0
 8001310:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001312:	2301      	movs	r3, #1
 8001314:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterIdHigh = 0x0000;
 8001316:	2300      	movs	r3, #0
 8001318:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = 0x0000;
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterActivation = ENABLE;
 800132a:	2301      	movs	r3, #1
 800132c:	623b      	str	r3, [r7, #32]
    sFilterConfig.SlaveStartFilterBank = 14; // tylko jeśli masz 2 CAN-y
 800132e:	230e      	movs	r3, #14
 8001330:	627b      	str	r3, [r7, #36]	@ 0x24

    if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8001332:	463b      	mov	r3, r7
 8001334:	4619      	mov	r1, r3
 8001336:	4803      	ldr	r0, [pc, #12]	@ (8001344 <CAN_Filter_Config+0x40>)
 8001338:	f000 fe9f 	bl	800207a <HAL_CAN_ConfigFilter>
    {
        // Obsługa błędu
    }
}
 800133c:	bf00      	nop
 800133e:	3728      	adds	r7, #40	@ 0x28
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	2000022c 	.word	0x2000022c

08001348 <CAN_Start_Config>:

void CAN_Start_Config(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
    HAL_CAN_Start(&hcan);
 800134c:	4804      	ldr	r0, [pc, #16]	@ (8001360 <CAN_Start_Config+0x18>)
 800134e:	f000 ff5d 	bl	800220c <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001352:	2102      	movs	r1, #2
 8001354:	4802      	ldr	r0, [pc, #8]	@ (8001360 <CAN_Start_Config+0x18>)
 8001356:	f001 f8be 	bl	80024d6 <HAL_CAN_ActivateNotification>
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	2000022c 	.word	0x2000022c

08001364 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &Rxheader, Rxmsg);
 800136c:	4b0d      	ldr	r3, [pc, #52]	@ (80013a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 800136e:	4a0e      	ldr	r2, [pc, #56]	@ (80013a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001370:	2100      	movs	r1, #0
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f000 ff8e 	bl	8002294 <HAL_CAN_GetRxMessage>

    if(Rxheader.StdId ==20)
 8001378:	4b0b      	ldr	r3, [pc, #44]	@ (80013a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b14      	cmp	r3, #20
 800137e:	d10d      	bne.n	800139c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>
    {
    // teraz masz float w zmiennej

    	memcpy(&receivedInt, Rxmsg, sizeof(float));
 8001380:	4b08      	ldr	r3, [pc, #32]	@ (80013a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a09      	ldr	r2, [pc, #36]	@ (80013ac <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001386:	6013      	str	r3, [r2, #0]

    // Wyświetl lub użyj dalej
    	printf("Odebrany kat: %f\n", receivedInt);
 8001388:	4b08      	ldr	r3, [pc, #32]	@ (80013ac <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f84b 	bl	8000428 <__aeabi_f2d>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4806      	ldr	r0, [pc, #24]	@ (80013b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8001398:	f004 f932 	bl	8005600 <iprintf>
    }
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000220 	.word	0x20000220
 80013a8:	20000204 	.word	0x20000204
 80013ac:	20000228 	.word	0x20000228
 80013b0:	08008e98 	.word	0x08008e98

080013b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001480 <MX_GPIO_Init+0xcc>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	4a2c      	ldr	r2, [pc, #176]	@ (8001480 <MX_GPIO_Init+0xcc>)
 80013ce:	f043 0310 	orr.w	r3, r3, #16
 80013d2:	6193      	str	r3, [r2, #24]
 80013d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001480 <MX_GPIO_Init+0xcc>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	f003 0310 	and.w	r3, r3, #16
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e0:	4b27      	ldr	r3, [pc, #156]	@ (8001480 <MX_GPIO_Init+0xcc>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	4a26      	ldr	r2, [pc, #152]	@ (8001480 <MX_GPIO_Init+0xcc>)
 80013e6:	f043 0320 	orr.w	r3, r3, #32
 80013ea:	6193      	str	r3, [r2, #24]
 80013ec:	4b24      	ldr	r3, [pc, #144]	@ (8001480 <MX_GPIO_Init+0xcc>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	f003 0320 	and.w	r3, r3, #32
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f8:	4b21      	ldr	r3, [pc, #132]	@ (8001480 <MX_GPIO_Init+0xcc>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	4a20      	ldr	r2, [pc, #128]	@ (8001480 <MX_GPIO_Init+0xcc>)
 80013fe:	f043 0304 	orr.w	r3, r3, #4
 8001402:	6193      	str	r3, [r2, #24]
 8001404:	4b1e      	ldr	r3, [pc, #120]	@ (8001480 <MX_GPIO_Init+0xcc>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001410:	4b1b      	ldr	r3, [pc, #108]	@ (8001480 <MX_GPIO_Init+0xcc>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	4a1a      	ldr	r2, [pc, #104]	@ (8001480 <MX_GPIO_Init+0xcc>)
 8001416:	f043 0308 	orr.w	r3, r3, #8
 800141a:	6193      	str	r3, [r2, #24]
 800141c:	4b18      	ldr	r3, [pc, #96]	@ (8001480 <MX_GPIO_Init+0xcc>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f003 0308 	and.w	r3, r3, #8
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001428:	2200      	movs	r2, #0
 800142a:	2120      	movs	r1, #32
 800142c:	4815      	ldr	r0, [pc, #84]	@ (8001484 <MX_GPIO_Init+0xd0>)
 800142e:	f001 fd2d 	bl	8002e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001432:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001436:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001438:	4b13      	ldr	r3, [pc, #76]	@ (8001488 <MX_GPIO_Init+0xd4>)
 800143a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001440:	f107 0310 	add.w	r3, r7, #16
 8001444:	4619      	mov	r1, r3
 8001446:	4811      	ldr	r0, [pc, #68]	@ (800148c <MX_GPIO_Init+0xd8>)
 8001448:	f001 fb9c 	bl	8002b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800144c:	2320      	movs	r3, #32
 800144e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001450:	2301      	movs	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2302      	movs	r3, #2
 800145a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800145c:	f107 0310 	add.w	r3, r7, #16
 8001460:	4619      	mov	r1, r3
 8001462:	4808      	ldr	r0, [pc, #32]	@ (8001484 <MX_GPIO_Init+0xd0>)
 8001464:	f001 fb8e 	bl	8002b84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001468:	2200      	movs	r2, #0
 800146a:	2100      	movs	r1, #0
 800146c:	2028      	movs	r0, #40	@ 0x28
 800146e:	f001 fb52 	bl	8002b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001472:	2028      	movs	r0, #40	@ 0x28
 8001474:	f001 fb6b 	bl	8002b4e <HAL_NVIC_EnableIRQ>

}
 8001478:	bf00      	nop
 800147a:	3720      	adds	r7, #32
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40021000 	.word	0x40021000
 8001484:	40010800 	.word	0x40010800
 8001488:	10110000 	.word	0x10110000
 800148c:	40011000 	.word	0x40011000

08001490 <PID_Update>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t PID_Update(float setpoint, float measurement)
{
 8001490:	b590      	push	{r4, r7, lr}
 8001492:	b087      	sub	sp, #28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
    float error = setpoint - measurement;
 800149a:	6839      	ldr	r1, [r7, #0]
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff fb67 	bl	8000b70 <__aeabi_fsub>
 80014a2:	4603      	mov	r3, r0
 80014a4:	613b      	str	r3, [r7, #16]

    integral += error;
 80014a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001550 <PID_Update+0xc0>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6939      	ldr	r1, [r7, #16]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fb61 	bl	8000b74 <__addsf3>
 80014b2:	4603      	mov	r3, r0
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b26      	ldr	r3, [pc, #152]	@ (8001550 <PID_Update+0xc0>)
 80014b8:	601a      	str	r2, [r3, #0]
    float derivative = error - previous_error;
 80014ba:	4b26      	ldr	r3, [pc, #152]	@ (8001554 <PID_Update+0xc4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4619      	mov	r1, r3
 80014c0:	6938      	ldr	r0, [r7, #16]
 80014c2:	f7ff fb55 	bl	8000b70 <__aeabi_fsub>
 80014c6:	4603      	mov	r3, r0
 80014c8:	60fb      	str	r3, [r7, #12]

    float output = Kp * error + Ki * integral + Kd * derivative;
 80014ca:	4b23      	ldr	r3, [pc, #140]	@ (8001558 <PID_Update+0xc8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6939      	ldr	r1, [r7, #16]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fc57 	bl	8000d84 <__aeabi_fmul>
 80014d6:	4603      	mov	r3, r0
 80014d8:	461c      	mov	r4, r3
 80014da:	4b20      	ldr	r3, [pc, #128]	@ (800155c <PID_Update+0xcc>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a1c      	ldr	r2, [pc, #112]	@ (8001550 <PID_Update+0xc0>)
 80014e0:	6812      	ldr	r2, [r2, #0]
 80014e2:	4611      	mov	r1, r2
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fc4d 	bl	8000d84 <__aeabi_fmul>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4619      	mov	r1, r3
 80014ee:	4620      	mov	r0, r4
 80014f0:	f7ff fb40 	bl	8000b74 <__addsf3>
 80014f4:	4603      	mov	r3, r0
 80014f6:	461c      	mov	r4, r3
 80014f8:	4b19      	ldr	r3, [pc, #100]	@ (8001560 <PID_Update+0xd0>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68f9      	ldr	r1, [r7, #12]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fc40 	bl	8000d84 <__aeabi_fmul>
 8001504:	4603      	mov	r3, r0
 8001506:	4619      	mov	r1, r3
 8001508:	4620      	mov	r0, r4
 800150a:	f7ff fb33 	bl	8000b74 <__addsf3>
 800150e:	4603      	mov	r3, r0
 8001510:	617b      	str	r3, [r7, #20]

    previous_error = error;
 8001512:	4a10      	ldr	r2, [pc, #64]	@ (8001554 <PID_Update+0xc4>)
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	6013      	str	r3, [r2, #0]

    // Ograniczenie wyjścia PWM do 0 - 1000 (np. dla 1kHz timera)
    if (output < 0) output = 0;
 8001518:	f04f 0100 	mov.w	r1, #0
 800151c:	6978      	ldr	r0, [r7, #20]
 800151e:	f7ff fdcf 	bl	80010c0 <__aeabi_fcmplt>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d002      	beq.n	800152e <PID_Update+0x9e>
 8001528:	f04f 0300 	mov.w	r3, #0
 800152c:	617b      	str	r3, [r7, #20]
    if (output > 1000) output = 1000;
 800152e:	490d      	ldr	r1, [pc, #52]	@ (8001564 <PID_Update+0xd4>)
 8001530:	6978      	ldr	r0, [r7, #20]
 8001532:	f7ff fde3 	bl	80010fc <__aeabi_fcmpgt>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <PID_Update+0xb0>
 800153c:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <PID_Update+0xd4>)
 800153e:	617b      	str	r3, [r7, #20]

    return (uint32_t)output;
 8001540:	6978      	ldr	r0, [r7, #20]
 8001542:	f7ff fde5 	bl	8001110 <__aeabi_f2uiz>
 8001546:	4603      	mov	r3, r0
}
 8001548:	4618      	mov	r0, r3
 800154a:	371c      	adds	r7, #28
 800154c:	46bd      	mov	sp, r7
 800154e:	bd90      	pop	{r4, r7, pc}
 8001550:	20000260 	.word	0x20000260
 8001554:	2000025c 	.word	0x2000025c
 8001558:	20000004 	.word	0x20000004
 800155c:	20000008 	.word	0x20000008
 8001560:	2000000c 	.word	0x2000000c
 8001564:	447a0000 	.word	0x447a0000

08001568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001568:	b598      	push	{r3, r4, r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800156c:	f000 fc28 	bl	8001dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001570:	f000 f88c 	bl	800168c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001574:	f7ff ff1e 	bl	80013b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001578:	f000 fb94 	bl	8001ca4 <MX_USART2_UART_Init>
  MX_CAN_Init();
 800157c:	f7ff fe1e 	bl	80011bc <MX_CAN_Init>

  CAN_Filter_Config();
 8001580:	f7ff fec0 	bl	8001304 <CAN_Filter_Config>
  CAN_Start_Config();
 8001584:	f7ff fee0 	bl	8001348 <CAN_Start_Config>
  MX_TIM1_Init();
 8001588:	f000 fa0a 	bl	80019a0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800158c:	f000 faa8 	bl	8001ae0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL);
 8001590:	213c      	movs	r1, #60	@ 0x3c
 8001592:	4834      	ldr	r0, [pc, #208]	@ (8001664 <main+0xfc>)
 8001594:	f002 fab0 	bl	8003af8 <HAL_TIM_Encoder_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  count=__HAL_TIM_GET_COUNTER(&htim2);
 8001598:	4b32      	ldr	r3, [pc, #200]	@ (8001664 <main+0xfc>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fb98 	bl	8000cd4 <__aeabi_ui2f>
 80015a4:	4603      	mov	r3, r0
 80015a6:	4a30      	ldr	r2, [pc, #192]	@ (8001668 <main+0x100>)
 80015a8:	6013      	str	r3, [r2, #0]
	  angle=count*360/(4096*przełożenie);
 80015aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001668 <main+0x100>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	492f      	ldr	r1, [pc, #188]	@ (800166c <main+0x104>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fbe7 	bl	8000d84 <__aeabi_fmul>
 80015b6:	4603      	mov	r3, r0
 80015b8:	461c      	mov	r4, r3
 80015ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001670 <main+0x108>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fbde 	bl	8000d84 <__aeabi_fmul>
 80015c8:	4603      	mov	r3, r0
 80015ca:	4619      	mov	r1, r3
 80015cc:	4620      	mov	r0, r4
 80015ce:	f7ff fc8d 	bl	8000eec <__aeabi_fdiv>
 80015d2:	4603      	mov	r3, r0
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b27      	ldr	r3, [pc, #156]	@ (8001674 <main+0x10c>)
 80015d8:	601a      	str	r2, [r3, #0]
	  pwm_output = PID_Update((float)receivedInt, (float)angle);
 80015da:	4b27      	ldr	r3, [pc, #156]	@ (8001678 <main+0x110>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a25      	ldr	r2, [pc, #148]	@ (8001674 <main+0x10c>)
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	4611      	mov	r1, r2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff53 	bl	8001490 <PID_Update>
 80015ea:	4603      	mov	r3, r0
 80015ec:	4a23      	ldr	r2, [pc, #140]	@ (800167c <main+0x114>)
 80015ee:	6013      	str	r3, [r2, #0]
	  if (pwm_output > current_pwm)
 80015f0:	4b22      	ldr	r3, [pc, #136]	@ (800167c <main+0x114>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b22      	ldr	r3, [pc, #136]	@ (8001680 <main+0x118>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d911      	bls.n	8001620 <main+0xb8>
	  {
	      current_pwm += ramp_step;
 80015fc:	4b20      	ldr	r3, [pc, #128]	@ (8001680 <main+0x118>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b20      	ldr	r3, [pc, #128]	@ (8001684 <main+0x11c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4413      	add	r3, r2
 8001606:	4a1e      	ldr	r2, [pc, #120]	@ (8001680 <main+0x118>)
 8001608:	6013      	str	r3, [r2, #0]
	      if (current_pwm > pwm_output) current_pwm = pwm_output;
 800160a:	4b1d      	ldr	r3, [pc, #116]	@ (8001680 <main+0x118>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	4b1b      	ldr	r3, [pc, #108]	@ (800167c <main+0x114>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	429a      	cmp	r2, r3
 8001614:	d91b      	bls.n	800164e <main+0xe6>
 8001616:	4b19      	ldr	r3, [pc, #100]	@ (800167c <main+0x114>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a19      	ldr	r2, [pc, #100]	@ (8001680 <main+0x118>)
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	e016      	b.n	800164e <main+0xe6>
	  }
	  else if (pwm_output < current_pwm)
 8001620:	4b16      	ldr	r3, [pc, #88]	@ (800167c <main+0x114>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4b16      	ldr	r3, [pc, #88]	@ (8001680 <main+0x118>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	429a      	cmp	r2, r3
 800162a:	d210      	bcs.n	800164e <main+0xe6>
	  {
	      if (current_pwm > ramp_step)
 800162c:	4b14      	ldr	r3, [pc, #80]	@ (8001680 <main+0x118>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b14      	ldr	r3, [pc, #80]	@ (8001684 <main+0x11c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	429a      	cmp	r2, r3
 8001636:	d907      	bls.n	8001648 <main+0xe0>
	          current_pwm -= ramp_step;
 8001638:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <main+0x118>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b11      	ldr	r3, [pc, #68]	@ (8001684 <main+0x11c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	4a0f      	ldr	r2, [pc, #60]	@ (8001680 <main+0x118>)
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	e002      	b.n	800164e <main+0xe6>
	      else
	          current_pwm = 0;
 8001648:	4b0d      	ldr	r3, [pc, #52]	@ (8001680 <main+0x118>)
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
	  }
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_output);
 800164e:	4b0e      	ldr	r3, [pc, #56]	@ (8001688 <main+0x120>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a0a      	ldr	r2, [pc, #40]	@ (800167c <main+0x114>)
 8001654:	6812      	ldr	r2, [r2, #0]
 8001656:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001658:	2100      	movs	r1, #0
 800165a:	480b      	ldr	r0, [pc, #44]	@ (8001688 <main+0x120>)
 800165c:	f002 f908 	bl	8003870 <HAL_TIM_PWM_Start>
	  count=__HAL_TIM_GET_COUNTER(&htim2);
 8001660:	e79a      	b.n	8001598 <main+0x30>
 8001662:	bf00      	nop
 8001664:	200002b8 	.word	0x200002b8
 8001668:	20000254 	.word	0x20000254
 800166c:	43b40000 	.word	0x43b40000
 8001670:	20000000 	.word	0x20000000
 8001674:	20000258 	.word	0x20000258
 8001678:	20000228 	.word	0x20000228
 800167c:	20000268 	.word	0x20000268
 8001680:	20000264 	.word	0x20000264
 8001684:	20000010 	.word	0x20000010
 8001688:	20000270 	.word	0x20000270

0800168c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b090      	sub	sp, #64	@ 0x40
 8001690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001692:	f107 0318 	add.w	r3, r7, #24
 8001696:	2228      	movs	r2, #40	@ 0x28
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f004 f825 	bl	80056ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
 80016ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016ae:	2302      	movs	r3, #2
 80016b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016b2:	2301      	movs	r3, #1
 80016b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016b6:	2310      	movs	r3, #16
 80016b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ba:	2302      	movs	r3, #2
 80016bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80016be:	2300      	movs	r3, #0
 80016c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80016c2:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80016c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c8:	f107 0318 	add.w	r3, r7, #24
 80016cc:	4618      	mov	r0, r3
 80016ce:	f001 fc17 	bl	8002f00 <HAL_RCC_OscConfig>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80016d8:	f000 f819 	bl	800170e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016dc:	230f      	movs	r3, #15
 80016de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e0:	2302      	movs	r3, #2
 80016e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e4:	2300      	movs	r3, #0
 80016e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	2102      	movs	r1, #2
 80016f6:	4618      	mov	r0, r3
 80016f8:	f001 fe84 	bl	8003404 <HAL_RCC_ClockConfig>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001702:	f000 f804 	bl	800170e <Error_Handler>
  }
}
 8001706:	bf00      	nop
 8001708:	3740      	adds	r7, #64	@ 0x40
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001712:	b672      	cpsid	i
}
 8001714:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001716:	bf00      	nop
 8001718:	e7fd      	b.n	8001716 <Error_Handler+0x8>
	...

0800171c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001722:	4b15      	ldr	r3, [pc, #84]	@ (8001778 <HAL_MspInit+0x5c>)
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	4a14      	ldr	r2, [pc, #80]	@ (8001778 <HAL_MspInit+0x5c>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6193      	str	r3, [r2, #24]
 800172e:	4b12      	ldr	r3, [pc, #72]	@ (8001778 <HAL_MspInit+0x5c>)
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800173a:	4b0f      	ldr	r3, [pc, #60]	@ (8001778 <HAL_MspInit+0x5c>)
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	4a0e      	ldr	r2, [pc, #56]	@ (8001778 <HAL_MspInit+0x5c>)
 8001740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001744:	61d3      	str	r3, [r2, #28]
 8001746:	4b0c      	ldr	r3, [pc, #48]	@ (8001778 <HAL_MspInit+0x5c>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001752:	4b0a      	ldr	r3, [pc, #40]	@ (800177c <HAL_MspInit+0x60>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	4a04      	ldr	r2, [pc, #16]	@ (800177c <HAL_MspInit+0x60>)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176e:	bf00      	nop
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	40021000 	.word	0x40021000
 800177c:	40010000 	.word	0x40010000

08001780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <NMI_Handler+0x4>

08001788 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800178c:	bf00      	nop
 800178e:	e7fd      	b.n	800178c <HardFault_Handler+0x4>

08001790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001794:	bf00      	nop
 8001796:	e7fd      	b.n	8001794 <MemManage_Handler+0x4>

08001798 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800179c:	bf00      	nop
 800179e:	e7fd      	b.n	800179c <BusFault_Handler+0x4>

080017a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a4:	bf00      	nop
 80017a6:	e7fd      	b.n	80017a4 <UsageFault_Handler+0x4>

080017a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr

080017cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d0:	f000 fb3c 	bl	8001e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80017dc:	4802      	ldr	r0, [pc, #8]	@ (80017e8 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 80017de:	f000 fe9f 	bl	8002520 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	2000022c 	.word	0x2000022c

080017ec <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80017f0:	4802      	ldr	r0, [pc, #8]	@ (80017fc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80017f2:	f000 fe95 	bl	8002520 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	2000022c 	.word	0x2000022c

08001800 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001804:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001808:	f001 fb58 	bl	8002ebc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}

08001810 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return 1;
 8001814:	2301      	movs	r3, #1
}
 8001816:	4618      	mov	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr

0800181e <_kill>:

int _kill(int pid, int sig)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001828:	f003 ffb2 	bl	8005790 <__errno>
 800182c:	4603      	mov	r3, r0
 800182e:	2216      	movs	r2, #22
 8001830:	601a      	str	r2, [r3, #0]
  return -1;
 8001832:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <_exit>:

void _exit (int status)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001846:	f04f 31ff 	mov.w	r1, #4294967295
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff ffe7 	bl	800181e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <_exit+0x12>

08001854 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	e00a      	b.n	800187c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001866:	f3af 8000 	nop.w
 800186a:	4601      	mov	r1, r0
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	1c5a      	adds	r2, r3, #1
 8001870:	60ba      	str	r2, [r7, #8]
 8001872:	b2ca      	uxtb	r2, r1
 8001874:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	3301      	adds	r3, #1
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	429a      	cmp	r2, r3
 8001882:	dbf0      	blt.n	8001866 <_read+0x12>
  }

  return len;
 8001884:	687b      	ldr	r3, [r7, #4]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b086      	sub	sp, #24
 8001892:	af00      	add	r7, sp, #0
 8001894:	60f8      	str	r0, [r7, #12]
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	e009      	b.n	80018b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	60ba      	str	r2, [r7, #8]
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	3301      	adds	r3, #1
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	dbf1      	blt.n	80018a0 <_write+0x12>
  }
  return len;
 80018bc:	687b      	ldr	r3, [r7, #4]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <_close>:

int _close(int file)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018ec:	605a      	str	r2, [r3, #4]
  return 0;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr

080018fa <_isatty>:

int _isatty(int file)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001902:	2301      	movs	r3, #1
}
 8001904:	4618      	mov	r0, r3
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr

0800190e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800190e:	b480      	push	{r7}
 8001910:	b085      	sub	sp, #20
 8001912:	af00      	add	r7, sp, #0
 8001914:	60f8      	str	r0, [r7, #12]
 8001916:	60b9      	str	r1, [r7, #8]
 8001918:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	bc80      	pop	{r7}
 8001924:	4770      	bx	lr
	...

08001928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001930:	4a14      	ldr	r2, [pc, #80]	@ (8001984 <_sbrk+0x5c>)
 8001932:	4b15      	ldr	r3, [pc, #84]	@ (8001988 <_sbrk+0x60>)
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800193c:	4b13      	ldr	r3, [pc, #76]	@ (800198c <_sbrk+0x64>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d102      	bne.n	800194a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001944:	4b11      	ldr	r3, [pc, #68]	@ (800198c <_sbrk+0x64>)
 8001946:	4a12      	ldr	r2, [pc, #72]	@ (8001990 <_sbrk+0x68>)
 8001948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800194a:	4b10      	ldr	r3, [pc, #64]	@ (800198c <_sbrk+0x64>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	429a      	cmp	r2, r3
 8001956:	d207      	bcs.n	8001968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001958:	f003 ff1a 	bl	8005790 <__errno>
 800195c:	4603      	mov	r3, r0
 800195e:	220c      	movs	r2, #12
 8001960:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001962:	f04f 33ff 	mov.w	r3, #4294967295
 8001966:	e009      	b.n	800197c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001968:	4b08      	ldr	r3, [pc, #32]	@ (800198c <_sbrk+0x64>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800196e:	4b07      	ldr	r3, [pc, #28]	@ (800198c <_sbrk+0x64>)
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4413      	add	r3, r2
 8001976:	4a05      	ldr	r2, [pc, #20]	@ (800198c <_sbrk+0x64>)
 8001978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800197a:	68fb      	ldr	r3, [r7, #12]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20005000 	.word	0x20005000
 8001988:	00000400 	.word	0x00000400
 800198c:	2000026c 	.word	0x2000026c
 8001990:	20000498 	.word	0x20000498

08001994 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr

080019a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b096      	sub	sp, #88	@ 0x58
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019a6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]
 80019cc:	611a      	str	r2, [r3, #16]
 80019ce:	615a      	str	r2, [r3, #20]
 80019d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019d2:	1d3b      	adds	r3, r7, #4
 80019d4:	2220      	movs	r2, #32
 80019d6:	2100      	movs	r1, #0
 80019d8:	4618      	mov	r0, r3
 80019da:	f003 fe86 	bl	80056ea <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019de:	4b3e      	ldr	r3, [pc, #248]	@ (8001ad8 <MX_TIM1_Init+0x138>)
 80019e0:	4a3e      	ldr	r2, [pc, #248]	@ (8001adc <MX_TIM1_Init+0x13c>)
 80019e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019e4:	4b3c      	ldr	r3, [pc, #240]	@ (8001ad8 <MX_TIM1_Init+0x138>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ea:	4b3b      	ldr	r3, [pc, #236]	@ (8001ad8 <MX_TIM1_Init+0x138>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80019f0:	4b39      	ldr	r3, [pc, #228]	@ (8001ad8 <MX_TIM1_Init+0x138>)
 80019f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f8:	4b37      	ldr	r3, [pc, #220]	@ (8001ad8 <MX_TIM1_Init+0x138>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019fe:	4b36      	ldr	r3, [pc, #216]	@ (8001ad8 <MX_TIM1_Init+0x138>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a04:	4b34      	ldr	r3, [pc, #208]	@ (8001ad8 <MX_TIM1_Init+0x138>)
 8001a06:	2280      	movs	r2, #128	@ 0x80
 8001a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a0a:	4833      	ldr	r0, [pc, #204]	@ (8001ad8 <MX_TIM1_Init+0x138>)
 8001a0c:	f001 fe88 	bl	8003720 <HAL_TIM_Base_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001a16:	f7ff fe7a 	bl	800170e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a1e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a20:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001a24:	4619      	mov	r1, r3
 8001a26:	482c      	ldr	r0, [pc, #176]	@ (8001ad8 <MX_TIM1_Init+0x138>)
 8001a28:	f002 f9b6 	bl	8003d98 <HAL_TIM_ConfigClockSource>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001a32:	f7ff fe6c 	bl	800170e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a36:	4828      	ldr	r0, [pc, #160]	@ (8001ad8 <MX_TIM1_Init+0x138>)
 8001a38:	f001 fec1 	bl	80037be <HAL_TIM_PWM_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001a42:	f7ff fe64 	bl	800170e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a46:	2300      	movs	r3, #0
 8001a48:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a4e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a52:	4619      	mov	r1, r3
 8001a54:	4820      	ldr	r0, [pc, #128]	@ (8001ad8 <MX_TIM1_Init+0x138>)
 8001a56:	f002 fd17 	bl	8004488 <HAL_TIMEx_MasterConfigSynchronization>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001a60:	f7ff fe55 	bl	800170e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a64:	2360      	movs	r3, #96	@ 0x60
 8001a66:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a70:	2300      	movs	r3, #0
 8001a72:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a84:	2200      	movs	r2, #0
 8001a86:	4619      	mov	r1, r3
 8001a88:	4813      	ldr	r0, [pc, #76]	@ (8001ad8 <MX_TIM1_Init+0x138>)
 8001a8a:	f002 f8c3 	bl	8003c14 <HAL_TIM_PWM_ConfigChannel>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001a94:	f7ff fe3b 	bl	800170e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001aac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ab0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4807      	ldr	r0, [pc, #28]	@ (8001ad8 <MX_TIM1_Init+0x138>)
 8001abc:	f002 fd42 	bl	8004544 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001ac6:	f7ff fe22 	bl	800170e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001aca:	4803      	ldr	r0, [pc, #12]	@ (8001ad8 <MX_TIM1_Init+0x138>)
 8001acc:	f000 f8b6 	bl	8001c3c <HAL_TIM_MspPostInit>

}
 8001ad0:	bf00      	nop
 8001ad2:	3758      	adds	r7, #88	@ 0x58
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000270 	.word	0x20000270
 8001adc:	40012c00 	.word	0x40012c00

08001ae0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08c      	sub	sp, #48	@ 0x30
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ae6:	f107 030c 	add.w	r3, r7, #12
 8001aea:	2224      	movs	r2, #36	@ 0x24
 8001aec:	2100      	movs	r1, #0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f003 fdfb 	bl	80056ea <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af4:	1d3b      	adds	r3, r7, #4
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001afc:	4b21      	ldr	r3, [pc, #132]	@ (8001b84 <MX_TIM2_Init+0xa4>)
 8001afe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4095;
 8001b04:	4b1f      	ldr	r3, [pc, #124]	@ (8001b84 <MX_TIM2_Init+0xa4>)
 8001b06:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001b0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001b84 <MX_TIM2_Init+0xa4>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001b12:	4b1c      	ldr	r3, [pc, #112]	@ (8001b84 <MX_TIM2_Init+0xa4>)
 8001b14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001b84 <MX_TIM2_Init+0xa4>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b20:	4b18      	ldr	r3, [pc, #96]	@ (8001b84 <MX_TIM2_Init+0xa4>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b26:	2301      	movs	r3, #1
 8001b28:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b42:	2300      	movs	r3, #0
 8001b44:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001b4a:	f107 030c 	add.w	r3, r7, #12
 8001b4e:	4619      	mov	r1, r3
 8001b50:	480c      	ldr	r0, [pc, #48]	@ (8001b84 <MX_TIM2_Init+0xa4>)
 8001b52:	f001 ff2f 	bl	80039b4 <HAL_TIM_Encoder_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001b5c:	f7ff fdd7 	bl	800170e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b60:	2300      	movs	r3, #0
 8001b62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b68:	1d3b      	adds	r3, r7, #4
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4805      	ldr	r0, [pc, #20]	@ (8001b84 <MX_TIM2_Init+0xa4>)
 8001b6e:	f002 fc8b 	bl	8004488 <HAL_TIMEx_MasterConfigSynchronization>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001b78:	f7ff fdc9 	bl	800170e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b7c:	bf00      	nop
 8001b7e:	3730      	adds	r7, #48	@ 0x30
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	200002b8 	.word	0x200002b8

08001b88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a09      	ldr	r2, [pc, #36]	@ (8001bbc <HAL_TIM_Base_MspInit+0x34>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d10b      	bne.n	8001bb2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b9a:	4b09      	ldr	r3, [pc, #36]	@ (8001bc0 <HAL_TIM_Base_MspInit+0x38>)
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	4a08      	ldr	r2, [pc, #32]	@ (8001bc0 <HAL_TIM_Base_MspInit+0x38>)
 8001ba0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ba4:	6193      	str	r3, [r2, #24]
 8001ba6:	4b06      	ldr	r3, [pc, #24]	@ (8001bc0 <HAL_TIM_Base_MspInit+0x38>)
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001bb2:	bf00      	nop
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr
 8001bbc:	40012c00 	.word	0x40012c00
 8001bc0:	40021000 	.word	0x40021000

08001bc4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b088      	sub	sp, #32
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0310 	add.w	r3, r7, #16
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
  if(tim_encoderHandle->Instance==TIM2)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001be2:	d123      	bne.n	8001c2c <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001be4:	4b13      	ldr	r3, [pc, #76]	@ (8001c34 <HAL_TIM_Encoder_MspInit+0x70>)
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	4a12      	ldr	r2, [pc, #72]	@ (8001c34 <HAL_TIM_Encoder_MspInit+0x70>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	61d3      	str	r3, [r2, #28]
 8001bf0:	4b10      	ldr	r3, [pc, #64]	@ (8001c34 <HAL_TIM_Encoder_MspInit+0x70>)
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8001c34 <HAL_TIM_Encoder_MspInit+0x70>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	4a0c      	ldr	r2, [pc, #48]	@ (8001c34 <HAL_TIM_Encoder_MspInit+0x70>)
 8001c02:	f043 0304 	orr.w	r3, r3, #4
 8001c06:	6193      	str	r3, [r2, #24]
 8001c08:	4b0a      	ldr	r3, [pc, #40]	@ (8001c34 <HAL_TIM_Encoder_MspInit+0x70>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c14:	2303      	movs	r3, #3
 8001c16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c20:	f107 0310 	add.w	r3, r7, #16
 8001c24:	4619      	mov	r1, r3
 8001c26:	4804      	ldr	r0, [pc, #16]	@ (8001c38 <HAL_TIM_Encoder_MspInit+0x74>)
 8001c28:	f000 ffac 	bl	8002b84 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	3720      	adds	r7, #32
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40010800 	.word	0x40010800

08001c3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 0310 	add.w	r3, r7, #16
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a10      	ldr	r2, [pc, #64]	@ (8001c98 <HAL_TIM_MspPostInit+0x5c>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d118      	bne.n	8001c8e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c9c <HAL_TIM_MspPostInit+0x60>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	4a0e      	ldr	r2, [pc, #56]	@ (8001c9c <HAL_TIM_MspPostInit+0x60>)
 8001c62:	f043 0304 	orr.w	r3, r3, #4
 8001c66:	6193      	str	r3, [r2, #24]
 8001c68:	4b0c      	ldr	r3, [pc, #48]	@ (8001c9c <HAL_TIM_MspPostInit+0x60>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c82:	f107 0310 	add.w	r3, r7, #16
 8001c86:	4619      	mov	r1, r3
 8001c88:	4805      	ldr	r0, [pc, #20]	@ (8001ca0 <HAL_TIM_MspPostInit+0x64>)
 8001c8a:	f000 ff7b 	bl	8002b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001c8e:	bf00      	nop
 8001c90:	3720      	adds	r7, #32
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40012c00 	.word	0x40012c00
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40010800 	.word	0x40010800

08001ca4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ca8:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001caa:	4a12      	ldr	r2, [pc, #72]	@ (8001cf4 <MX_USART2_UART_Init+0x50>)
 8001cac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cae:	4b10      	ldr	r3, [pc, #64]	@ (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cb0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cc8:	4b09      	ldr	r3, [pc, #36]	@ (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cca:	220c      	movs	r2, #12
 8001ccc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cce:	4b08      	ldr	r3, [pc, #32]	@ (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cda:	4805      	ldr	r0, [pc, #20]	@ (8001cf0 <MX_USART2_UART_Init+0x4c>)
 8001cdc:	f002 fc83 	bl	80045e6 <HAL_UART_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ce6:	f7ff fd12 	bl	800170e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000300 	.word	0x20000300
 8001cf4:	40004400 	.word	0x40004400

08001cf8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	f107 0310 	add.w	r3, r7, #16
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a15      	ldr	r2, [pc, #84]	@ (8001d68 <HAL_UART_MspInit+0x70>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d123      	bne.n	8001d60 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d18:	4b14      	ldr	r3, [pc, #80]	@ (8001d6c <HAL_UART_MspInit+0x74>)
 8001d1a:	69db      	ldr	r3, [r3, #28]
 8001d1c:	4a13      	ldr	r2, [pc, #76]	@ (8001d6c <HAL_UART_MspInit+0x74>)
 8001d1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d22:	61d3      	str	r3, [r2, #28]
 8001d24:	4b11      	ldr	r3, [pc, #68]	@ (8001d6c <HAL_UART_MspInit+0x74>)
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d30:	4b0e      	ldr	r3, [pc, #56]	@ (8001d6c <HAL_UART_MspInit+0x74>)
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	4a0d      	ldr	r2, [pc, #52]	@ (8001d6c <HAL_UART_MspInit+0x74>)
 8001d36:	f043 0304 	orr.w	r3, r3, #4
 8001d3a:	6193      	str	r3, [r2, #24]
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d6c <HAL_UART_MspInit+0x74>)
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d48:	230c      	movs	r3, #12
 8001d4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2302      	movs	r3, #2
 8001d52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d54:	f107 0310 	add.w	r3, r7, #16
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4805      	ldr	r0, [pc, #20]	@ (8001d70 <HAL_UART_MspInit+0x78>)
 8001d5c:	f000 ff12 	bl	8002b84 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d60:	bf00      	nop
 8001d62:	3720      	adds	r7, #32
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40004400 	.word	0x40004400
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40010800 	.word	0x40010800

08001d74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d74:	f7ff fe0e 	bl	8001994 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d78:	480b      	ldr	r0, [pc, #44]	@ (8001da8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d7a:	490c      	ldr	r1, [pc, #48]	@ (8001dac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d7c:	4a0c      	ldr	r2, [pc, #48]	@ (8001db0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d80:	e002      	b.n	8001d88 <LoopCopyDataInit>

08001d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d86:	3304      	adds	r3, #4

08001d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d8c:	d3f9      	bcc.n	8001d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d8e:	4a09      	ldr	r2, [pc, #36]	@ (8001db4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d90:	4c09      	ldr	r4, [pc, #36]	@ (8001db8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d94:	e001      	b.n	8001d9a <LoopFillZerobss>

08001d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d98:	3204      	adds	r2, #4

08001d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d9c:	d3fb      	bcc.n	8001d96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d9e:	f003 fcfd 	bl	800579c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001da2:	f7ff fbe1 	bl	8001568 <main>
  bx lr
 8001da6:	4770      	bx	lr
  ldr r0, =_sdata
 8001da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dac:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001db0:	08009318 	.word	0x08009318
  ldr r2, =_sbss
 8001db4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001db8:	20000498 	.word	0x20000498

08001dbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dbc:	e7fe      	b.n	8001dbc <ADC1_2_IRQHandler>
	...

08001dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dc4:	4b08      	ldr	r3, [pc, #32]	@ (8001de8 <HAL_Init+0x28>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a07      	ldr	r2, [pc, #28]	@ (8001de8 <HAL_Init+0x28>)
 8001dca:	f043 0310 	orr.w	r3, r3, #16
 8001dce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd0:	2003      	movs	r0, #3
 8001dd2:	f000 fe95 	bl	8002b00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	f000 f808 	bl	8001dec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ddc:	f7ff fc9e 	bl	800171c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40022000 	.word	0x40022000

08001dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001df4:	4b12      	ldr	r3, [pc, #72]	@ (8001e40 <HAL_InitTick+0x54>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b12      	ldr	r3, [pc, #72]	@ (8001e44 <HAL_InitTick+0x58>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 fead 	bl	8002b6a <HAL_SYSTICK_Config>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e00e      	b.n	8001e38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b0f      	cmp	r3, #15
 8001e1e:	d80a      	bhi.n	8001e36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e20:	2200      	movs	r2, #0
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	f04f 30ff 	mov.w	r0, #4294967295
 8001e28:	f000 fe75 	bl	8002b16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e2c:	4a06      	ldr	r2, [pc, #24]	@ (8001e48 <HAL_InitTick+0x5c>)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	e000      	b.n	8001e38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20000014 	.word	0x20000014
 8001e44:	2000001c 	.word	0x2000001c
 8001e48:	20000018 	.word	0x20000018

08001e4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e50:	4b05      	ldr	r3, [pc, #20]	@ (8001e68 <HAL_IncTick+0x1c>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	461a      	mov	r2, r3
 8001e56:	4b05      	ldr	r3, [pc, #20]	@ (8001e6c <HAL_IncTick+0x20>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	4a03      	ldr	r2, [pc, #12]	@ (8001e6c <HAL_IncTick+0x20>)
 8001e5e:	6013      	str	r3, [r2, #0]
}
 8001e60:	bf00      	nop
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bc80      	pop	{r7}
 8001e66:	4770      	bx	lr
 8001e68:	2000001c 	.word	0x2000001c
 8001e6c:	20000348 	.word	0x20000348

08001e70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return uwTick;
 8001e74:	4b02      	ldr	r3, [pc, #8]	@ (8001e80 <HAL_GetTick+0x10>)
 8001e76:	681b      	ldr	r3, [r3, #0]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr
 8001e80:	20000348 	.word	0x20000348

08001e84 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e0ed      	b.n	8002072 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d102      	bne.n	8001ea8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff f9be 	bl	8001224 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 0201 	orr.w	r2, r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001eb8:	f7ff ffda 	bl	8001e70 <HAL_GetTick>
 8001ebc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ebe:	e012      	b.n	8001ee6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ec0:	f7ff ffd6 	bl	8001e70 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b0a      	cmp	r3, #10
 8001ecc:	d90b      	bls.n	8001ee6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2205      	movs	r2, #5
 8001ede:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e0c5      	b.n	8002072 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0e5      	beq.n	8001ec0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f022 0202 	bic.w	r2, r2, #2
 8001f02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f04:	f7ff ffb4 	bl	8001e70 <HAL_GetTick>
 8001f08:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f0a:	e012      	b.n	8001f32 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f0c:	f7ff ffb0 	bl	8001e70 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b0a      	cmp	r3, #10
 8001f18:	d90b      	bls.n	8001f32 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2205      	movs	r2, #5
 8001f2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e09f      	b.n	8002072 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1e5      	bne.n	8001f0c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	7e1b      	ldrb	r3, [r3, #24]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d108      	bne.n	8001f5a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	e007      	b.n	8001f6a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	7e5b      	ldrb	r3, [r3, #25]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d108      	bne.n	8001f84 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	e007      	b.n	8001f94 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f92:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	7e9b      	ldrb	r3, [r3, #26]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d108      	bne.n	8001fae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0220 	orr.w	r2, r2, #32
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	e007      	b.n	8001fbe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 0220 	bic.w	r2, r2, #32
 8001fbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	7edb      	ldrb	r3, [r3, #27]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d108      	bne.n	8001fd8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0210 	bic.w	r2, r2, #16
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	e007      	b.n	8001fe8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0210 	orr.w	r2, r2, #16
 8001fe6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	7f1b      	ldrb	r3, [r3, #28]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d108      	bne.n	8002002 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0208 	orr.w	r2, r2, #8
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	e007      	b.n	8002012 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0208 	bic.w	r2, r2, #8
 8002010:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	7f5b      	ldrb	r3, [r3, #29]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d108      	bne.n	800202c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f042 0204 	orr.w	r2, r2, #4
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	e007      	b.n	800203c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0204 	bic.w	r2, r2, #4
 800203a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	431a      	orrs	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	431a      	orrs	r2, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	ea42 0103 	orr.w	r1, r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	1e5a      	subs	r2, r3, #1
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800207a:	b480      	push	{r7}
 800207c:	b087      	sub	sp, #28
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002090:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002092:	7cfb      	ldrb	r3, [r7, #19]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d003      	beq.n	80020a0 <HAL_CAN_ConfigFilter+0x26>
 8002098:	7cfb      	ldrb	r3, [r7, #19]
 800209a:	2b02      	cmp	r3, #2
 800209c:	f040 80aa 	bne.w	80021f4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80020a6:	f043 0201 	orr.w	r2, r3, #1
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	f003 031f 	and.w	r3, r3, #31
 80020b8:	2201      	movs	r2, #1
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	43db      	mvns	r3, r3
 80020ca:	401a      	ands	r2, r3
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d123      	bne.n	8002122 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	401a      	ands	r2, r3
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80020fc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	3248      	adds	r2, #72	@ 0x48
 8002102:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002116:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002118:	6979      	ldr	r1, [r7, #20]
 800211a:	3348      	adds	r3, #72	@ 0x48
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	440b      	add	r3, r1
 8002120:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	69db      	ldr	r3, [r3, #28]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d122      	bne.n	8002170 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	431a      	orrs	r2, r3
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800214a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	3248      	adds	r2, #72	@ 0x48
 8002150:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002164:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002166:	6979      	ldr	r1, [r7, #20]
 8002168:	3348      	adds	r3, #72	@ 0x48
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	440b      	add	r3, r1
 800216e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d109      	bne.n	800218c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	43db      	mvns	r3, r3
 8002182:	401a      	ands	r2, r3
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800218a:	e007      	b.n	800219c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	431a      	orrs	r2, r3
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d109      	bne.n	80021b8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	401a      	ands	r2, r3
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80021b6:	e007      	b.n	80021c8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	431a      	orrs	r2, r3
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d107      	bne.n	80021e0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	431a      	orrs	r2, r3
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80021e6:	f023 0201 	bic.w	r2, r3, #1
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	e006      	b.n	8002202 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
  }
}
 8002202:	4618      	mov	r0, r3
 8002204:	371c      	adds	r7, #28
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr

0800220c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 3020 	ldrb.w	r3, [r3, #32]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b01      	cmp	r3, #1
 800221e:	d12e      	bne.n	800227e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2202      	movs	r2, #2
 8002224:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0201 	bic.w	r2, r2, #1
 8002236:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002238:	f7ff fe1a 	bl	8001e70 <HAL_GetTick>
 800223c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800223e:	e012      	b.n	8002266 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002240:	f7ff fe16 	bl	8001e70 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b0a      	cmp	r3, #10
 800224c:	d90b      	bls.n	8002266 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002252:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2205      	movs	r2, #5
 800225e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e012      	b.n	800228c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1e5      	bne.n	8002240 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800227a:	2300      	movs	r3, #0
 800227c:	e006      	b.n	800228c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002282:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
  }
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002294:	b480      	push	{r7}
 8002296:	b087      	sub	sp, #28
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
 80022a0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022a8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80022aa:	7dfb      	ldrb	r3, [r7, #23]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d003      	beq.n	80022b8 <HAL_CAN_GetRxMessage+0x24>
 80022b0:	7dfb      	ldrb	r3, [r7, #23]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	f040 8103 	bne.w	80024be <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10e      	bne.n	80022dc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d116      	bne.n	80022fa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0f7      	b.n	80024cc <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d107      	bne.n	80022fa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ee:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e0e8      	b.n	80024cc <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	331b      	adds	r3, #27
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	4413      	add	r3, r2
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0204 	and.w	r2, r3, #4
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d10c      	bne.n	8002332 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	331b      	adds	r3, #27
 8002320:	011b      	lsls	r3, r3, #4
 8002322:	4413      	add	r3, r2
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	0d5b      	lsrs	r3, r3, #21
 8002328:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	e00b      	b.n	800234a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	331b      	adds	r3, #27
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	4413      	add	r3, r2
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	08db      	lsrs	r3, r3, #3
 8002342:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	331b      	adds	r3, #27
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	4413      	add	r3, r2
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0202 	and.w	r2, r3, #2
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	331b      	adds	r3, #27
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	4413      	add	r3, r2
 800236c:	3304      	adds	r3, #4
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2208      	movs	r2, #8
 800237c:	611a      	str	r2, [r3, #16]
 800237e:	e00b      	b.n	8002398 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	331b      	adds	r3, #27
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	4413      	add	r3, r2
 800238c:	3304      	adds	r3, #4
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 020f 	and.w	r2, r3, #15
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	331b      	adds	r3, #27
 80023a0:	011b      	lsls	r3, r3, #4
 80023a2:	4413      	add	r3, r2
 80023a4:	3304      	adds	r3, #4
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	0a1b      	lsrs	r3, r3, #8
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	331b      	adds	r3, #27
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	4413      	add	r3, r2
 80023bc:	3304      	adds	r3, #4
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	0c1b      	lsrs	r3, r3, #16
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	4413      	add	r3, r2
 80023d2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	011b      	lsls	r3, r3, #4
 80023e6:	4413      	add	r3, r2
 80023e8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	0a1a      	lsrs	r2, r3, #8
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	3301      	adds	r3, #1
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	4413      	add	r3, r2
 8002402:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	0c1a      	lsrs	r2, r3, #16
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	3302      	adds	r3, #2
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	4413      	add	r3, r2
 800241c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	0e1a      	lsrs	r2, r3, #24
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	3303      	adds	r3, #3
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	4413      	add	r3, r2
 8002436:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	3304      	adds	r3, #4
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	011b      	lsls	r3, r3, #4
 800244c:	4413      	add	r3, r2
 800244e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	0a1a      	lsrs	r2, r3, #8
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	3305      	adds	r3, #5
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	011b      	lsls	r3, r3, #4
 8002466:	4413      	add	r3, r2
 8002468:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	0c1a      	lsrs	r2, r3, #16
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	3306      	adds	r3, #6
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	4413      	add	r3, r2
 8002482:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	0e1a      	lsrs	r2, r3, #24
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	3307      	adds	r3, #7
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d108      	bne.n	80024aa <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0220 	orr.w	r2, r2, #32
 80024a6:	60da      	str	r2, [r3, #12]
 80024a8:	e007      	b.n	80024ba <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	691a      	ldr	r2, [r3, #16]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f042 0220 	orr.w	r2, r2, #32
 80024b8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	e006      	b.n	80024cc <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
  }
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	371c      	adds	r7, #28
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr

080024d6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b085      	sub	sp, #20
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024e6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d002      	beq.n	80024f4 <HAL_CAN_ActivateNotification+0x1e>
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d109      	bne.n	8002508 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6959      	ldr	r1, [r3, #20]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	430a      	orrs	r2, r1
 8002502:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	e006      	b.n	8002516 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
  }
}
 8002516:	4618      	mov	r0, r3
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr

08002520 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08a      	sub	sp, #40	@ 0x28
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002528:	2300      	movs	r3, #0
 800252a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800255c:	6a3b      	ldr	r3, [r7, #32]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d07c      	beq.n	8002660 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	2b00      	cmp	r3, #0
 800256e:	d023      	beq.n	80025b8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2201      	movs	r2, #1
 8002576:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f983 	bl	800288e <HAL_CAN_TxMailbox0CompleteCallback>
 8002588:	e016      	b.n	80025b8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d004      	beq.n	800259e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002596:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800259a:	627b      	str	r3, [r7, #36]	@ 0x24
 800259c:	e00c      	b.n	80025b8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	f003 0308 	and.w	r3, r3, #8
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d004      	beq.n	80025b2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80025a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025aa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80025b0:	e002      	b.n	80025b8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f986 	bl	80028c4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d024      	beq.n	800260c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025ca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f962 	bl	80028a0 <HAL_CAN_TxMailbox1CompleteCallback>
 80025dc:	e016      	b.n	800260c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d004      	beq.n	80025f2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80025e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80025ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80025f0:	e00c      	b.n	800260c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d004      	beq.n	8002606 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80025fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002602:	627b      	str	r3, [r7, #36]	@ 0x24
 8002604:	e002      	b.n	800260c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f965 	bl	80028d6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d024      	beq.n	8002660 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800261e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f941 	bl	80028b2 <HAL_CAN_TxMailbox2CompleteCallback>
 8002630:	e016      	b.n	8002660 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d004      	beq.n	8002646 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800263c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002642:	627b      	str	r3, [r7, #36]	@ 0x24
 8002644:	e00c      	b.n	8002660 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d004      	beq.n	800265a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002652:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002656:	627b      	str	r3, [r7, #36]	@ 0x24
 8002658:	e002      	b.n	8002660 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f944 	bl	80028e8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00c      	beq.n	8002684 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f003 0310 	and.w	r3, r3, #16
 8002670:	2b00      	cmp	r3, #0
 8002672:	d007      	beq.n	8002684 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002676:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800267a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2210      	movs	r2, #16
 8002682:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	f003 0304 	and.w	r3, r3, #4
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00b      	beq.n	80026a6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	2b00      	cmp	r3, #0
 8002696:	d006      	beq.n	80026a6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2208      	movs	r2, #8
 800269e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f92a 	bl	80028fa <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d009      	beq.n	80026c4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7fe fe50 	bl	8001364 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00c      	beq.n	80026e8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	f003 0310 	and.w	r3, r3, #16
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d007      	beq.n	80026e8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80026d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026de:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2210      	movs	r2, #16
 80026e6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80026e8:	6a3b      	ldr	r3, [r7, #32]
 80026ea:	f003 0320 	and.w	r3, r3, #32
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00b      	beq.n	800270a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	f003 0308 	and.w	r3, r3, #8
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d006      	beq.n	800270a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2208      	movs	r2, #8
 8002702:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f90a 	bl	800291e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800270a:	6a3b      	ldr	r3, [r7, #32]
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	2b00      	cmp	r3, #0
 8002712:	d009      	beq.n	8002728 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f8f2 	bl	800290c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00b      	beq.n	800274a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	f003 0310 	and.w	r3, r3, #16
 8002738:	2b00      	cmp	r3, #0
 800273a:	d006      	beq.n	800274a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2210      	movs	r2, #16
 8002742:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 f8f3 	bl	8002930 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00b      	beq.n	800276c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	2b00      	cmp	r3, #0
 800275c:	d006      	beq.n	800276c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2208      	movs	r2, #8
 8002764:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f000 f8eb 	bl	8002942 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d07b      	beq.n	800286e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	d072      	beq.n	8002866 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002786:	2b00      	cmp	r3, #0
 8002788:	d008      	beq.n	800279c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800279c:	6a3b      	ldr	r3, [r7, #32]
 800279e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d008      	beq.n	80027b8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80027b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b2:	f043 0302 	orr.w	r3, r3, #2
 80027b6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d008      	beq.n	80027d4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d003      	beq.n	80027d4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80027cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ce:	f043 0304 	orr.w	r3, r3, #4
 80027d2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d043      	beq.n	8002866 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d03e      	beq.n	8002866 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027ee:	2b60      	cmp	r3, #96	@ 0x60
 80027f0:	d02b      	beq.n	800284a <HAL_CAN_IRQHandler+0x32a>
 80027f2:	2b60      	cmp	r3, #96	@ 0x60
 80027f4:	d82e      	bhi.n	8002854 <HAL_CAN_IRQHandler+0x334>
 80027f6:	2b50      	cmp	r3, #80	@ 0x50
 80027f8:	d022      	beq.n	8002840 <HAL_CAN_IRQHandler+0x320>
 80027fa:	2b50      	cmp	r3, #80	@ 0x50
 80027fc:	d82a      	bhi.n	8002854 <HAL_CAN_IRQHandler+0x334>
 80027fe:	2b40      	cmp	r3, #64	@ 0x40
 8002800:	d019      	beq.n	8002836 <HAL_CAN_IRQHandler+0x316>
 8002802:	2b40      	cmp	r3, #64	@ 0x40
 8002804:	d826      	bhi.n	8002854 <HAL_CAN_IRQHandler+0x334>
 8002806:	2b30      	cmp	r3, #48	@ 0x30
 8002808:	d010      	beq.n	800282c <HAL_CAN_IRQHandler+0x30c>
 800280a:	2b30      	cmp	r3, #48	@ 0x30
 800280c:	d822      	bhi.n	8002854 <HAL_CAN_IRQHandler+0x334>
 800280e:	2b10      	cmp	r3, #16
 8002810:	d002      	beq.n	8002818 <HAL_CAN_IRQHandler+0x2f8>
 8002812:	2b20      	cmp	r3, #32
 8002814:	d005      	beq.n	8002822 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002816:	e01d      	b.n	8002854 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281a:	f043 0308 	orr.w	r3, r3, #8
 800281e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002820:	e019      	b.n	8002856 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002824:	f043 0310 	orr.w	r3, r3, #16
 8002828:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800282a:	e014      	b.n	8002856 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800282c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282e:	f043 0320 	orr.w	r3, r3, #32
 8002832:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002834:	e00f      	b.n	8002856 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002838:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800283c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800283e:	e00a      	b.n	8002856 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002842:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002846:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002848:	e005      	b.n	8002856 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800284a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002850:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002852:	e000      	b.n	8002856 <HAL_CAN_IRQHandler+0x336>
            break;
 8002854:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	699a      	ldr	r2, [r3, #24]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002864:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2204      	movs	r2, #4
 800286c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800286e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002870:	2b00      	cmp	r3, #0
 8002872:	d008      	beq.n	8002886 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 f867 	bl	8002954 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002886:	bf00      	nop
 8002888:	3728      	adds	r7, #40	@ 0x28
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr

080028a0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr

080028b2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr

080028d6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr

080028e8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc80      	pop	{r7}
 80028f8:	4770      	bx	lr

080028fa <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr

0800291e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	bc80      	pop	{r7}
 8002940:	4770      	bx	lr

08002942 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr

08002954 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr
	...

08002968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002978:	4b0c      	ldr	r3, [pc, #48]	@ (80029ac <__NVIC_SetPriorityGrouping+0x44>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002984:	4013      	ands	r3, r2
 8002986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002990:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002994:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800299a:	4a04      	ldr	r2, [pc, #16]	@ (80029ac <__NVIC_SetPriorityGrouping+0x44>)
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	60d3      	str	r3, [r2, #12]
}
 80029a0:	bf00      	nop
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	e000ed00 	.word	0xe000ed00

080029b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029b4:	4b04      	ldr	r3, [pc, #16]	@ (80029c8 <__NVIC_GetPriorityGrouping+0x18>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	0a1b      	lsrs	r3, r3, #8
 80029ba:	f003 0307 	and.w	r3, r3, #7
}
 80029be:	4618      	mov	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	db0b      	blt.n	80029f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	f003 021f 	and.w	r2, r3, #31
 80029e4:	4906      	ldr	r1, [pc, #24]	@ (8002a00 <__NVIC_EnableIRQ+0x34>)
 80029e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ea:	095b      	lsrs	r3, r3, #5
 80029ec:	2001      	movs	r0, #1
 80029ee:	fa00 f202 	lsl.w	r2, r0, r2
 80029f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr
 8002a00:	e000e100 	.word	0xe000e100

08002a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	6039      	str	r1, [r7, #0]
 8002a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	db0a      	blt.n	8002a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	490c      	ldr	r1, [pc, #48]	@ (8002a50 <__NVIC_SetPriority+0x4c>)
 8002a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a22:	0112      	lsls	r2, r2, #4
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	440b      	add	r3, r1
 8002a28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a2c:	e00a      	b.n	8002a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	4908      	ldr	r1, [pc, #32]	@ (8002a54 <__NVIC_SetPriority+0x50>)
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	3b04      	subs	r3, #4
 8002a3c:	0112      	lsls	r2, r2, #4
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	440b      	add	r3, r1
 8002a42:	761a      	strb	r2, [r3, #24]
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	e000e100 	.word	0xe000e100
 8002a54:	e000ed00 	.word	0xe000ed00

08002a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b089      	sub	sp, #36	@ 0x24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f1c3 0307 	rsb	r3, r3, #7
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	bf28      	it	cs
 8002a76:	2304      	movcs	r3, #4
 8002a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	2b06      	cmp	r3, #6
 8002a80:	d902      	bls.n	8002a88 <NVIC_EncodePriority+0x30>
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	3b03      	subs	r3, #3
 8002a86:	e000      	b.n	8002a8a <NVIC_EncodePriority+0x32>
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	43da      	mvns	r2, r3
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	401a      	ands	r2, r3
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aaa:	43d9      	mvns	r1, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab0:	4313      	orrs	r3, r2
         );
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3724      	adds	r7, #36	@ 0x24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr

08002abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002acc:	d301      	bcc.n	8002ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e00f      	b.n	8002af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8002afc <SysTick_Config+0x40>)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ada:	210f      	movs	r1, #15
 8002adc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae0:	f7ff ff90 	bl	8002a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ae4:	4b05      	ldr	r3, [pc, #20]	@ (8002afc <SysTick_Config+0x40>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aea:	4b04      	ldr	r3, [pc, #16]	@ (8002afc <SysTick_Config+0x40>)
 8002aec:	2207      	movs	r2, #7
 8002aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	e000e010 	.word	0xe000e010

08002b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7ff ff2d 	bl	8002968 <__NVIC_SetPriorityGrouping>
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b086      	sub	sp, #24
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	60b9      	str	r1, [r7, #8]
 8002b20:	607a      	str	r2, [r7, #4]
 8002b22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b28:	f7ff ff42 	bl	80029b0 <__NVIC_GetPriorityGrouping>
 8002b2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	68b9      	ldr	r1, [r7, #8]
 8002b32:	6978      	ldr	r0, [r7, #20]
 8002b34:	f7ff ff90 	bl	8002a58 <NVIC_EncodePriority>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b3e:	4611      	mov	r1, r2
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff ff5f 	bl	8002a04 <__NVIC_SetPriority>
}
 8002b46:	bf00      	nop
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	4603      	mov	r3, r0
 8002b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff ff35 	bl	80029cc <__NVIC_EnableIRQ>
}
 8002b62:	bf00      	nop
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b082      	sub	sp, #8
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7ff ffa2 	bl	8002abc <SysTick_Config>
 8002b78:	4603      	mov	r3, r0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b08b      	sub	sp, #44	@ 0x2c
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b92:	2300      	movs	r3, #0
 8002b94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b96:	e169      	b.n	8002e6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b98:	2201      	movs	r2, #1
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	69fa      	ldr	r2, [r7, #28]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	f040 8158 	bne.w	8002e66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	4a9a      	ldr	r2, [pc, #616]	@ (8002e24 <HAL_GPIO_Init+0x2a0>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d05e      	beq.n	8002c7e <HAL_GPIO_Init+0xfa>
 8002bc0:	4a98      	ldr	r2, [pc, #608]	@ (8002e24 <HAL_GPIO_Init+0x2a0>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d875      	bhi.n	8002cb2 <HAL_GPIO_Init+0x12e>
 8002bc6:	4a98      	ldr	r2, [pc, #608]	@ (8002e28 <HAL_GPIO_Init+0x2a4>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d058      	beq.n	8002c7e <HAL_GPIO_Init+0xfa>
 8002bcc:	4a96      	ldr	r2, [pc, #600]	@ (8002e28 <HAL_GPIO_Init+0x2a4>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d86f      	bhi.n	8002cb2 <HAL_GPIO_Init+0x12e>
 8002bd2:	4a96      	ldr	r2, [pc, #600]	@ (8002e2c <HAL_GPIO_Init+0x2a8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d052      	beq.n	8002c7e <HAL_GPIO_Init+0xfa>
 8002bd8:	4a94      	ldr	r2, [pc, #592]	@ (8002e2c <HAL_GPIO_Init+0x2a8>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d869      	bhi.n	8002cb2 <HAL_GPIO_Init+0x12e>
 8002bde:	4a94      	ldr	r2, [pc, #592]	@ (8002e30 <HAL_GPIO_Init+0x2ac>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d04c      	beq.n	8002c7e <HAL_GPIO_Init+0xfa>
 8002be4:	4a92      	ldr	r2, [pc, #584]	@ (8002e30 <HAL_GPIO_Init+0x2ac>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d863      	bhi.n	8002cb2 <HAL_GPIO_Init+0x12e>
 8002bea:	4a92      	ldr	r2, [pc, #584]	@ (8002e34 <HAL_GPIO_Init+0x2b0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d046      	beq.n	8002c7e <HAL_GPIO_Init+0xfa>
 8002bf0:	4a90      	ldr	r2, [pc, #576]	@ (8002e34 <HAL_GPIO_Init+0x2b0>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d85d      	bhi.n	8002cb2 <HAL_GPIO_Init+0x12e>
 8002bf6:	2b12      	cmp	r3, #18
 8002bf8:	d82a      	bhi.n	8002c50 <HAL_GPIO_Init+0xcc>
 8002bfa:	2b12      	cmp	r3, #18
 8002bfc:	d859      	bhi.n	8002cb2 <HAL_GPIO_Init+0x12e>
 8002bfe:	a201      	add	r2, pc, #4	@ (adr r2, 8002c04 <HAL_GPIO_Init+0x80>)
 8002c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c04:	08002c7f 	.word	0x08002c7f
 8002c08:	08002c59 	.word	0x08002c59
 8002c0c:	08002c6b 	.word	0x08002c6b
 8002c10:	08002cad 	.word	0x08002cad
 8002c14:	08002cb3 	.word	0x08002cb3
 8002c18:	08002cb3 	.word	0x08002cb3
 8002c1c:	08002cb3 	.word	0x08002cb3
 8002c20:	08002cb3 	.word	0x08002cb3
 8002c24:	08002cb3 	.word	0x08002cb3
 8002c28:	08002cb3 	.word	0x08002cb3
 8002c2c:	08002cb3 	.word	0x08002cb3
 8002c30:	08002cb3 	.word	0x08002cb3
 8002c34:	08002cb3 	.word	0x08002cb3
 8002c38:	08002cb3 	.word	0x08002cb3
 8002c3c:	08002cb3 	.word	0x08002cb3
 8002c40:	08002cb3 	.word	0x08002cb3
 8002c44:	08002cb3 	.word	0x08002cb3
 8002c48:	08002c61 	.word	0x08002c61
 8002c4c:	08002c75 	.word	0x08002c75
 8002c50:	4a79      	ldr	r2, [pc, #484]	@ (8002e38 <HAL_GPIO_Init+0x2b4>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d013      	beq.n	8002c7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c56:	e02c      	b.n	8002cb2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	623b      	str	r3, [r7, #32]
          break;
 8002c5e:	e029      	b.n	8002cb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	3304      	adds	r3, #4
 8002c66:	623b      	str	r3, [r7, #32]
          break;
 8002c68:	e024      	b.n	8002cb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	3308      	adds	r3, #8
 8002c70:	623b      	str	r3, [r7, #32]
          break;
 8002c72:	e01f      	b.n	8002cb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	330c      	adds	r3, #12
 8002c7a:	623b      	str	r3, [r7, #32]
          break;
 8002c7c:	e01a      	b.n	8002cb4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d102      	bne.n	8002c8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c86:	2304      	movs	r3, #4
 8002c88:	623b      	str	r3, [r7, #32]
          break;
 8002c8a:	e013      	b.n	8002cb4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d105      	bne.n	8002ca0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c94:	2308      	movs	r3, #8
 8002c96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69fa      	ldr	r2, [r7, #28]
 8002c9c:	611a      	str	r2, [r3, #16]
          break;
 8002c9e:	e009      	b.n	8002cb4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ca0:	2308      	movs	r3, #8
 8002ca2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	69fa      	ldr	r2, [r7, #28]
 8002ca8:	615a      	str	r2, [r3, #20]
          break;
 8002caa:	e003      	b.n	8002cb4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002cac:	2300      	movs	r3, #0
 8002cae:	623b      	str	r3, [r7, #32]
          break;
 8002cb0:	e000      	b.n	8002cb4 <HAL_GPIO_Init+0x130>
          break;
 8002cb2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	2bff      	cmp	r3, #255	@ 0xff
 8002cb8:	d801      	bhi.n	8002cbe <HAL_GPIO_Init+0x13a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	e001      	b.n	8002cc2 <HAL_GPIO_Init+0x13e>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	2bff      	cmp	r3, #255	@ 0xff
 8002cc8:	d802      	bhi.n	8002cd0 <HAL_GPIO_Init+0x14c>
 8002cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	e002      	b.n	8002cd6 <HAL_GPIO_Init+0x152>
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd2:	3b08      	subs	r3, #8
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	210f      	movs	r1, #15
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	401a      	ands	r2, r3
 8002ce8:	6a39      	ldr	r1, [r7, #32]
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 80b1 	beq.w	8002e66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d04:	4b4d      	ldr	r3, [pc, #308]	@ (8002e3c <HAL_GPIO_Init+0x2b8>)
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	4a4c      	ldr	r2, [pc, #304]	@ (8002e3c <HAL_GPIO_Init+0x2b8>)
 8002d0a:	f043 0301 	orr.w	r3, r3, #1
 8002d0e:	6193      	str	r3, [r2, #24]
 8002d10:	4b4a      	ldr	r3, [pc, #296]	@ (8002e3c <HAL_GPIO_Init+0x2b8>)
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d1c:	4a48      	ldr	r2, [pc, #288]	@ (8002e40 <HAL_GPIO_Init+0x2bc>)
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d20:	089b      	lsrs	r3, r3, #2
 8002d22:	3302      	adds	r3, #2
 8002d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2c:	f003 0303 	and.w	r3, r3, #3
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	220f      	movs	r2, #15
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a40      	ldr	r2, [pc, #256]	@ (8002e44 <HAL_GPIO_Init+0x2c0>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d013      	beq.n	8002d70 <HAL_GPIO_Init+0x1ec>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a3f      	ldr	r2, [pc, #252]	@ (8002e48 <HAL_GPIO_Init+0x2c4>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d00d      	beq.n	8002d6c <HAL_GPIO_Init+0x1e8>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a3e      	ldr	r2, [pc, #248]	@ (8002e4c <HAL_GPIO_Init+0x2c8>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d007      	beq.n	8002d68 <HAL_GPIO_Init+0x1e4>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a3d      	ldr	r2, [pc, #244]	@ (8002e50 <HAL_GPIO_Init+0x2cc>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d101      	bne.n	8002d64 <HAL_GPIO_Init+0x1e0>
 8002d60:	2303      	movs	r3, #3
 8002d62:	e006      	b.n	8002d72 <HAL_GPIO_Init+0x1ee>
 8002d64:	2304      	movs	r3, #4
 8002d66:	e004      	b.n	8002d72 <HAL_GPIO_Init+0x1ee>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	e002      	b.n	8002d72 <HAL_GPIO_Init+0x1ee>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <HAL_GPIO_Init+0x1ee>
 8002d70:	2300      	movs	r3, #0
 8002d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d74:	f002 0203 	and.w	r2, r2, #3
 8002d78:	0092      	lsls	r2, r2, #2
 8002d7a:	4093      	lsls	r3, r2
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d82:	492f      	ldr	r1, [pc, #188]	@ (8002e40 <HAL_GPIO_Init+0x2bc>)
 8002d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d86:	089b      	lsrs	r3, r3, #2
 8002d88:	3302      	adds	r3, #2
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d006      	beq.n	8002daa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d9c:	4b2d      	ldr	r3, [pc, #180]	@ (8002e54 <HAL_GPIO_Init+0x2d0>)
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	492c      	ldr	r1, [pc, #176]	@ (8002e54 <HAL_GPIO_Init+0x2d0>)
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	608b      	str	r3, [r1, #8]
 8002da8:	e006      	b.n	8002db8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002daa:	4b2a      	ldr	r3, [pc, #168]	@ (8002e54 <HAL_GPIO_Init+0x2d0>)
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	43db      	mvns	r3, r3
 8002db2:	4928      	ldr	r1, [pc, #160]	@ (8002e54 <HAL_GPIO_Init+0x2d0>)
 8002db4:	4013      	ands	r3, r2
 8002db6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d006      	beq.n	8002dd2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002dc4:	4b23      	ldr	r3, [pc, #140]	@ (8002e54 <HAL_GPIO_Init+0x2d0>)
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	4922      	ldr	r1, [pc, #136]	@ (8002e54 <HAL_GPIO_Init+0x2d0>)
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	60cb      	str	r3, [r1, #12]
 8002dd0:	e006      	b.n	8002de0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002dd2:	4b20      	ldr	r3, [pc, #128]	@ (8002e54 <HAL_GPIO_Init+0x2d0>)
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	491e      	ldr	r1, [pc, #120]	@ (8002e54 <HAL_GPIO_Init+0x2d0>)
 8002ddc:	4013      	ands	r3, r2
 8002dde:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d006      	beq.n	8002dfa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002dec:	4b19      	ldr	r3, [pc, #100]	@ (8002e54 <HAL_GPIO_Init+0x2d0>)
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	4918      	ldr	r1, [pc, #96]	@ (8002e54 <HAL_GPIO_Init+0x2d0>)
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	604b      	str	r3, [r1, #4]
 8002df8:	e006      	b.n	8002e08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002dfa:	4b16      	ldr	r3, [pc, #88]	@ (8002e54 <HAL_GPIO_Init+0x2d0>)
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	43db      	mvns	r3, r3
 8002e02:	4914      	ldr	r1, [pc, #80]	@ (8002e54 <HAL_GPIO_Init+0x2d0>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d021      	beq.n	8002e58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e14:	4b0f      	ldr	r3, [pc, #60]	@ (8002e54 <HAL_GPIO_Init+0x2d0>)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	490e      	ldr	r1, [pc, #56]	@ (8002e54 <HAL_GPIO_Init+0x2d0>)
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	600b      	str	r3, [r1, #0]
 8002e20:	e021      	b.n	8002e66 <HAL_GPIO_Init+0x2e2>
 8002e22:	bf00      	nop
 8002e24:	10320000 	.word	0x10320000
 8002e28:	10310000 	.word	0x10310000
 8002e2c:	10220000 	.word	0x10220000
 8002e30:	10210000 	.word	0x10210000
 8002e34:	10120000 	.word	0x10120000
 8002e38:	10110000 	.word	0x10110000
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	40010000 	.word	0x40010000
 8002e44:	40010800 	.word	0x40010800
 8002e48:	40010c00 	.word	0x40010c00
 8002e4c:	40011000 	.word	0x40011000
 8002e50:	40011400 	.word	0x40011400
 8002e54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e58:	4b0b      	ldr	r3, [pc, #44]	@ (8002e88 <HAL_GPIO_Init+0x304>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	4909      	ldr	r1, [pc, #36]	@ (8002e88 <HAL_GPIO_Init+0x304>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e68:	3301      	adds	r3, #1
 8002e6a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e72:	fa22 f303 	lsr.w	r3, r2, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f47f ae8e 	bne.w	8002b98 <HAL_GPIO_Init+0x14>
  }
}
 8002e7c:	bf00      	nop
 8002e7e:	bf00      	nop
 8002e80:	372c      	adds	r7, #44	@ 0x2c
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bc80      	pop	{r7}
 8002e86:	4770      	bx	lr
 8002e88:	40010400 	.word	0x40010400

08002e8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	460b      	mov	r3, r1
 8002e96:	807b      	strh	r3, [r7, #2]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e9c:	787b      	ldrb	r3, [r7, #1]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ea2:	887a      	ldrh	r2, [r7, #2]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002ea8:	e003      	b.n	8002eb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002eaa:	887b      	ldrh	r3, [r7, #2]
 8002eac:	041a      	lsls	r2, r3, #16
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	611a      	str	r2, [r3, #16]
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ec6:	4b08      	ldr	r3, [pc, #32]	@ (8002ee8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ec8:	695a      	ldr	r2, [r3, #20]
 8002eca:	88fb      	ldrh	r3, [r7, #6]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d006      	beq.n	8002ee0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ed2:	4a05      	ldr	r2, [pc, #20]	@ (8002ee8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ed4:	88fb      	ldrh	r3, [r7, #6]
 8002ed6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ed8:	88fb      	ldrh	r3, [r7, #6]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 f806 	bl	8002eec <HAL_GPIO_EXTI_Callback>
  }
}
 8002ee0:	bf00      	nop
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40010400 	.word	0x40010400

08002eec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr

08002f00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e272      	b.n	80033f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 8087 	beq.w	800302e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f20:	4b92      	ldr	r3, [pc, #584]	@ (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 030c 	and.w	r3, r3, #12
 8002f28:	2b04      	cmp	r3, #4
 8002f2a:	d00c      	beq.n	8002f46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f2c:	4b8f      	ldr	r3, [pc, #572]	@ (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 030c 	and.w	r3, r3, #12
 8002f34:	2b08      	cmp	r3, #8
 8002f36:	d112      	bne.n	8002f5e <HAL_RCC_OscConfig+0x5e>
 8002f38:	4b8c      	ldr	r3, [pc, #560]	@ (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f44:	d10b      	bne.n	8002f5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f46:	4b89      	ldr	r3, [pc, #548]	@ (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d06c      	beq.n	800302c <HAL_RCC_OscConfig+0x12c>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d168      	bne.n	800302c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e24c      	b.n	80033f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f66:	d106      	bne.n	8002f76 <HAL_RCC_OscConfig+0x76>
 8002f68:	4b80      	ldr	r3, [pc, #512]	@ (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a7f      	ldr	r2, [pc, #508]	@ (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f72:	6013      	str	r3, [r2, #0]
 8002f74:	e02e      	b.n	8002fd4 <HAL_RCC_OscConfig+0xd4>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d10c      	bne.n	8002f98 <HAL_RCC_OscConfig+0x98>
 8002f7e:	4b7b      	ldr	r3, [pc, #492]	@ (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a7a      	ldr	r2, [pc, #488]	@ (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	4b78      	ldr	r3, [pc, #480]	@ (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a77      	ldr	r2, [pc, #476]	@ (800316c <HAL_RCC_OscConfig+0x26c>)
 8002f90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f94:	6013      	str	r3, [r2, #0]
 8002f96:	e01d      	b.n	8002fd4 <HAL_RCC_OscConfig+0xd4>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCC_OscConfig+0xbc>
 8002fa2:	4b72      	ldr	r3, [pc, #456]	@ (800316c <HAL_RCC_OscConfig+0x26c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a71      	ldr	r2, [pc, #452]	@ (800316c <HAL_RCC_OscConfig+0x26c>)
 8002fa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	4b6f      	ldr	r3, [pc, #444]	@ (800316c <HAL_RCC_OscConfig+0x26c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a6e      	ldr	r2, [pc, #440]	@ (800316c <HAL_RCC_OscConfig+0x26c>)
 8002fb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fb8:	6013      	str	r3, [r2, #0]
 8002fba:	e00b      	b.n	8002fd4 <HAL_RCC_OscConfig+0xd4>
 8002fbc:	4b6b      	ldr	r3, [pc, #428]	@ (800316c <HAL_RCC_OscConfig+0x26c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a6a      	ldr	r2, [pc, #424]	@ (800316c <HAL_RCC_OscConfig+0x26c>)
 8002fc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fc6:	6013      	str	r3, [r2, #0]
 8002fc8:	4b68      	ldr	r3, [pc, #416]	@ (800316c <HAL_RCC_OscConfig+0x26c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a67      	ldr	r2, [pc, #412]	@ (800316c <HAL_RCC_OscConfig+0x26c>)
 8002fce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d013      	beq.n	8003004 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fdc:	f7fe ff48 	bl	8001e70 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe4:	f7fe ff44 	bl	8001e70 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b64      	cmp	r3, #100	@ 0x64
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e200      	b.n	80033f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff6:	4b5d      	ldr	r3, [pc, #372]	@ (800316c <HAL_RCC_OscConfig+0x26c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0xe4>
 8003002:	e014      	b.n	800302e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003004:	f7fe ff34 	bl	8001e70 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800300c:	f7fe ff30 	bl	8001e70 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b64      	cmp	r3, #100	@ 0x64
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e1ec      	b.n	80033f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301e:	4b53      	ldr	r3, [pc, #332]	@ (800316c <HAL_RCC_OscConfig+0x26c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0x10c>
 800302a:	e000      	b.n	800302e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800302c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d063      	beq.n	8003102 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800303a:	4b4c      	ldr	r3, [pc, #304]	@ (800316c <HAL_RCC_OscConfig+0x26c>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f003 030c 	and.w	r3, r3, #12
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00b      	beq.n	800305e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003046:	4b49      	ldr	r3, [pc, #292]	@ (800316c <HAL_RCC_OscConfig+0x26c>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f003 030c 	and.w	r3, r3, #12
 800304e:	2b08      	cmp	r3, #8
 8003050:	d11c      	bne.n	800308c <HAL_RCC_OscConfig+0x18c>
 8003052:	4b46      	ldr	r3, [pc, #280]	@ (800316c <HAL_RCC_OscConfig+0x26c>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d116      	bne.n	800308c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800305e:	4b43      	ldr	r3, [pc, #268]	@ (800316c <HAL_RCC_OscConfig+0x26c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	2b00      	cmp	r3, #0
 8003068:	d005      	beq.n	8003076 <HAL_RCC_OscConfig+0x176>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d001      	beq.n	8003076 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e1c0      	b.n	80033f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003076:	4b3d      	ldr	r3, [pc, #244]	@ (800316c <HAL_RCC_OscConfig+0x26c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4939      	ldr	r1, [pc, #228]	@ (800316c <HAL_RCC_OscConfig+0x26c>)
 8003086:	4313      	orrs	r3, r2
 8003088:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308a:	e03a      	b.n	8003102 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d020      	beq.n	80030d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003094:	4b36      	ldr	r3, [pc, #216]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 8003096:	2201      	movs	r2, #1
 8003098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309a:	f7fe fee9 	bl	8001e70 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a2:	f7fe fee5 	bl	8001e70 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e1a1      	b.n	80033f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b4:	4b2d      	ldr	r3, [pc, #180]	@ (800316c <HAL_RCC_OscConfig+0x26c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0f0      	beq.n	80030a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c0:	4b2a      	ldr	r3, [pc, #168]	@ (800316c <HAL_RCC_OscConfig+0x26c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	4927      	ldr	r1, [pc, #156]	@ (800316c <HAL_RCC_OscConfig+0x26c>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	600b      	str	r3, [r1, #0]
 80030d4:	e015      	b.n	8003102 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030d6:	4b26      	ldr	r3, [pc, #152]	@ (8003170 <HAL_RCC_OscConfig+0x270>)
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030dc:	f7fe fec8 	bl	8001e70 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e4:	f7fe fec4 	bl	8001e70 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e180      	b.n	80033f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f6:	4b1d      	ldr	r3, [pc, #116]	@ (800316c <HAL_RCC_OscConfig+0x26c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f0      	bne.n	80030e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d03a      	beq.n	8003184 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d019      	beq.n	800314a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003116:	4b17      	ldr	r3, [pc, #92]	@ (8003174 <HAL_RCC_OscConfig+0x274>)
 8003118:	2201      	movs	r2, #1
 800311a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800311c:	f7fe fea8 	bl	8001e70 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003124:	f7fe fea4 	bl	8001e70 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e160      	b.n	80033f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003136:	4b0d      	ldr	r3, [pc, #52]	@ (800316c <HAL_RCC_OscConfig+0x26c>)
 8003138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0f0      	beq.n	8003124 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003142:	2001      	movs	r0, #1
 8003144:	f000 face 	bl	80036e4 <RCC_Delay>
 8003148:	e01c      	b.n	8003184 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800314a:	4b0a      	ldr	r3, [pc, #40]	@ (8003174 <HAL_RCC_OscConfig+0x274>)
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003150:	f7fe fe8e 	bl	8001e70 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003156:	e00f      	b.n	8003178 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003158:	f7fe fe8a 	bl	8001e70 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d908      	bls.n	8003178 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e146      	b.n	80033f8 <HAL_RCC_OscConfig+0x4f8>
 800316a:	bf00      	nop
 800316c:	40021000 	.word	0x40021000
 8003170:	42420000 	.word	0x42420000
 8003174:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003178:	4b92      	ldr	r3, [pc, #584]	@ (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 800317a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1e9      	bne.n	8003158 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 80a6 	beq.w	80032de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003192:	2300      	movs	r3, #0
 8003194:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003196:	4b8b      	ldr	r3, [pc, #556]	@ (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10d      	bne.n	80031be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a2:	4b88      	ldr	r3, [pc, #544]	@ (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	4a87      	ldr	r2, [pc, #540]	@ (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 80031a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031ac:	61d3      	str	r3, [r2, #28]
 80031ae:	4b85      	ldr	r3, [pc, #532]	@ (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031b6:	60bb      	str	r3, [r7, #8]
 80031b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ba:	2301      	movs	r3, #1
 80031bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031be:	4b82      	ldr	r3, [pc, #520]	@ (80033c8 <HAL_RCC_OscConfig+0x4c8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d118      	bne.n	80031fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ca:	4b7f      	ldr	r3, [pc, #508]	@ (80033c8 <HAL_RCC_OscConfig+0x4c8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a7e      	ldr	r2, [pc, #504]	@ (80033c8 <HAL_RCC_OscConfig+0x4c8>)
 80031d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d6:	f7fe fe4b 	bl	8001e70 <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031de:	f7fe fe47 	bl	8001e70 <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b64      	cmp	r3, #100	@ 0x64
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e103      	b.n	80033f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f0:	4b75      	ldr	r3, [pc, #468]	@ (80033c8 <HAL_RCC_OscConfig+0x4c8>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f0      	beq.n	80031de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d106      	bne.n	8003212 <HAL_RCC_OscConfig+0x312>
 8003204:	4b6f      	ldr	r3, [pc, #444]	@ (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	4a6e      	ldr	r2, [pc, #440]	@ (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	6213      	str	r3, [r2, #32]
 8003210:	e02d      	b.n	800326e <HAL_RCC_OscConfig+0x36e>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10c      	bne.n	8003234 <HAL_RCC_OscConfig+0x334>
 800321a:	4b6a      	ldr	r3, [pc, #424]	@ (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	4a69      	ldr	r2, [pc, #420]	@ (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 8003220:	f023 0301 	bic.w	r3, r3, #1
 8003224:	6213      	str	r3, [r2, #32]
 8003226:	4b67      	ldr	r3, [pc, #412]	@ (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	4a66      	ldr	r2, [pc, #408]	@ (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 800322c:	f023 0304 	bic.w	r3, r3, #4
 8003230:	6213      	str	r3, [r2, #32]
 8003232:	e01c      	b.n	800326e <HAL_RCC_OscConfig+0x36e>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	2b05      	cmp	r3, #5
 800323a:	d10c      	bne.n	8003256 <HAL_RCC_OscConfig+0x356>
 800323c:	4b61      	ldr	r3, [pc, #388]	@ (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	4a60      	ldr	r2, [pc, #384]	@ (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 8003242:	f043 0304 	orr.w	r3, r3, #4
 8003246:	6213      	str	r3, [r2, #32]
 8003248:	4b5e      	ldr	r3, [pc, #376]	@ (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	4a5d      	ldr	r2, [pc, #372]	@ (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 800324e:	f043 0301 	orr.w	r3, r3, #1
 8003252:	6213      	str	r3, [r2, #32]
 8003254:	e00b      	b.n	800326e <HAL_RCC_OscConfig+0x36e>
 8003256:	4b5b      	ldr	r3, [pc, #364]	@ (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	4a5a      	ldr	r2, [pc, #360]	@ (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 800325c:	f023 0301 	bic.w	r3, r3, #1
 8003260:	6213      	str	r3, [r2, #32]
 8003262:	4b58      	ldr	r3, [pc, #352]	@ (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	4a57      	ldr	r2, [pc, #348]	@ (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 8003268:	f023 0304 	bic.w	r3, r3, #4
 800326c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d015      	beq.n	80032a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003276:	f7fe fdfb 	bl	8001e70 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800327c:	e00a      	b.n	8003294 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327e:	f7fe fdf7 	bl	8001e70 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	f241 3288 	movw	r2, #5000	@ 0x1388
 800328c:	4293      	cmp	r3, r2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e0b1      	b.n	80033f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003294:	4b4b      	ldr	r3, [pc, #300]	@ (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0ee      	beq.n	800327e <HAL_RCC_OscConfig+0x37e>
 80032a0:	e014      	b.n	80032cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a2:	f7fe fde5 	bl	8001e70 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a8:	e00a      	b.n	80032c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032aa:	f7fe fde1 	bl	8001e70 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e09b      	b.n	80033f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c0:	4b40      	ldr	r3, [pc, #256]	@ (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1ee      	bne.n	80032aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032cc:	7dfb      	ldrb	r3, [r7, #23]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d105      	bne.n	80032de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d2:	4b3c      	ldr	r3, [pc, #240]	@ (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	4a3b      	ldr	r2, [pc, #236]	@ (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 80032d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 8087 	beq.w	80033f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032e8:	4b36      	ldr	r3, [pc, #216]	@ (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 030c 	and.w	r3, r3, #12
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d061      	beq.n	80033b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	69db      	ldr	r3, [r3, #28]
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d146      	bne.n	800338a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032fc:	4b33      	ldr	r3, [pc, #204]	@ (80033cc <HAL_RCC_OscConfig+0x4cc>)
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003302:	f7fe fdb5 	bl	8001e70 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800330a:	f7fe fdb1 	bl	8001e70 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e06d      	b.n	80033f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800331c:	4b29      	ldr	r3, [pc, #164]	@ (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1f0      	bne.n	800330a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003330:	d108      	bne.n	8003344 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003332:	4b24      	ldr	r3, [pc, #144]	@ (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	4921      	ldr	r1, [pc, #132]	@ (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 8003340:	4313      	orrs	r3, r2
 8003342:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003344:	4b1f      	ldr	r3, [pc, #124]	@ (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a19      	ldr	r1, [r3, #32]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003354:	430b      	orrs	r3, r1
 8003356:	491b      	ldr	r1, [pc, #108]	@ (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 8003358:	4313      	orrs	r3, r2
 800335a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800335c:	4b1b      	ldr	r3, [pc, #108]	@ (80033cc <HAL_RCC_OscConfig+0x4cc>)
 800335e:	2201      	movs	r2, #1
 8003360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003362:	f7fe fd85 	bl	8001e70 <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336a:	f7fe fd81 	bl	8001e70 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e03d      	b.n	80033f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800337c:	4b11      	ldr	r3, [pc, #68]	@ (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0f0      	beq.n	800336a <HAL_RCC_OscConfig+0x46a>
 8003388:	e035      	b.n	80033f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338a:	4b10      	ldr	r3, [pc, #64]	@ (80033cc <HAL_RCC_OscConfig+0x4cc>)
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003390:	f7fe fd6e 	bl	8001e70 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003398:	f7fe fd6a 	bl	8001e70 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e026      	b.n	80033f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033aa:	4b06      	ldr	r3, [pc, #24]	@ (80033c4 <HAL_RCC_OscConfig+0x4c4>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f0      	bne.n	8003398 <HAL_RCC_OscConfig+0x498>
 80033b6:	e01e      	b.n	80033f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d107      	bne.n	80033d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e019      	b.n	80033f8 <HAL_RCC_OscConfig+0x4f8>
 80033c4:	40021000 	.word	0x40021000
 80033c8:	40007000 	.word	0x40007000
 80033cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003400 <HAL_RCC_OscConfig+0x500>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a1b      	ldr	r3, [r3, #32]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d106      	bne.n	80033f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d001      	beq.n	80033f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e000      	b.n	80033f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3718      	adds	r7, #24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40021000 	.word	0x40021000

08003404 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e0d0      	b.n	80035ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003418:	4b6a      	ldr	r3, [pc, #424]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c0>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	429a      	cmp	r2, r3
 8003424:	d910      	bls.n	8003448 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003426:	4b67      	ldr	r3, [pc, #412]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f023 0207 	bic.w	r2, r3, #7
 800342e:	4965      	ldr	r1, [pc, #404]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	4313      	orrs	r3, r2
 8003434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003436:	4b63      	ldr	r3, [pc, #396]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	429a      	cmp	r2, r3
 8003442:	d001      	beq.n	8003448 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e0b8      	b.n	80035ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d020      	beq.n	8003496 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	d005      	beq.n	800346c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003460:	4b59      	ldr	r3, [pc, #356]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	4a58      	ldr	r2, [pc, #352]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003466:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800346a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0308 	and.w	r3, r3, #8
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003478:	4b53      	ldr	r3, [pc, #332]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	4a52      	ldr	r2, [pc, #328]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 800347e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003482:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003484:	4b50      	ldr	r3, [pc, #320]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	494d      	ldr	r1, [pc, #308]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003492:	4313      	orrs	r3, r2
 8003494:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d040      	beq.n	8003524 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d107      	bne.n	80034ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034aa:	4b47      	ldr	r3, [pc, #284]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d115      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e07f      	b.n	80035ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d107      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c2:	4b41      	ldr	r3, [pc, #260]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d109      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e073      	b.n	80035ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d2:	4b3d      	ldr	r3, [pc, #244]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e06b      	b.n	80035ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034e2:	4b39      	ldr	r3, [pc, #228]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f023 0203 	bic.w	r2, r3, #3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	4936      	ldr	r1, [pc, #216]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034f4:	f7fe fcbc 	bl	8001e70 <HAL_GetTick>
 80034f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fa:	e00a      	b.n	8003512 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034fc:	f7fe fcb8 	bl	8001e70 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	f241 3288 	movw	r2, #5000	@ 0x1388
 800350a:	4293      	cmp	r3, r2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e053      	b.n	80035ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003512:	4b2d      	ldr	r3, [pc, #180]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f003 020c 	and.w	r2, r3, #12
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	429a      	cmp	r2, r3
 8003522:	d1eb      	bne.n	80034fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003524:	4b27      	ldr	r3, [pc, #156]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d210      	bcs.n	8003554 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003532:	4b24      	ldr	r3, [pc, #144]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f023 0207 	bic.w	r2, r3, #7
 800353a:	4922      	ldr	r1, [pc, #136]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c0>)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	4313      	orrs	r3, r2
 8003540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003542:	4b20      	ldr	r3, [pc, #128]	@ (80035c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0307 	and.w	r3, r3, #7
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d001      	beq.n	8003554 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e032      	b.n	80035ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	d008      	beq.n	8003572 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003560:	4b19      	ldr	r3, [pc, #100]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	4916      	ldr	r1, [pc, #88]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 800356e:	4313      	orrs	r3, r2
 8003570:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	2b00      	cmp	r3, #0
 800357c:	d009      	beq.n	8003592 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800357e:	4b12      	ldr	r3, [pc, #72]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	490e      	ldr	r1, [pc, #56]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 800358e:	4313      	orrs	r3, r2
 8003590:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003592:	f000 f821 	bl	80035d8 <HAL_RCC_GetSysClockFreq>
 8003596:	4602      	mov	r2, r0
 8003598:	4b0b      	ldr	r3, [pc, #44]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c4>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	091b      	lsrs	r3, r3, #4
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	490a      	ldr	r1, [pc, #40]	@ (80035cc <HAL_RCC_ClockConfig+0x1c8>)
 80035a4:	5ccb      	ldrb	r3, [r1, r3]
 80035a6:	fa22 f303 	lsr.w	r3, r2, r3
 80035aa:	4a09      	ldr	r2, [pc, #36]	@ (80035d0 <HAL_RCC_ClockConfig+0x1cc>)
 80035ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035ae:	4b09      	ldr	r3, [pc, #36]	@ (80035d4 <HAL_RCC_ClockConfig+0x1d0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7fe fc1a 	bl	8001dec <HAL_InitTick>

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40022000 	.word	0x40022000
 80035c8:	40021000 	.word	0x40021000
 80035cc:	08008eac 	.word	0x08008eac
 80035d0:	20000014 	.word	0x20000014
 80035d4:	20000018 	.word	0x20000018

080035d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	b087      	sub	sp, #28
 80035dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035de:	2300      	movs	r3, #0
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	2300      	movs	r3, #0
 80035e4:	60bb      	str	r3, [r7, #8]
 80035e6:	2300      	movs	r3, #0
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	2300      	movs	r3, #0
 80035ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035f2:	4b1e      	ldr	r3, [pc, #120]	@ (800366c <HAL_RCC_GetSysClockFreq+0x94>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f003 030c 	and.w	r3, r3, #12
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d002      	beq.n	8003608 <HAL_RCC_GetSysClockFreq+0x30>
 8003602:	2b08      	cmp	r3, #8
 8003604:	d003      	beq.n	800360e <HAL_RCC_GetSysClockFreq+0x36>
 8003606:	e027      	b.n	8003658 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003608:	4b19      	ldr	r3, [pc, #100]	@ (8003670 <HAL_RCC_GetSysClockFreq+0x98>)
 800360a:	613b      	str	r3, [r7, #16]
      break;
 800360c:	e027      	b.n	800365e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	0c9b      	lsrs	r3, r3, #18
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	4a17      	ldr	r2, [pc, #92]	@ (8003674 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003618:	5cd3      	ldrb	r3, [r2, r3]
 800361a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d010      	beq.n	8003648 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003626:	4b11      	ldr	r3, [pc, #68]	@ (800366c <HAL_RCC_GetSysClockFreq+0x94>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	0c5b      	lsrs	r3, r3, #17
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	4a11      	ldr	r2, [pc, #68]	@ (8003678 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003632:	5cd3      	ldrb	r3, [r2, r3]
 8003634:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a0d      	ldr	r2, [pc, #52]	@ (8003670 <HAL_RCC_GetSysClockFreq+0x98>)
 800363a:	fb03 f202 	mul.w	r2, r3, r2
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	fbb2 f3f3 	udiv	r3, r2, r3
 8003644:	617b      	str	r3, [r7, #20]
 8003646:	e004      	b.n	8003652 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a0c      	ldr	r2, [pc, #48]	@ (800367c <HAL_RCC_GetSysClockFreq+0xa4>)
 800364c:	fb02 f303 	mul.w	r3, r2, r3
 8003650:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	613b      	str	r3, [r7, #16]
      break;
 8003656:	e002      	b.n	800365e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003658:	4b05      	ldr	r3, [pc, #20]	@ (8003670 <HAL_RCC_GetSysClockFreq+0x98>)
 800365a:	613b      	str	r3, [r7, #16]
      break;
 800365c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800365e:	693b      	ldr	r3, [r7, #16]
}
 8003660:	4618      	mov	r0, r3
 8003662:	371c      	adds	r7, #28
 8003664:	46bd      	mov	sp, r7
 8003666:	bc80      	pop	{r7}
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	40021000 	.word	0x40021000
 8003670:	007a1200 	.word	0x007a1200
 8003674:	08008ec4 	.word	0x08008ec4
 8003678:	08008ed4 	.word	0x08008ed4
 800367c:	003d0900 	.word	0x003d0900

08003680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003684:	4b02      	ldr	r3, [pc, #8]	@ (8003690 <HAL_RCC_GetHCLKFreq+0x10>)
 8003686:	681b      	ldr	r3, [r3, #0]
}
 8003688:	4618      	mov	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	bc80      	pop	{r7}
 800368e:	4770      	bx	lr
 8003690:	20000014 	.word	0x20000014

08003694 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003698:	f7ff fff2 	bl	8003680 <HAL_RCC_GetHCLKFreq>
 800369c:	4602      	mov	r2, r0
 800369e:	4b05      	ldr	r3, [pc, #20]	@ (80036b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	0a1b      	lsrs	r3, r3, #8
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	4903      	ldr	r1, [pc, #12]	@ (80036b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036aa:	5ccb      	ldrb	r3, [r1, r3]
 80036ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40021000 	.word	0x40021000
 80036b8:	08008ebc 	.word	0x08008ebc

080036bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036c0:	f7ff ffde 	bl	8003680 <HAL_RCC_GetHCLKFreq>
 80036c4:	4602      	mov	r2, r0
 80036c6:	4b05      	ldr	r3, [pc, #20]	@ (80036dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	0adb      	lsrs	r3, r3, #11
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	4903      	ldr	r1, [pc, #12]	@ (80036e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036d2:	5ccb      	ldrb	r3, [r1, r3]
 80036d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d8:	4618      	mov	r0, r3
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40021000 	.word	0x40021000
 80036e0:	08008ebc 	.word	0x08008ebc

080036e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003718 <RCC_Delay+0x34>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a0a      	ldr	r2, [pc, #40]	@ (800371c <RCC_Delay+0x38>)
 80036f2:	fba2 2303 	umull	r2, r3, r2, r3
 80036f6:	0a5b      	lsrs	r3, r3, #9
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	fb02 f303 	mul.w	r3, r2, r3
 80036fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003700:	bf00      	nop
  }
  while (Delay --);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1e5a      	subs	r2, r3, #1
 8003706:	60fa      	str	r2, [r7, #12]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1f9      	bne.n	8003700 <RCC_Delay+0x1c>
}
 800370c:	bf00      	nop
 800370e:	bf00      	nop
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	bc80      	pop	{r7}
 8003716:	4770      	bx	lr
 8003718:	20000014 	.word	0x20000014
 800371c:	10624dd3 	.word	0x10624dd3

08003720 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e041      	b.n	80037b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d106      	bne.n	800374c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7fe fa1e 	bl	8001b88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2202      	movs	r2, #2
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3304      	adds	r3, #4
 800375c:	4619      	mov	r1, r3
 800375e:	4610      	mov	r0, r2
 8003760:	f000 fbe2 	bl	8003f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b082      	sub	sp, #8
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e041      	b.n	8003854 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d106      	bne.n	80037ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f839 	bl	800385c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2202      	movs	r2, #2
 80037ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3304      	adds	r3, #4
 80037fa:	4619      	mov	r1, r3
 80037fc:	4610      	mov	r0, r2
 80037fe:	f000 fb93 	bl	8003f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	bc80      	pop	{r7}
 800386c:	4770      	bx	lr
	...

08003870 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d109      	bne.n	8003894 <HAL_TIM_PWM_Start+0x24>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b01      	cmp	r3, #1
 800388a:	bf14      	ite	ne
 800388c:	2301      	movne	r3, #1
 800388e:	2300      	moveq	r3, #0
 8003890:	b2db      	uxtb	r3, r3
 8003892:	e022      	b.n	80038da <HAL_TIM_PWM_Start+0x6a>
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	2b04      	cmp	r3, #4
 8003898:	d109      	bne.n	80038ae <HAL_TIM_PWM_Start+0x3e>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	bf14      	ite	ne
 80038a6:	2301      	movne	r3, #1
 80038a8:	2300      	moveq	r3, #0
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	e015      	b.n	80038da <HAL_TIM_PWM_Start+0x6a>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b08      	cmp	r3, #8
 80038b2:	d109      	bne.n	80038c8 <HAL_TIM_PWM_Start+0x58>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b01      	cmp	r3, #1
 80038be:	bf14      	ite	ne
 80038c0:	2301      	movne	r3, #1
 80038c2:	2300      	moveq	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	e008      	b.n	80038da <HAL_TIM_PWM_Start+0x6a>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	bf14      	ite	ne
 80038d4:	2301      	movne	r3, #1
 80038d6:	2300      	moveq	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e05e      	b.n	80039a0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d104      	bne.n	80038f2 <HAL_TIM_PWM_Start+0x82>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038f0:	e013      	b.n	800391a <HAL_TIM_PWM_Start+0xaa>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b04      	cmp	r3, #4
 80038f6:	d104      	bne.n	8003902 <HAL_TIM_PWM_Start+0x92>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2202      	movs	r2, #2
 80038fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003900:	e00b      	b.n	800391a <HAL_TIM_PWM_Start+0xaa>
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	2b08      	cmp	r3, #8
 8003906:	d104      	bne.n	8003912 <HAL_TIM_PWM_Start+0xa2>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003910:	e003      	b.n	800391a <HAL_TIM_PWM_Start+0xaa>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2202      	movs	r2, #2
 8003916:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2201      	movs	r2, #1
 8003920:	6839      	ldr	r1, [r7, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f000 fd8c 	bl	8004440 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a1e      	ldr	r2, [pc, #120]	@ (80039a8 <HAL_TIM_PWM_Start+0x138>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d107      	bne.n	8003942 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003940:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a18      	ldr	r2, [pc, #96]	@ (80039a8 <HAL_TIM_PWM_Start+0x138>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d00e      	beq.n	800396a <HAL_TIM_PWM_Start+0xfa>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003954:	d009      	beq.n	800396a <HAL_TIM_PWM_Start+0xfa>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a14      	ldr	r2, [pc, #80]	@ (80039ac <HAL_TIM_PWM_Start+0x13c>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d004      	beq.n	800396a <HAL_TIM_PWM_Start+0xfa>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a12      	ldr	r2, [pc, #72]	@ (80039b0 <HAL_TIM_PWM_Start+0x140>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d111      	bne.n	800398e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2b06      	cmp	r3, #6
 800397a:	d010      	beq.n	800399e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0201 	orr.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800398c:	e007      	b.n	800399e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 0201 	orr.w	r2, r2, #1
 800399c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40012c00 	.word	0x40012c00
 80039ac:	40000400 	.word	0x40000400
 80039b0:	40000800 	.word	0x40000800

080039b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e093      	b.n	8003af0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d106      	bne.n	80039e2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7fe f8f1 	bl	8001bc4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2202      	movs	r2, #2
 80039e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6812      	ldr	r2, [r2, #0]
 80039f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039f8:	f023 0307 	bic.w	r3, r3, #7
 80039fc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3304      	adds	r3, #4
 8003a06:	4619      	mov	r1, r3
 8003a08:	4610      	mov	r0, r2
 8003a0a:	f000 fa8d 	bl	8003f28 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a36:	f023 0303 	bic.w	r3, r3, #3
 8003a3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	021b      	lsls	r3, r3, #8
 8003a46:	4313      	orrs	r3, r2
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003a54:	f023 030c 	bic.w	r3, r3, #12
 8003a58:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	021b      	lsls	r3, r3, #8
 8003a70:	4313      	orrs	r3, r2
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	011a      	lsls	r2, r3, #4
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	031b      	lsls	r3, r3, #12
 8003a84:	4313      	orrs	r3, r2
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003a92:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685a      	ldr	r2, [r3, #4]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3718      	adds	r7, #24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b08:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003b10:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b18:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003b20:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d110      	bne.n	8003b4a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d102      	bne.n	8003b34 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b2e:	7b7b      	ldrb	r3, [r7, #13]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d001      	beq.n	8003b38 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e069      	b.n	8003c0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b48:	e031      	b.n	8003bae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b04      	cmp	r3, #4
 8003b4e:	d110      	bne.n	8003b72 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b50:	7bbb      	ldrb	r3, [r7, #14]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d102      	bne.n	8003b5c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b56:	7b3b      	ldrb	r3, [r7, #12]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d001      	beq.n	8003b60 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e055      	b.n	8003c0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b70:	e01d      	b.n	8003bae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d108      	bne.n	8003b8a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b78:	7bbb      	ldrb	r3, [r7, #14]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d105      	bne.n	8003b8a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b7e:	7b7b      	ldrb	r3, [r7, #13]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d102      	bne.n	8003b8a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b84:	7b3b      	ldrb	r3, [r7, #12]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d001      	beq.n	8003b8e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e03e      	b.n	8003c0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2202      	movs	r2, #2
 8003b92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2202      	movs	r2, #2
 8003b9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2202      	movs	r2, #2
 8003baa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d003      	beq.n	8003bbc <HAL_TIM_Encoder_Start+0xc4>
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	d008      	beq.n	8003bcc <HAL_TIM_Encoder_Start+0xd4>
 8003bba:	e00f      	b.n	8003bdc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f000 fc3b 	bl	8004440 <TIM_CCxChannelCmd>
      break;
 8003bca:	e016      	b.n	8003bfa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	2104      	movs	r1, #4
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f000 fc33 	bl	8004440 <TIM_CCxChannelCmd>
      break;
 8003bda:	e00e      	b.n	8003bfa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2201      	movs	r2, #1
 8003be2:	2100      	movs	r1, #0
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 fc2b 	bl	8004440 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	2104      	movs	r1, #4
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 fc24 	bl	8004440 <TIM_CCxChannelCmd>
      break;
 8003bf8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f042 0201 	orr.w	r2, r2, #1
 8003c08:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e0ae      	b.n	8003d90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b0c      	cmp	r3, #12
 8003c3e:	f200 809f 	bhi.w	8003d80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003c42:	a201      	add	r2, pc, #4	@ (adr r2, 8003c48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c48:	08003c7d 	.word	0x08003c7d
 8003c4c:	08003d81 	.word	0x08003d81
 8003c50:	08003d81 	.word	0x08003d81
 8003c54:	08003d81 	.word	0x08003d81
 8003c58:	08003cbd 	.word	0x08003cbd
 8003c5c:	08003d81 	.word	0x08003d81
 8003c60:	08003d81 	.word	0x08003d81
 8003c64:	08003d81 	.word	0x08003d81
 8003c68:	08003cff 	.word	0x08003cff
 8003c6c:	08003d81 	.word	0x08003d81
 8003c70:	08003d81 	.word	0x08003d81
 8003c74:	08003d81 	.word	0x08003d81
 8003c78:	08003d3f 	.word	0x08003d3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68b9      	ldr	r1, [r7, #8]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 f9be 	bl	8004004 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699a      	ldr	r2, [r3, #24]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0208 	orr.w	r2, r2, #8
 8003c96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699a      	ldr	r2, [r3, #24]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0204 	bic.w	r2, r2, #4
 8003ca6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6999      	ldr	r1, [r3, #24]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	691a      	ldr	r2, [r3, #16]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	619a      	str	r2, [r3, #24]
      break;
 8003cba:	e064      	b.n	8003d86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68b9      	ldr	r1, [r7, #8]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 fa04 	bl	80040d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699a      	ldr	r2, [r3, #24]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	699a      	ldr	r2, [r3, #24]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ce6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6999      	ldr	r1, [r3, #24]
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	021a      	lsls	r2, r3, #8
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	619a      	str	r2, [r3, #24]
      break;
 8003cfc:	e043      	b.n	8003d86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68b9      	ldr	r1, [r7, #8]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 fa4d 	bl	80041a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	69da      	ldr	r2, [r3, #28]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f042 0208 	orr.w	r2, r2, #8
 8003d18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	69da      	ldr	r2, [r3, #28]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0204 	bic.w	r2, r2, #4
 8003d28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	69d9      	ldr	r1, [r3, #28]
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	691a      	ldr	r2, [r3, #16]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	61da      	str	r2, [r3, #28]
      break;
 8003d3c:	e023      	b.n	8003d86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68b9      	ldr	r1, [r7, #8]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 fa97 	bl	8004278 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	69da      	ldr	r2, [r3, #28]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	69da      	ldr	r2, [r3, #28]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	69d9      	ldr	r1, [r3, #28]
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	021a      	lsls	r2, r3, #8
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	61da      	str	r2, [r3, #28]
      break;
 8003d7e:	e002      	b.n	8003d86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	75fb      	strb	r3, [r7, #23]
      break;
 8003d84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3718      	adds	r7, #24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d101      	bne.n	8003db4 <HAL_TIM_ConfigClockSource+0x1c>
 8003db0:	2302      	movs	r3, #2
 8003db2:	e0b4      	b.n	8003f1e <HAL_TIM_ConfigClockSource+0x186>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003dd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003dda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dec:	d03e      	beq.n	8003e6c <HAL_TIM_ConfigClockSource+0xd4>
 8003dee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003df2:	f200 8087 	bhi.w	8003f04 <HAL_TIM_ConfigClockSource+0x16c>
 8003df6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dfa:	f000 8086 	beq.w	8003f0a <HAL_TIM_ConfigClockSource+0x172>
 8003dfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e02:	d87f      	bhi.n	8003f04 <HAL_TIM_ConfigClockSource+0x16c>
 8003e04:	2b70      	cmp	r3, #112	@ 0x70
 8003e06:	d01a      	beq.n	8003e3e <HAL_TIM_ConfigClockSource+0xa6>
 8003e08:	2b70      	cmp	r3, #112	@ 0x70
 8003e0a:	d87b      	bhi.n	8003f04 <HAL_TIM_ConfigClockSource+0x16c>
 8003e0c:	2b60      	cmp	r3, #96	@ 0x60
 8003e0e:	d050      	beq.n	8003eb2 <HAL_TIM_ConfigClockSource+0x11a>
 8003e10:	2b60      	cmp	r3, #96	@ 0x60
 8003e12:	d877      	bhi.n	8003f04 <HAL_TIM_ConfigClockSource+0x16c>
 8003e14:	2b50      	cmp	r3, #80	@ 0x50
 8003e16:	d03c      	beq.n	8003e92 <HAL_TIM_ConfigClockSource+0xfa>
 8003e18:	2b50      	cmp	r3, #80	@ 0x50
 8003e1a:	d873      	bhi.n	8003f04 <HAL_TIM_ConfigClockSource+0x16c>
 8003e1c:	2b40      	cmp	r3, #64	@ 0x40
 8003e1e:	d058      	beq.n	8003ed2 <HAL_TIM_ConfigClockSource+0x13a>
 8003e20:	2b40      	cmp	r3, #64	@ 0x40
 8003e22:	d86f      	bhi.n	8003f04 <HAL_TIM_ConfigClockSource+0x16c>
 8003e24:	2b30      	cmp	r3, #48	@ 0x30
 8003e26:	d064      	beq.n	8003ef2 <HAL_TIM_ConfigClockSource+0x15a>
 8003e28:	2b30      	cmp	r3, #48	@ 0x30
 8003e2a:	d86b      	bhi.n	8003f04 <HAL_TIM_ConfigClockSource+0x16c>
 8003e2c:	2b20      	cmp	r3, #32
 8003e2e:	d060      	beq.n	8003ef2 <HAL_TIM_ConfigClockSource+0x15a>
 8003e30:	2b20      	cmp	r3, #32
 8003e32:	d867      	bhi.n	8003f04 <HAL_TIM_ConfigClockSource+0x16c>
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d05c      	beq.n	8003ef2 <HAL_TIM_ConfigClockSource+0x15a>
 8003e38:	2b10      	cmp	r3, #16
 8003e3a:	d05a      	beq.n	8003ef2 <HAL_TIM_ConfigClockSource+0x15a>
 8003e3c:	e062      	b.n	8003f04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e4e:	f000 fad8 	bl	8004402 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003e60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	609a      	str	r2, [r3, #8]
      break;
 8003e6a:	e04f      	b.n	8003f0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e7c:	f000 fac1 	bl	8004402 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689a      	ldr	r2, [r3, #8]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e8e:	609a      	str	r2, [r3, #8]
      break;
 8003e90:	e03c      	b.n	8003f0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	f000 fa38 	bl	8004314 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2150      	movs	r1, #80	@ 0x50
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f000 fa8f 	bl	80043ce <TIM_ITRx_SetConfig>
      break;
 8003eb0:	e02c      	b.n	8003f0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	f000 fa56 	bl	8004370 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2160      	movs	r1, #96	@ 0x60
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 fa7f 	bl	80043ce <TIM_ITRx_SetConfig>
      break;
 8003ed0:	e01c      	b.n	8003f0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ede:	461a      	mov	r2, r3
 8003ee0:	f000 fa18 	bl	8004314 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2140      	movs	r1, #64	@ 0x40
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 fa6f 	bl	80043ce <TIM_ITRx_SetConfig>
      break;
 8003ef0:	e00c      	b.n	8003f0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4619      	mov	r1, r3
 8003efc:	4610      	mov	r0, r2
 8003efe:	f000 fa66 	bl	80043ce <TIM_ITRx_SetConfig>
      break;
 8003f02:	e003      	b.n	8003f0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	73fb      	strb	r3, [r7, #15]
      break;
 8003f08:	e000      	b.n	8003f0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
	...

08003f28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a2f      	ldr	r2, [pc, #188]	@ (8003ff8 <TIM_Base_SetConfig+0xd0>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00b      	beq.n	8003f58 <TIM_Base_SetConfig+0x30>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f46:	d007      	beq.n	8003f58 <TIM_Base_SetConfig+0x30>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a2c      	ldr	r2, [pc, #176]	@ (8003ffc <TIM_Base_SetConfig+0xd4>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d003      	beq.n	8003f58 <TIM_Base_SetConfig+0x30>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a2b      	ldr	r2, [pc, #172]	@ (8004000 <TIM_Base_SetConfig+0xd8>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d108      	bne.n	8003f6a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a22      	ldr	r2, [pc, #136]	@ (8003ff8 <TIM_Base_SetConfig+0xd0>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d00b      	beq.n	8003f8a <TIM_Base_SetConfig+0x62>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f78:	d007      	beq.n	8003f8a <TIM_Base_SetConfig+0x62>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a1f      	ldr	r2, [pc, #124]	@ (8003ffc <TIM_Base_SetConfig+0xd4>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d003      	beq.n	8003f8a <TIM_Base_SetConfig+0x62>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a1e      	ldr	r2, [pc, #120]	@ (8004000 <TIM_Base_SetConfig+0xd8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d108      	bne.n	8003f9c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a0d      	ldr	r2, [pc, #52]	@ (8003ff8 <TIM_Base_SetConfig+0xd0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d103      	bne.n	8003fd0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d005      	beq.n	8003fee <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f023 0201 	bic.w	r2, r3, #1
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	611a      	str	r2, [r3, #16]
  }
}
 8003fee:	bf00      	nop
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr
 8003ff8:	40012c00 	.word	0x40012c00
 8003ffc:	40000400 	.word	0x40000400
 8004000:	40000800 	.word	0x40000800

08004004 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004004:	b480      	push	{r7}
 8004006:	b087      	sub	sp, #28
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	f023 0201 	bic.w	r2, r3, #1
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004032:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 0303 	bic.w	r3, r3, #3
 800403a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f023 0302 	bic.w	r3, r3, #2
 800404c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a1c      	ldr	r2, [pc, #112]	@ (80040cc <TIM_OC1_SetConfig+0xc8>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d10c      	bne.n	800407a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f023 0308 	bic.w	r3, r3, #8
 8004066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	4313      	orrs	r3, r2
 8004070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f023 0304 	bic.w	r3, r3, #4
 8004078:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a13      	ldr	r2, [pc, #76]	@ (80040cc <TIM_OC1_SetConfig+0xc8>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d111      	bne.n	80040a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	4313      	orrs	r3, r2
 800409a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	621a      	str	r2, [r3, #32]
}
 80040c0:	bf00      	nop
 80040c2:	371c      	adds	r7, #28
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bc80      	pop	{r7}
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40012c00 	.word	0x40012c00

080040d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b087      	sub	sp, #28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a1b      	ldr	r3, [r3, #32]
 80040e4:	f023 0210 	bic.w	r2, r3, #16
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004106:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	021b      	lsls	r3, r3, #8
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	4313      	orrs	r3, r2
 8004112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f023 0320 	bic.w	r3, r3, #32
 800411a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	4313      	orrs	r3, r2
 8004126:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a1d      	ldr	r2, [pc, #116]	@ (80041a0 <TIM_OC2_SetConfig+0xd0>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d10d      	bne.n	800414c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004136:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	4313      	orrs	r3, r2
 8004142:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800414a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a14      	ldr	r2, [pc, #80]	@ (80041a0 <TIM_OC2_SetConfig+0xd0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d113      	bne.n	800417c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800415a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004162:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	4313      	orrs	r3, r2
 800416e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4313      	orrs	r3, r2
 800417a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	621a      	str	r2, [r3, #32]
}
 8004196:	bf00      	nop
 8004198:	371c      	adds	r7, #28
 800419a:	46bd      	mov	sp, r7
 800419c:	bc80      	pop	{r7}
 800419e:	4770      	bx	lr
 80041a0:	40012c00 	.word	0x40012c00

080041a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b087      	sub	sp, #28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 0303 	bic.w	r3, r3, #3
 80041da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	021b      	lsls	r3, r3, #8
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004274 <TIM_OC3_SetConfig+0xd0>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d10d      	bne.n	800421e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004208:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	021b      	lsls	r3, r3, #8
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	4313      	orrs	r3, r2
 8004214:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800421c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a14      	ldr	r2, [pc, #80]	@ (8004274 <TIM_OC3_SetConfig+0xd0>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d113      	bne.n	800424e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800422c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004234:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	4313      	orrs	r3, r2
 8004240:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	011b      	lsls	r3, r3, #4
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	4313      	orrs	r3, r2
 800424c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	621a      	str	r2, [r3, #32]
}
 8004268:	bf00      	nop
 800426a:	371c      	adds	r7, #28
 800426c:	46bd      	mov	sp, r7
 800426e:	bc80      	pop	{r7}
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	40012c00 	.word	0x40012c00

08004278 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	021b      	lsls	r3, r3, #8
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	031b      	lsls	r3, r3, #12
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a0f      	ldr	r2, [pc, #60]	@ (8004310 <TIM_OC4_SetConfig+0x98>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d109      	bne.n	80042ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	019b      	lsls	r3, r3, #6
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685a      	ldr	r2, [r3, #4]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	621a      	str	r2, [r3, #32]
}
 8004306:	bf00      	nop
 8004308:	371c      	adds	r7, #28
 800430a:	46bd      	mov	sp, r7
 800430c:	bc80      	pop	{r7}
 800430e:	4770      	bx	lr
 8004310:	40012c00 	.word	0x40012c00

08004314 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004314:	b480      	push	{r7}
 8004316:	b087      	sub	sp, #28
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	f023 0201 	bic.w	r2, r3, #1
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800433e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	4313      	orrs	r3, r2
 8004348:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f023 030a 	bic.w	r3, r3, #10
 8004350:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	4313      	orrs	r3, r2
 8004358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	621a      	str	r2, [r3, #32]
}
 8004366:	bf00      	nop
 8004368:	371c      	adds	r7, #28
 800436a:	46bd      	mov	sp, r7
 800436c:	bc80      	pop	{r7}
 800436e:	4770      	bx	lr

08004370 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004370:	b480      	push	{r7}
 8004372:	b087      	sub	sp, #28
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	f023 0210 	bic.w	r2, r3, #16
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	699b      	ldr	r3, [r3, #24]
 8004392:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800439a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	031b      	lsls	r3, r3, #12
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043ac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	011b      	lsls	r3, r3, #4
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	621a      	str	r2, [r3, #32]
}
 80043c4:	bf00      	nop
 80043c6:	371c      	adds	r7, #28
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bc80      	pop	{r7}
 80043cc:	4770      	bx	lr

080043ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b085      	sub	sp, #20
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	f043 0307 	orr.w	r3, r3, #7
 80043f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	609a      	str	r2, [r3, #8]
}
 80043f8:	bf00      	nop
 80043fa:	3714      	adds	r7, #20
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bc80      	pop	{r7}
 8004400:	4770      	bx	lr

08004402 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004402:	b480      	push	{r7}
 8004404:	b087      	sub	sp, #28
 8004406:	af00      	add	r7, sp, #0
 8004408:	60f8      	str	r0, [r7, #12]
 800440a:	60b9      	str	r1, [r7, #8]
 800440c:	607a      	str	r2, [r7, #4]
 800440e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800441c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	021a      	lsls	r2, r3, #8
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	431a      	orrs	r2, r3
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	4313      	orrs	r3, r2
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	4313      	orrs	r3, r2
 800442e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	609a      	str	r2, [r3, #8]
}
 8004436:	bf00      	nop
 8004438:	371c      	adds	r7, #28
 800443a:	46bd      	mov	sp, r7
 800443c:	bc80      	pop	{r7}
 800443e:	4770      	bx	lr

08004440 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	f003 031f 	and.w	r3, r3, #31
 8004452:	2201      	movs	r2, #1
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6a1a      	ldr	r2, [r3, #32]
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	43db      	mvns	r3, r3
 8004462:	401a      	ands	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a1a      	ldr	r2, [r3, #32]
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f003 031f 	and.w	r3, r3, #31
 8004472:	6879      	ldr	r1, [r7, #4]
 8004474:	fa01 f303 	lsl.w	r3, r1, r3
 8004478:	431a      	orrs	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	621a      	str	r2, [r3, #32]
}
 800447e:	bf00      	nop
 8004480:	371c      	adds	r7, #28
 8004482:	46bd      	mov	sp, r7
 8004484:	bc80      	pop	{r7}
 8004486:	4770      	bx	lr

08004488 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004498:	2b01      	cmp	r3, #1
 800449a:	d101      	bne.n	80044a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800449c:	2302      	movs	r3, #2
 800449e:	e046      	b.n	800452e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2202      	movs	r2, #2
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a16      	ldr	r2, [pc, #88]	@ (8004538 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d00e      	beq.n	8004502 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ec:	d009      	beq.n	8004502 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a12      	ldr	r2, [pc, #72]	@ (800453c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d004      	beq.n	8004502 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a10      	ldr	r2, [pc, #64]	@ (8004540 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d10c      	bne.n	800451c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004508:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	4313      	orrs	r3, r2
 8004512:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68ba      	ldr	r2, [r7, #8]
 800451a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	bc80      	pop	{r7}
 8004536:	4770      	bx	lr
 8004538:	40012c00 	.word	0x40012c00
 800453c:	40000400 	.word	0x40000400
 8004540:	40000800 	.word	0x40000800

08004544 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800454e:	2300      	movs	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800455c:	2302      	movs	r3, #2
 800455e:	e03d      	b.n	80045dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	4313      	orrs	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	4313      	orrs	r3, r2
 8004582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	4313      	orrs	r3, r2
 8004590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4313      	orrs	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	695b      	ldr	r3, [r3, #20]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bc80      	pop	{r7}
 80045e4:	4770      	bx	lr

080045e6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b082      	sub	sp, #8
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e042      	b.n	800467e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	d106      	bne.n	8004612 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7fd fb73 	bl	8001cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2224      	movs	r2, #36	@ 0x24
 8004616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004628:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f82c 	bl	8004688 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	691a      	ldr	r2, [r3, #16]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800463e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	695a      	ldr	r2, [r3, #20]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800464e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68da      	ldr	r2, [r3, #12]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800465e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2220      	movs	r2, #32
 800466a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2220      	movs	r2, #32
 8004672:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	689a      	ldr	r2, [r3, #8]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80046c2:	f023 030c 	bic.w	r3, r3, #12
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6812      	ldr	r2, [r2, #0]
 80046ca:	68b9      	ldr	r1, [r7, #8]
 80046cc:	430b      	orrs	r3, r1
 80046ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699a      	ldr	r2, [r3, #24]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a2c      	ldr	r2, [pc, #176]	@ (800479c <UART_SetConfig+0x114>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d103      	bne.n	80046f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80046f0:	f7fe ffe4 	bl	80036bc <HAL_RCC_GetPCLK2Freq>
 80046f4:	60f8      	str	r0, [r7, #12]
 80046f6:	e002      	b.n	80046fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80046f8:	f7fe ffcc 	bl	8003694 <HAL_RCC_GetPCLK1Freq>
 80046fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	4613      	mov	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	009a      	lsls	r2, r3, #2
 8004708:	441a      	add	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	fbb2 f3f3 	udiv	r3, r2, r3
 8004714:	4a22      	ldr	r2, [pc, #136]	@ (80047a0 <UART_SetConfig+0x118>)
 8004716:	fba2 2303 	umull	r2, r3, r2, r3
 800471a:	095b      	lsrs	r3, r3, #5
 800471c:	0119      	lsls	r1, r3, #4
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	4613      	mov	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	009a      	lsls	r2, r3, #2
 8004728:	441a      	add	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	fbb2 f2f3 	udiv	r2, r2, r3
 8004734:	4b1a      	ldr	r3, [pc, #104]	@ (80047a0 <UART_SetConfig+0x118>)
 8004736:	fba3 0302 	umull	r0, r3, r3, r2
 800473a:	095b      	lsrs	r3, r3, #5
 800473c:	2064      	movs	r0, #100	@ 0x64
 800473e:	fb00 f303 	mul.w	r3, r0, r3
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	3332      	adds	r3, #50	@ 0x32
 8004748:	4a15      	ldr	r2, [pc, #84]	@ (80047a0 <UART_SetConfig+0x118>)
 800474a:	fba2 2303 	umull	r2, r3, r2, r3
 800474e:	095b      	lsrs	r3, r3, #5
 8004750:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004754:	4419      	add	r1, r3
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4613      	mov	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	009a      	lsls	r2, r3, #2
 8004760:	441a      	add	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	fbb2 f2f3 	udiv	r2, r2, r3
 800476c:	4b0c      	ldr	r3, [pc, #48]	@ (80047a0 <UART_SetConfig+0x118>)
 800476e:	fba3 0302 	umull	r0, r3, r3, r2
 8004772:	095b      	lsrs	r3, r3, #5
 8004774:	2064      	movs	r0, #100	@ 0x64
 8004776:	fb00 f303 	mul.w	r3, r0, r3
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	3332      	adds	r3, #50	@ 0x32
 8004780:	4a07      	ldr	r2, [pc, #28]	@ (80047a0 <UART_SetConfig+0x118>)
 8004782:	fba2 2303 	umull	r2, r3, r2, r3
 8004786:	095b      	lsrs	r3, r3, #5
 8004788:	f003 020f 	and.w	r2, r3, #15
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	440a      	add	r2, r1
 8004792:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004794:	bf00      	nop
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	40013800 	.word	0x40013800
 80047a0:	51eb851f 	.word	0x51eb851f

080047a4 <__cvt>:
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047aa:	461d      	mov	r5, r3
 80047ac:	bfbb      	ittet	lt
 80047ae:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80047b2:	461d      	movlt	r5, r3
 80047b4:	2300      	movge	r3, #0
 80047b6:	232d      	movlt	r3, #45	@ 0x2d
 80047b8:	b088      	sub	sp, #32
 80047ba:	4614      	mov	r4, r2
 80047bc:	bfb8      	it	lt
 80047be:	4614      	movlt	r4, r2
 80047c0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80047c2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80047c4:	7013      	strb	r3, [r2, #0]
 80047c6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80047c8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80047cc:	f023 0820 	bic.w	r8, r3, #32
 80047d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80047d4:	d005      	beq.n	80047e2 <__cvt+0x3e>
 80047d6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80047da:	d100      	bne.n	80047de <__cvt+0x3a>
 80047dc:	3601      	adds	r6, #1
 80047de:	2302      	movs	r3, #2
 80047e0:	e000      	b.n	80047e4 <__cvt+0x40>
 80047e2:	2303      	movs	r3, #3
 80047e4:	aa07      	add	r2, sp, #28
 80047e6:	9204      	str	r2, [sp, #16]
 80047e8:	aa06      	add	r2, sp, #24
 80047ea:	e9cd a202 	strd	sl, r2, [sp, #8]
 80047ee:	e9cd 3600 	strd	r3, r6, [sp]
 80047f2:	4622      	mov	r2, r4
 80047f4:	462b      	mov	r3, r5
 80047f6:	f001 f893 	bl	8005920 <_dtoa_r>
 80047fa:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80047fe:	4607      	mov	r7, r0
 8004800:	d119      	bne.n	8004836 <__cvt+0x92>
 8004802:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004804:	07db      	lsls	r3, r3, #31
 8004806:	d50e      	bpl.n	8004826 <__cvt+0x82>
 8004808:	eb00 0906 	add.w	r9, r0, r6
 800480c:	2200      	movs	r2, #0
 800480e:	2300      	movs	r3, #0
 8004810:	4620      	mov	r0, r4
 8004812:	4629      	mov	r1, r5
 8004814:	f7fc f8c8 	bl	80009a8 <__aeabi_dcmpeq>
 8004818:	b108      	cbz	r0, 800481e <__cvt+0x7a>
 800481a:	f8cd 901c 	str.w	r9, [sp, #28]
 800481e:	2230      	movs	r2, #48	@ 0x30
 8004820:	9b07      	ldr	r3, [sp, #28]
 8004822:	454b      	cmp	r3, r9
 8004824:	d31e      	bcc.n	8004864 <__cvt+0xc0>
 8004826:	4638      	mov	r0, r7
 8004828:	9b07      	ldr	r3, [sp, #28]
 800482a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800482c:	1bdb      	subs	r3, r3, r7
 800482e:	6013      	str	r3, [r2, #0]
 8004830:	b008      	add	sp, #32
 8004832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004836:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800483a:	eb00 0906 	add.w	r9, r0, r6
 800483e:	d1e5      	bne.n	800480c <__cvt+0x68>
 8004840:	7803      	ldrb	r3, [r0, #0]
 8004842:	2b30      	cmp	r3, #48	@ 0x30
 8004844:	d10a      	bne.n	800485c <__cvt+0xb8>
 8004846:	2200      	movs	r2, #0
 8004848:	2300      	movs	r3, #0
 800484a:	4620      	mov	r0, r4
 800484c:	4629      	mov	r1, r5
 800484e:	f7fc f8ab 	bl	80009a8 <__aeabi_dcmpeq>
 8004852:	b918      	cbnz	r0, 800485c <__cvt+0xb8>
 8004854:	f1c6 0601 	rsb	r6, r6, #1
 8004858:	f8ca 6000 	str.w	r6, [sl]
 800485c:	f8da 3000 	ldr.w	r3, [sl]
 8004860:	4499      	add	r9, r3
 8004862:	e7d3      	b.n	800480c <__cvt+0x68>
 8004864:	1c59      	adds	r1, r3, #1
 8004866:	9107      	str	r1, [sp, #28]
 8004868:	701a      	strb	r2, [r3, #0]
 800486a:	e7d9      	b.n	8004820 <__cvt+0x7c>

0800486c <__exponent>:
 800486c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800486e:	2900      	cmp	r1, #0
 8004870:	bfb6      	itet	lt
 8004872:	232d      	movlt	r3, #45	@ 0x2d
 8004874:	232b      	movge	r3, #43	@ 0x2b
 8004876:	4249      	neglt	r1, r1
 8004878:	2909      	cmp	r1, #9
 800487a:	7002      	strb	r2, [r0, #0]
 800487c:	7043      	strb	r3, [r0, #1]
 800487e:	dd29      	ble.n	80048d4 <__exponent+0x68>
 8004880:	f10d 0307 	add.w	r3, sp, #7
 8004884:	461d      	mov	r5, r3
 8004886:	270a      	movs	r7, #10
 8004888:	fbb1 f6f7 	udiv	r6, r1, r7
 800488c:	461a      	mov	r2, r3
 800488e:	fb07 1416 	mls	r4, r7, r6, r1
 8004892:	3430      	adds	r4, #48	@ 0x30
 8004894:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004898:	460c      	mov	r4, r1
 800489a:	2c63      	cmp	r4, #99	@ 0x63
 800489c:	4631      	mov	r1, r6
 800489e:	f103 33ff 	add.w	r3, r3, #4294967295
 80048a2:	dcf1      	bgt.n	8004888 <__exponent+0x1c>
 80048a4:	3130      	adds	r1, #48	@ 0x30
 80048a6:	1e94      	subs	r4, r2, #2
 80048a8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80048ac:	4623      	mov	r3, r4
 80048ae:	1c41      	adds	r1, r0, #1
 80048b0:	42ab      	cmp	r3, r5
 80048b2:	d30a      	bcc.n	80048ca <__exponent+0x5e>
 80048b4:	f10d 0309 	add.w	r3, sp, #9
 80048b8:	1a9b      	subs	r3, r3, r2
 80048ba:	42ac      	cmp	r4, r5
 80048bc:	bf88      	it	hi
 80048be:	2300      	movhi	r3, #0
 80048c0:	3302      	adds	r3, #2
 80048c2:	4403      	add	r3, r0
 80048c4:	1a18      	subs	r0, r3, r0
 80048c6:	b003      	add	sp, #12
 80048c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048ca:	f813 6b01 	ldrb.w	r6, [r3], #1
 80048ce:	f801 6f01 	strb.w	r6, [r1, #1]!
 80048d2:	e7ed      	b.n	80048b0 <__exponent+0x44>
 80048d4:	2330      	movs	r3, #48	@ 0x30
 80048d6:	3130      	adds	r1, #48	@ 0x30
 80048d8:	7083      	strb	r3, [r0, #2]
 80048da:	70c1      	strb	r1, [r0, #3]
 80048dc:	1d03      	adds	r3, r0, #4
 80048de:	e7f1      	b.n	80048c4 <__exponent+0x58>

080048e0 <_printf_float>:
 80048e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048e4:	b091      	sub	sp, #68	@ 0x44
 80048e6:	460c      	mov	r4, r1
 80048e8:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80048ec:	4616      	mov	r6, r2
 80048ee:	461f      	mov	r7, r3
 80048f0:	4605      	mov	r5, r0
 80048f2:	f000 ff03 	bl	80056fc <_localeconv_r>
 80048f6:	6803      	ldr	r3, [r0, #0]
 80048f8:	4618      	mov	r0, r3
 80048fa:	9308      	str	r3, [sp, #32]
 80048fc:	f7fb fc28 	bl	8000150 <strlen>
 8004900:	2300      	movs	r3, #0
 8004902:	930e      	str	r3, [sp, #56]	@ 0x38
 8004904:	f8d8 3000 	ldr.w	r3, [r8]
 8004908:	9009      	str	r0, [sp, #36]	@ 0x24
 800490a:	3307      	adds	r3, #7
 800490c:	f023 0307 	bic.w	r3, r3, #7
 8004910:	f103 0208 	add.w	r2, r3, #8
 8004914:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004918:	f8d4 b000 	ldr.w	fp, [r4]
 800491c:	f8c8 2000 	str.w	r2, [r8]
 8004920:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004924:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004928:	930b      	str	r3, [sp, #44]	@ 0x2c
 800492a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800492e:	f04f 32ff 	mov.w	r2, #4294967295
 8004932:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004936:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800493a:	4b9c      	ldr	r3, [pc, #624]	@ (8004bac <_printf_float+0x2cc>)
 800493c:	f7fc f866 	bl	8000a0c <__aeabi_dcmpun>
 8004940:	bb70      	cbnz	r0, 80049a0 <_printf_float+0xc0>
 8004942:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004946:	f04f 32ff 	mov.w	r2, #4294967295
 800494a:	4b98      	ldr	r3, [pc, #608]	@ (8004bac <_printf_float+0x2cc>)
 800494c:	f7fc f840 	bl	80009d0 <__aeabi_dcmple>
 8004950:	bb30      	cbnz	r0, 80049a0 <_printf_float+0xc0>
 8004952:	2200      	movs	r2, #0
 8004954:	2300      	movs	r3, #0
 8004956:	4640      	mov	r0, r8
 8004958:	4649      	mov	r1, r9
 800495a:	f7fc f82f 	bl	80009bc <__aeabi_dcmplt>
 800495e:	b110      	cbz	r0, 8004966 <_printf_float+0x86>
 8004960:	232d      	movs	r3, #45	@ 0x2d
 8004962:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004966:	4a92      	ldr	r2, [pc, #584]	@ (8004bb0 <_printf_float+0x2d0>)
 8004968:	4b92      	ldr	r3, [pc, #584]	@ (8004bb4 <_printf_float+0x2d4>)
 800496a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800496e:	bf94      	ite	ls
 8004970:	4690      	movls	r8, r2
 8004972:	4698      	movhi	r8, r3
 8004974:	2303      	movs	r3, #3
 8004976:	f04f 0900 	mov.w	r9, #0
 800497a:	6123      	str	r3, [r4, #16]
 800497c:	f02b 0304 	bic.w	r3, fp, #4
 8004980:	6023      	str	r3, [r4, #0]
 8004982:	4633      	mov	r3, r6
 8004984:	4621      	mov	r1, r4
 8004986:	4628      	mov	r0, r5
 8004988:	9700      	str	r7, [sp, #0]
 800498a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800498c:	f000 f9d4 	bl	8004d38 <_printf_common>
 8004990:	3001      	adds	r0, #1
 8004992:	f040 8090 	bne.w	8004ab6 <_printf_float+0x1d6>
 8004996:	f04f 30ff 	mov.w	r0, #4294967295
 800499a:	b011      	add	sp, #68	@ 0x44
 800499c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049a0:	4642      	mov	r2, r8
 80049a2:	464b      	mov	r3, r9
 80049a4:	4640      	mov	r0, r8
 80049a6:	4649      	mov	r1, r9
 80049a8:	f7fc f830 	bl	8000a0c <__aeabi_dcmpun>
 80049ac:	b148      	cbz	r0, 80049c2 <_printf_float+0xe2>
 80049ae:	464b      	mov	r3, r9
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	bfb8      	it	lt
 80049b4:	232d      	movlt	r3, #45	@ 0x2d
 80049b6:	4a80      	ldr	r2, [pc, #512]	@ (8004bb8 <_printf_float+0x2d8>)
 80049b8:	bfb8      	it	lt
 80049ba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80049be:	4b7f      	ldr	r3, [pc, #508]	@ (8004bbc <_printf_float+0x2dc>)
 80049c0:	e7d3      	b.n	800496a <_printf_float+0x8a>
 80049c2:	6863      	ldr	r3, [r4, #4]
 80049c4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80049c8:	1c5a      	adds	r2, r3, #1
 80049ca:	d13f      	bne.n	8004a4c <_printf_float+0x16c>
 80049cc:	2306      	movs	r3, #6
 80049ce:	6063      	str	r3, [r4, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80049d6:	6023      	str	r3, [r4, #0]
 80049d8:	9206      	str	r2, [sp, #24]
 80049da:	aa0e      	add	r2, sp, #56	@ 0x38
 80049dc:	e9cd a204 	strd	sl, r2, [sp, #16]
 80049e0:	aa0d      	add	r2, sp, #52	@ 0x34
 80049e2:	9203      	str	r2, [sp, #12]
 80049e4:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80049e8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80049ec:	6863      	ldr	r3, [r4, #4]
 80049ee:	4642      	mov	r2, r8
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	4628      	mov	r0, r5
 80049f4:	464b      	mov	r3, r9
 80049f6:	910a      	str	r1, [sp, #40]	@ 0x28
 80049f8:	f7ff fed4 	bl	80047a4 <__cvt>
 80049fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80049fe:	4680      	mov	r8, r0
 8004a00:	2947      	cmp	r1, #71	@ 0x47
 8004a02:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004a04:	d128      	bne.n	8004a58 <_printf_float+0x178>
 8004a06:	1cc8      	adds	r0, r1, #3
 8004a08:	db02      	blt.n	8004a10 <_printf_float+0x130>
 8004a0a:	6863      	ldr	r3, [r4, #4]
 8004a0c:	4299      	cmp	r1, r3
 8004a0e:	dd40      	ble.n	8004a92 <_printf_float+0x1b2>
 8004a10:	f1aa 0a02 	sub.w	sl, sl, #2
 8004a14:	fa5f fa8a 	uxtb.w	sl, sl
 8004a18:	4652      	mov	r2, sl
 8004a1a:	3901      	subs	r1, #1
 8004a1c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004a20:	910d      	str	r1, [sp, #52]	@ 0x34
 8004a22:	f7ff ff23 	bl	800486c <__exponent>
 8004a26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004a28:	4681      	mov	r9, r0
 8004a2a:	1813      	adds	r3, r2, r0
 8004a2c:	2a01      	cmp	r2, #1
 8004a2e:	6123      	str	r3, [r4, #16]
 8004a30:	dc02      	bgt.n	8004a38 <_printf_float+0x158>
 8004a32:	6822      	ldr	r2, [r4, #0]
 8004a34:	07d2      	lsls	r2, r2, #31
 8004a36:	d501      	bpl.n	8004a3c <_printf_float+0x15c>
 8004a38:	3301      	adds	r3, #1
 8004a3a:	6123      	str	r3, [r4, #16]
 8004a3c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d09e      	beq.n	8004982 <_printf_float+0xa2>
 8004a44:	232d      	movs	r3, #45	@ 0x2d
 8004a46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a4a:	e79a      	b.n	8004982 <_printf_float+0xa2>
 8004a4c:	2947      	cmp	r1, #71	@ 0x47
 8004a4e:	d1bf      	bne.n	80049d0 <_printf_float+0xf0>
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1bd      	bne.n	80049d0 <_printf_float+0xf0>
 8004a54:	2301      	movs	r3, #1
 8004a56:	e7ba      	b.n	80049ce <_printf_float+0xee>
 8004a58:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004a5c:	d9dc      	bls.n	8004a18 <_printf_float+0x138>
 8004a5e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004a62:	d118      	bne.n	8004a96 <_printf_float+0x1b6>
 8004a64:	2900      	cmp	r1, #0
 8004a66:	6863      	ldr	r3, [r4, #4]
 8004a68:	dd0b      	ble.n	8004a82 <_printf_float+0x1a2>
 8004a6a:	6121      	str	r1, [r4, #16]
 8004a6c:	b913      	cbnz	r3, 8004a74 <_printf_float+0x194>
 8004a6e:	6822      	ldr	r2, [r4, #0]
 8004a70:	07d0      	lsls	r0, r2, #31
 8004a72:	d502      	bpl.n	8004a7a <_printf_float+0x19a>
 8004a74:	3301      	adds	r3, #1
 8004a76:	440b      	add	r3, r1
 8004a78:	6123      	str	r3, [r4, #16]
 8004a7a:	f04f 0900 	mov.w	r9, #0
 8004a7e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004a80:	e7dc      	b.n	8004a3c <_printf_float+0x15c>
 8004a82:	b913      	cbnz	r3, 8004a8a <_printf_float+0x1aa>
 8004a84:	6822      	ldr	r2, [r4, #0]
 8004a86:	07d2      	lsls	r2, r2, #31
 8004a88:	d501      	bpl.n	8004a8e <_printf_float+0x1ae>
 8004a8a:	3302      	adds	r3, #2
 8004a8c:	e7f4      	b.n	8004a78 <_printf_float+0x198>
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e7f2      	b.n	8004a78 <_printf_float+0x198>
 8004a92:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004a96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004a98:	4299      	cmp	r1, r3
 8004a9a:	db05      	blt.n	8004aa8 <_printf_float+0x1c8>
 8004a9c:	6823      	ldr	r3, [r4, #0]
 8004a9e:	6121      	str	r1, [r4, #16]
 8004aa0:	07d8      	lsls	r0, r3, #31
 8004aa2:	d5ea      	bpl.n	8004a7a <_printf_float+0x19a>
 8004aa4:	1c4b      	adds	r3, r1, #1
 8004aa6:	e7e7      	b.n	8004a78 <_printf_float+0x198>
 8004aa8:	2900      	cmp	r1, #0
 8004aaa:	bfcc      	ite	gt
 8004aac:	2201      	movgt	r2, #1
 8004aae:	f1c1 0202 	rsble	r2, r1, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	e7e0      	b.n	8004a78 <_printf_float+0x198>
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	055a      	lsls	r2, r3, #21
 8004aba:	d407      	bmi.n	8004acc <_printf_float+0x1ec>
 8004abc:	6923      	ldr	r3, [r4, #16]
 8004abe:	4642      	mov	r2, r8
 8004ac0:	4631      	mov	r1, r6
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	47b8      	blx	r7
 8004ac6:	3001      	adds	r0, #1
 8004ac8:	d12b      	bne.n	8004b22 <_printf_float+0x242>
 8004aca:	e764      	b.n	8004996 <_printf_float+0xb6>
 8004acc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004ad0:	f240 80dc 	bls.w	8004c8c <_printf_float+0x3ac>
 8004ad4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004ad8:	2200      	movs	r2, #0
 8004ada:	2300      	movs	r3, #0
 8004adc:	f7fb ff64 	bl	80009a8 <__aeabi_dcmpeq>
 8004ae0:	2800      	cmp	r0, #0
 8004ae2:	d033      	beq.n	8004b4c <_printf_float+0x26c>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	4631      	mov	r1, r6
 8004ae8:	4628      	mov	r0, r5
 8004aea:	4a35      	ldr	r2, [pc, #212]	@ (8004bc0 <_printf_float+0x2e0>)
 8004aec:	47b8      	blx	r7
 8004aee:	3001      	adds	r0, #1
 8004af0:	f43f af51 	beq.w	8004996 <_printf_float+0xb6>
 8004af4:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004af8:	4543      	cmp	r3, r8
 8004afa:	db02      	blt.n	8004b02 <_printf_float+0x222>
 8004afc:	6823      	ldr	r3, [r4, #0]
 8004afe:	07d8      	lsls	r0, r3, #31
 8004b00:	d50f      	bpl.n	8004b22 <_printf_float+0x242>
 8004b02:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004b06:	4631      	mov	r1, r6
 8004b08:	4628      	mov	r0, r5
 8004b0a:	47b8      	blx	r7
 8004b0c:	3001      	adds	r0, #1
 8004b0e:	f43f af42 	beq.w	8004996 <_printf_float+0xb6>
 8004b12:	f04f 0900 	mov.w	r9, #0
 8004b16:	f108 38ff 	add.w	r8, r8, #4294967295
 8004b1a:	f104 0a1a 	add.w	sl, r4, #26
 8004b1e:	45c8      	cmp	r8, r9
 8004b20:	dc09      	bgt.n	8004b36 <_printf_float+0x256>
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	079b      	lsls	r3, r3, #30
 8004b26:	f100 8102 	bmi.w	8004d2e <_printf_float+0x44e>
 8004b2a:	68e0      	ldr	r0, [r4, #12]
 8004b2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004b2e:	4298      	cmp	r0, r3
 8004b30:	bfb8      	it	lt
 8004b32:	4618      	movlt	r0, r3
 8004b34:	e731      	b.n	800499a <_printf_float+0xba>
 8004b36:	2301      	movs	r3, #1
 8004b38:	4652      	mov	r2, sl
 8004b3a:	4631      	mov	r1, r6
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	47b8      	blx	r7
 8004b40:	3001      	adds	r0, #1
 8004b42:	f43f af28 	beq.w	8004996 <_printf_float+0xb6>
 8004b46:	f109 0901 	add.w	r9, r9, #1
 8004b4a:	e7e8      	b.n	8004b1e <_printf_float+0x23e>
 8004b4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	dc38      	bgt.n	8004bc4 <_printf_float+0x2e4>
 8004b52:	2301      	movs	r3, #1
 8004b54:	4631      	mov	r1, r6
 8004b56:	4628      	mov	r0, r5
 8004b58:	4a19      	ldr	r2, [pc, #100]	@ (8004bc0 <_printf_float+0x2e0>)
 8004b5a:	47b8      	blx	r7
 8004b5c:	3001      	adds	r0, #1
 8004b5e:	f43f af1a 	beq.w	8004996 <_printf_float+0xb6>
 8004b62:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004b66:	ea59 0303 	orrs.w	r3, r9, r3
 8004b6a:	d102      	bne.n	8004b72 <_printf_float+0x292>
 8004b6c:	6823      	ldr	r3, [r4, #0]
 8004b6e:	07d9      	lsls	r1, r3, #31
 8004b70:	d5d7      	bpl.n	8004b22 <_printf_float+0x242>
 8004b72:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004b76:	4631      	mov	r1, r6
 8004b78:	4628      	mov	r0, r5
 8004b7a:	47b8      	blx	r7
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	f43f af0a 	beq.w	8004996 <_printf_float+0xb6>
 8004b82:	f04f 0a00 	mov.w	sl, #0
 8004b86:	f104 0b1a 	add.w	fp, r4, #26
 8004b8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004b8c:	425b      	negs	r3, r3
 8004b8e:	4553      	cmp	r3, sl
 8004b90:	dc01      	bgt.n	8004b96 <_printf_float+0x2b6>
 8004b92:	464b      	mov	r3, r9
 8004b94:	e793      	b.n	8004abe <_printf_float+0x1de>
 8004b96:	2301      	movs	r3, #1
 8004b98:	465a      	mov	r2, fp
 8004b9a:	4631      	mov	r1, r6
 8004b9c:	4628      	mov	r0, r5
 8004b9e:	47b8      	blx	r7
 8004ba0:	3001      	adds	r0, #1
 8004ba2:	f43f aef8 	beq.w	8004996 <_printf_float+0xb6>
 8004ba6:	f10a 0a01 	add.w	sl, sl, #1
 8004baa:	e7ee      	b.n	8004b8a <_printf_float+0x2aa>
 8004bac:	7fefffff 	.word	0x7fefffff
 8004bb0:	08008ed6 	.word	0x08008ed6
 8004bb4:	08008eda 	.word	0x08008eda
 8004bb8:	08008ede 	.word	0x08008ede
 8004bbc:	08008ee2 	.word	0x08008ee2
 8004bc0:	08008ee6 	.word	0x08008ee6
 8004bc4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004bc6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004bca:	4553      	cmp	r3, sl
 8004bcc:	bfa8      	it	ge
 8004bce:	4653      	movge	r3, sl
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	4699      	mov	r9, r3
 8004bd4:	dc36      	bgt.n	8004c44 <_printf_float+0x364>
 8004bd6:	f04f 0b00 	mov.w	fp, #0
 8004bda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004bde:	f104 021a 	add.w	r2, r4, #26
 8004be2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004be4:	930a      	str	r3, [sp, #40]	@ 0x28
 8004be6:	eba3 0309 	sub.w	r3, r3, r9
 8004bea:	455b      	cmp	r3, fp
 8004bec:	dc31      	bgt.n	8004c52 <_printf_float+0x372>
 8004bee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004bf0:	459a      	cmp	sl, r3
 8004bf2:	dc3a      	bgt.n	8004c6a <_printf_float+0x38a>
 8004bf4:	6823      	ldr	r3, [r4, #0]
 8004bf6:	07da      	lsls	r2, r3, #31
 8004bf8:	d437      	bmi.n	8004c6a <_printf_float+0x38a>
 8004bfa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004bfc:	ebaa 0903 	sub.w	r9, sl, r3
 8004c00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c02:	ebaa 0303 	sub.w	r3, sl, r3
 8004c06:	4599      	cmp	r9, r3
 8004c08:	bfa8      	it	ge
 8004c0a:	4699      	movge	r9, r3
 8004c0c:	f1b9 0f00 	cmp.w	r9, #0
 8004c10:	dc33      	bgt.n	8004c7a <_printf_float+0x39a>
 8004c12:	f04f 0800 	mov.w	r8, #0
 8004c16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c1a:	f104 0b1a 	add.w	fp, r4, #26
 8004c1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c20:	ebaa 0303 	sub.w	r3, sl, r3
 8004c24:	eba3 0309 	sub.w	r3, r3, r9
 8004c28:	4543      	cmp	r3, r8
 8004c2a:	f77f af7a 	ble.w	8004b22 <_printf_float+0x242>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	465a      	mov	r2, fp
 8004c32:	4631      	mov	r1, r6
 8004c34:	4628      	mov	r0, r5
 8004c36:	47b8      	blx	r7
 8004c38:	3001      	adds	r0, #1
 8004c3a:	f43f aeac 	beq.w	8004996 <_printf_float+0xb6>
 8004c3e:	f108 0801 	add.w	r8, r8, #1
 8004c42:	e7ec      	b.n	8004c1e <_printf_float+0x33e>
 8004c44:	4642      	mov	r2, r8
 8004c46:	4631      	mov	r1, r6
 8004c48:	4628      	mov	r0, r5
 8004c4a:	47b8      	blx	r7
 8004c4c:	3001      	adds	r0, #1
 8004c4e:	d1c2      	bne.n	8004bd6 <_printf_float+0x2f6>
 8004c50:	e6a1      	b.n	8004996 <_printf_float+0xb6>
 8004c52:	2301      	movs	r3, #1
 8004c54:	4631      	mov	r1, r6
 8004c56:	4628      	mov	r0, r5
 8004c58:	920a      	str	r2, [sp, #40]	@ 0x28
 8004c5a:	47b8      	blx	r7
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	f43f ae9a 	beq.w	8004996 <_printf_float+0xb6>
 8004c62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004c64:	f10b 0b01 	add.w	fp, fp, #1
 8004c68:	e7bb      	b.n	8004be2 <_printf_float+0x302>
 8004c6a:	4631      	mov	r1, r6
 8004c6c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004c70:	4628      	mov	r0, r5
 8004c72:	47b8      	blx	r7
 8004c74:	3001      	adds	r0, #1
 8004c76:	d1c0      	bne.n	8004bfa <_printf_float+0x31a>
 8004c78:	e68d      	b.n	8004996 <_printf_float+0xb6>
 8004c7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004c7c:	464b      	mov	r3, r9
 8004c7e:	4631      	mov	r1, r6
 8004c80:	4628      	mov	r0, r5
 8004c82:	4442      	add	r2, r8
 8004c84:	47b8      	blx	r7
 8004c86:	3001      	adds	r0, #1
 8004c88:	d1c3      	bne.n	8004c12 <_printf_float+0x332>
 8004c8a:	e684      	b.n	8004996 <_printf_float+0xb6>
 8004c8c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004c90:	f1ba 0f01 	cmp.w	sl, #1
 8004c94:	dc01      	bgt.n	8004c9a <_printf_float+0x3ba>
 8004c96:	07db      	lsls	r3, r3, #31
 8004c98:	d536      	bpl.n	8004d08 <_printf_float+0x428>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	4642      	mov	r2, r8
 8004c9e:	4631      	mov	r1, r6
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	47b8      	blx	r7
 8004ca4:	3001      	adds	r0, #1
 8004ca6:	f43f ae76 	beq.w	8004996 <_printf_float+0xb6>
 8004caa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004cae:	4631      	mov	r1, r6
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	47b8      	blx	r7
 8004cb4:	3001      	adds	r0, #1
 8004cb6:	f43f ae6e 	beq.w	8004996 <_printf_float+0xb6>
 8004cba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004cc6:	f7fb fe6f 	bl	80009a8 <__aeabi_dcmpeq>
 8004cca:	b9c0      	cbnz	r0, 8004cfe <_printf_float+0x41e>
 8004ccc:	4653      	mov	r3, sl
 8004cce:	f108 0201 	add.w	r2, r8, #1
 8004cd2:	4631      	mov	r1, r6
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	47b8      	blx	r7
 8004cd8:	3001      	adds	r0, #1
 8004cda:	d10c      	bne.n	8004cf6 <_printf_float+0x416>
 8004cdc:	e65b      	b.n	8004996 <_printf_float+0xb6>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	465a      	mov	r2, fp
 8004ce2:	4631      	mov	r1, r6
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	47b8      	blx	r7
 8004ce8:	3001      	adds	r0, #1
 8004cea:	f43f ae54 	beq.w	8004996 <_printf_float+0xb6>
 8004cee:	f108 0801 	add.w	r8, r8, #1
 8004cf2:	45d0      	cmp	r8, sl
 8004cf4:	dbf3      	blt.n	8004cde <_printf_float+0x3fe>
 8004cf6:	464b      	mov	r3, r9
 8004cf8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004cfc:	e6e0      	b.n	8004ac0 <_printf_float+0x1e0>
 8004cfe:	f04f 0800 	mov.w	r8, #0
 8004d02:	f104 0b1a 	add.w	fp, r4, #26
 8004d06:	e7f4      	b.n	8004cf2 <_printf_float+0x412>
 8004d08:	2301      	movs	r3, #1
 8004d0a:	4642      	mov	r2, r8
 8004d0c:	e7e1      	b.n	8004cd2 <_printf_float+0x3f2>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	464a      	mov	r2, r9
 8004d12:	4631      	mov	r1, r6
 8004d14:	4628      	mov	r0, r5
 8004d16:	47b8      	blx	r7
 8004d18:	3001      	adds	r0, #1
 8004d1a:	f43f ae3c 	beq.w	8004996 <_printf_float+0xb6>
 8004d1e:	f108 0801 	add.w	r8, r8, #1
 8004d22:	68e3      	ldr	r3, [r4, #12]
 8004d24:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004d26:	1a5b      	subs	r3, r3, r1
 8004d28:	4543      	cmp	r3, r8
 8004d2a:	dcf0      	bgt.n	8004d0e <_printf_float+0x42e>
 8004d2c:	e6fd      	b.n	8004b2a <_printf_float+0x24a>
 8004d2e:	f04f 0800 	mov.w	r8, #0
 8004d32:	f104 0919 	add.w	r9, r4, #25
 8004d36:	e7f4      	b.n	8004d22 <_printf_float+0x442>

08004d38 <_printf_common>:
 8004d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d3c:	4616      	mov	r6, r2
 8004d3e:	4698      	mov	r8, r3
 8004d40:	688a      	ldr	r2, [r1, #8]
 8004d42:	690b      	ldr	r3, [r1, #16]
 8004d44:	4607      	mov	r7, r0
 8004d46:	4293      	cmp	r3, r2
 8004d48:	bfb8      	it	lt
 8004d4a:	4613      	movlt	r3, r2
 8004d4c:	6033      	str	r3, [r6, #0]
 8004d4e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d52:	460c      	mov	r4, r1
 8004d54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d58:	b10a      	cbz	r2, 8004d5e <_printf_common+0x26>
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	6033      	str	r3, [r6, #0]
 8004d5e:	6823      	ldr	r3, [r4, #0]
 8004d60:	0699      	lsls	r1, r3, #26
 8004d62:	bf42      	ittt	mi
 8004d64:	6833      	ldrmi	r3, [r6, #0]
 8004d66:	3302      	addmi	r3, #2
 8004d68:	6033      	strmi	r3, [r6, #0]
 8004d6a:	6825      	ldr	r5, [r4, #0]
 8004d6c:	f015 0506 	ands.w	r5, r5, #6
 8004d70:	d106      	bne.n	8004d80 <_printf_common+0x48>
 8004d72:	f104 0a19 	add.w	sl, r4, #25
 8004d76:	68e3      	ldr	r3, [r4, #12]
 8004d78:	6832      	ldr	r2, [r6, #0]
 8004d7a:	1a9b      	subs	r3, r3, r2
 8004d7c:	42ab      	cmp	r3, r5
 8004d7e:	dc2b      	bgt.n	8004dd8 <_printf_common+0xa0>
 8004d80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d84:	6822      	ldr	r2, [r4, #0]
 8004d86:	3b00      	subs	r3, #0
 8004d88:	bf18      	it	ne
 8004d8a:	2301      	movne	r3, #1
 8004d8c:	0692      	lsls	r2, r2, #26
 8004d8e:	d430      	bmi.n	8004df2 <_printf_common+0xba>
 8004d90:	4641      	mov	r1, r8
 8004d92:	4638      	mov	r0, r7
 8004d94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d98:	47c8      	blx	r9
 8004d9a:	3001      	adds	r0, #1
 8004d9c:	d023      	beq.n	8004de6 <_printf_common+0xae>
 8004d9e:	6823      	ldr	r3, [r4, #0]
 8004da0:	6922      	ldr	r2, [r4, #16]
 8004da2:	f003 0306 	and.w	r3, r3, #6
 8004da6:	2b04      	cmp	r3, #4
 8004da8:	bf14      	ite	ne
 8004daa:	2500      	movne	r5, #0
 8004dac:	6833      	ldreq	r3, [r6, #0]
 8004dae:	f04f 0600 	mov.w	r6, #0
 8004db2:	bf08      	it	eq
 8004db4:	68e5      	ldreq	r5, [r4, #12]
 8004db6:	f104 041a 	add.w	r4, r4, #26
 8004dba:	bf08      	it	eq
 8004dbc:	1aed      	subeq	r5, r5, r3
 8004dbe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004dc2:	bf08      	it	eq
 8004dc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	bfc4      	itt	gt
 8004dcc:	1a9b      	subgt	r3, r3, r2
 8004dce:	18ed      	addgt	r5, r5, r3
 8004dd0:	42b5      	cmp	r5, r6
 8004dd2:	d11a      	bne.n	8004e0a <_printf_common+0xd2>
 8004dd4:	2000      	movs	r0, #0
 8004dd6:	e008      	b.n	8004dea <_printf_common+0xb2>
 8004dd8:	2301      	movs	r3, #1
 8004dda:	4652      	mov	r2, sl
 8004ddc:	4641      	mov	r1, r8
 8004dde:	4638      	mov	r0, r7
 8004de0:	47c8      	blx	r9
 8004de2:	3001      	adds	r0, #1
 8004de4:	d103      	bne.n	8004dee <_printf_common+0xb6>
 8004de6:	f04f 30ff 	mov.w	r0, #4294967295
 8004dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dee:	3501      	adds	r5, #1
 8004df0:	e7c1      	b.n	8004d76 <_printf_common+0x3e>
 8004df2:	2030      	movs	r0, #48	@ 0x30
 8004df4:	18e1      	adds	r1, r4, r3
 8004df6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004dfa:	1c5a      	adds	r2, r3, #1
 8004dfc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e00:	4422      	add	r2, r4
 8004e02:	3302      	adds	r3, #2
 8004e04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e08:	e7c2      	b.n	8004d90 <_printf_common+0x58>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	4622      	mov	r2, r4
 8004e0e:	4641      	mov	r1, r8
 8004e10:	4638      	mov	r0, r7
 8004e12:	47c8      	blx	r9
 8004e14:	3001      	adds	r0, #1
 8004e16:	d0e6      	beq.n	8004de6 <_printf_common+0xae>
 8004e18:	3601      	adds	r6, #1
 8004e1a:	e7d9      	b.n	8004dd0 <_printf_common+0x98>

08004e1c <_printf_i>:
 8004e1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e20:	7e0f      	ldrb	r7, [r1, #24]
 8004e22:	4691      	mov	r9, r2
 8004e24:	2f78      	cmp	r7, #120	@ 0x78
 8004e26:	4680      	mov	r8, r0
 8004e28:	460c      	mov	r4, r1
 8004e2a:	469a      	mov	sl, r3
 8004e2c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e32:	d807      	bhi.n	8004e44 <_printf_i+0x28>
 8004e34:	2f62      	cmp	r7, #98	@ 0x62
 8004e36:	d80a      	bhi.n	8004e4e <_printf_i+0x32>
 8004e38:	2f00      	cmp	r7, #0
 8004e3a:	f000 80d3 	beq.w	8004fe4 <_printf_i+0x1c8>
 8004e3e:	2f58      	cmp	r7, #88	@ 0x58
 8004e40:	f000 80ba 	beq.w	8004fb8 <_printf_i+0x19c>
 8004e44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e4c:	e03a      	b.n	8004ec4 <_printf_i+0xa8>
 8004e4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e52:	2b15      	cmp	r3, #21
 8004e54:	d8f6      	bhi.n	8004e44 <_printf_i+0x28>
 8004e56:	a101      	add	r1, pc, #4	@ (adr r1, 8004e5c <_printf_i+0x40>)
 8004e58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e5c:	08004eb5 	.word	0x08004eb5
 8004e60:	08004ec9 	.word	0x08004ec9
 8004e64:	08004e45 	.word	0x08004e45
 8004e68:	08004e45 	.word	0x08004e45
 8004e6c:	08004e45 	.word	0x08004e45
 8004e70:	08004e45 	.word	0x08004e45
 8004e74:	08004ec9 	.word	0x08004ec9
 8004e78:	08004e45 	.word	0x08004e45
 8004e7c:	08004e45 	.word	0x08004e45
 8004e80:	08004e45 	.word	0x08004e45
 8004e84:	08004e45 	.word	0x08004e45
 8004e88:	08004fcb 	.word	0x08004fcb
 8004e8c:	08004ef3 	.word	0x08004ef3
 8004e90:	08004f85 	.word	0x08004f85
 8004e94:	08004e45 	.word	0x08004e45
 8004e98:	08004e45 	.word	0x08004e45
 8004e9c:	08004fed 	.word	0x08004fed
 8004ea0:	08004e45 	.word	0x08004e45
 8004ea4:	08004ef3 	.word	0x08004ef3
 8004ea8:	08004e45 	.word	0x08004e45
 8004eac:	08004e45 	.word	0x08004e45
 8004eb0:	08004f8d 	.word	0x08004f8d
 8004eb4:	6833      	ldr	r3, [r6, #0]
 8004eb6:	1d1a      	adds	r2, r3, #4
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6032      	str	r2, [r6, #0]
 8004ebc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ec0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e09e      	b.n	8005006 <_printf_i+0x1ea>
 8004ec8:	6833      	ldr	r3, [r6, #0]
 8004eca:	6820      	ldr	r0, [r4, #0]
 8004ecc:	1d19      	adds	r1, r3, #4
 8004ece:	6031      	str	r1, [r6, #0]
 8004ed0:	0606      	lsls	r6, r0, #24
 8004ed2:	d501      	bpl.n	8004ed8 <_printf_i+0xbc>
 8004ed4:	681d      	ldr	r5, [r3, #0]
 8004ed6:	e003      	b.n	8004ee0 <_printf_i+0xc4>
 8004ed8:	0645      	lsls	r5, r0, #25
 8004eda:	d5fb      	bpl.n	8004ed4 <_printf_i+0xb8>
 8004edc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ee0:	2d00      	cmp	r5, #0
 8004ee2:	da03      	bge.n	8004eec <_printf_i+0xd0>
 8004ee4:	232d      	movs	r3, #45	@ 0x2d
 8004ee6:	426d      	negs	r5, r5
 8004ee8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004eec:	230a      	movs	r3, #10
 8004eee:	4859      	ldr	r0, [pc, #356]	@ (8005054 <_printf_i+0x238>)
 8004ef0:	e011      	b.n	8004f16 <_printf_i+0xfa>
 8004ef2:	6821      	ldr	r1, [r4, #0]
 8004ef4:	6833      	ldr	r3, [r6, #0]
 8004ef6:	0608      	lsls	r0, r1, #24
 8004ef8:	f853 5b04 	ldr.w	r5, [r3], #4
 8004efc:	d402      	bmi.n	8004f04 <_printf_i+0xe8>
 8004efe:	0649      	lsls	r1, r1, #25
 8004f00:	bf48      	it	mi
 8004f02:	b2ad      	uxthmi	r5, r5
 8004f04:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f06:	6033      	str	r3, [r6, #0]
 8004f08:	bf14      	ite	ne
 8004f0a:	230a      	movne	r3, #10
 8004f0c:	2308      	moveq	r3, #8
 8004f0e:	4851      	ldr	r0, [pc, #324]	@ (8005054 <_printf_i+0x238>)
 8004f10:	2100      	movs	r1, #0
 8004f12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f16:	6866      	ldr	r6, [r4, #4]
 8004f18:	2e00      	cmp	r6, #0
 8004f1a:	bfa8      	it	ge
 8004f1c:	6821      	ldrge	r1, [r4, #0]
 8004f1e:	60a6      	str	r6, [r4, #8]
 8004f20:	bfa4      	itt	ge
 8004f22:	f021 0104 	bicge.w	r1, r1, #4
 8004f26:	6021      	strge	r1, [r4, #0]
 8004f28:	b90d      	cbnz	r5, 8004f2e <_printf_i+0x112>
 8004f2a:	2e00      	cmp	r6, #0
 8004f2c:	d04b      	beq.n	8004fc6 <_printf_i+0x1aa>
 8004f2e:	4616      	mov	r6, r2
 8004f30:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f34:	fb03 5711 	mls	r7, r3, r1, r5
 8004f38:	5dc7      	ldrb	r7, [r0, r7]
 8004f3a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f3e:	462f      	mov	r7, r5
 8004f40:	42bb      	cmp	r3, r7
 8004f42:	460d      	mov	r5, r1
 8004f44:	d9f4      	bls.n	8004f30 <_printf_i+0x114>
 8004f46:	2b08      	cmp	r3, #8
 8004f48:	d10b      	bne.n	8004f62 <_printf_i+0x146>
 8004f4a:	6823      	ldr	r3, [r4, #0]
 8004f4c:	07df      	lsls	r7, r3, #31
 8004f4e:	d508      	bpl.n	8004f62 <_printf_i+0x146>
 8004f50:	6923      	ldr	r3, [r4, #16]
 8004f52:	6861      	ldr	r1, [r4, #4]
 8004f54:	4299      	cmp	r1, r3
 8004f56:	bfde      	ittt	le
 8004f58:	2330      	movle	r3, #48	@ 0x30
 8004f5a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f5e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f62:	1b92      	subs	r2, r2, r6
 8004f64:	6122      	str	r2, [r4, #16]
 8004f66:	464b      	mov	r3, r9
 8004f68:	4621      	mov	r1, r4
 8004f6a:	4640      	mov	r0, r8
 8004f6c:	f8cd a000 	str.w	sl, [sp]
 8004f70:	aa03      	add	r2, sp, #12
 8004f72:	f7ff fee1 	bl	8004d38 <_printf_common>
 8004f76:	3001      	adds	r0, #1
 8004f78:	d14a      	bne.n	8005010 <_printf_i+0x1f4>
 8004f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f7e:	b004      	add	sp, #16
 8004f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	f043 0320 	orr.w	r3, r3, #32
 8004f8a:	6023      	str	r3, [r4, #0]
 8004f8c:	2778      	movs	r7, #120	@ 0x78
 8004f8e:	4832      	ldr	r0, [pc, #200]	@ (8005058 <_printf_i+0x23c>)
 8004f90:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f94:	6823      	ldr	r3, [r4, #0]
 8004f96:	6831      	ldr	r1, [r6, #0]
 8004f98:	061f      	lsls	r7, r3, #24
 8004f9a:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f9e:	d402      	bmi.n	8004fa6 <_printf_i+0x18a>
 8004fa0:	065f      	lsls	r7, r3, #25
 8004fa2:	bf48      	it	mi
 8004fa4:	b2ad      	uxthmi	r5, r5
 8004fa6:	6031      	str	r1, [r6, #0]
 8004fa8:	07d9      	lsls	r1, r3, #31
 8004faa:	bf44      	itt	mi
 8004fac:	f043 0320 	orrmi.w	r3, r3, #32
 8004fb0:	6023      	strmi	r3, [r4, #0]
 8004fb2:	b11d      	cbz	r5, 8004fbc <_printf_i+0x1a0>
 8004fb4:	2310      	movs	r3, #16
 8004fb6:	e7ab      	b.n	8004f10 <_printf_i+0xf4>
 8004fb8:	4826      	ldr	r0, [pc, #152]	@ (8005054 <_printf_i+0x238>)
 8004fba:	e7e9      	b.n	8004f90 <_printf_i+0x174>
 8004fbc:	6823      	ldr	r3, [r4, #0]
 8004fbe:	f023 0320 	bic.w	r3, r3, #32
 8004fc2:	6023      	str	r3, [r4, #0]
 8004fc4:	e7f6      	b.n	8004fb4 <_printf_i+0x198>
 8004fc6:	4616      	mov	r6, r2
 8004fc8:	e7bd      	b.n	8004f46 <_printf_i+0x12a>
 8004fca:	6833      	ldr	r3, [r6, #0]
 8004fcc:	6825      	ldr	r5, [r4, #0]
 8004fce:	1d18      	adds	r0, r3, #4
 8004fd0:	6961      	ldr	r1, [r4, #20]
 8004fd2:	6030      	str	r0, [r6, #0]
 8004fd4:	062e      	lsls	r6, r5, #24
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	d501      	bpl.n	8004fde <_printf_i+0x1c2>
 8004fda:	6019      	str	r1, [r3, #0]
 8004fdc:	e002      	b.n	8004fe4 <_printf_i+0x1c8>
 8004fde:	0668      	lsls	r0, r5, #25
 8004fe0:	d5fb      	bpl.n	8004fda <_printf_i+0x1be>
 8004fe2:	8019      	strh	r1, [r3, #0]
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	4616      	mov	r6, r2
 8004fe8:	6123      	str	r3, [r4, #16]
 8004fea:	e7bc      	b.n	8004f66 <_printf_i+0x14a>
 8004fec:	6833      	ldr	r3, [r6, #0]
 8004fee:	2100      	movs	r1, #0
 8004ff0:	1d1a      	adds	r2, r3, #4
 8004ff2:	6032      	str	r2, [r6, #0]
 8004ff4:	681e      	ldr	r6, [r3, #0]
 8004ff6:	6862      	ldr	r2, [r4, #4]
 8004ff8:	4630      	mov	r0, r6
 8004ffa:	f000 fbf6 	bl	80057ea <memchr>
 8004ffe:	b108      	cbz	r0, 8005004 <_printf_i+0x1e8>
 8005000:	1b80      	subs	r0, r0, r6
 8005002:	6060      	str	r0, [r4, #4]
 8005004:	6863      	ldr	r3, [r4, #4]
 8005006:	6123      	str	r3, [r4, #16]
 8005008:	2300      	movs	r3, #0
 800500a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800500e:	e7aa      	b.n	8004f66 <_printf_i+0x14a>
 8005010:	4632      	mov	r2, r6
 8005012:	4649      	mov	r1, r9
 8005014:	4640      	mov	r0, r8
 8005016:	6923      	ldr	r3, [r4, #16]
 8005018:	47d0      	blx	sl
 800501a:	3001      	adds	r0, #1
 800501c:	d0ad      	beq.n	8004f7a <_printf_i+0x15e>
 800501e:	6823      	ldr	r3, [r4, #0]
 8005020:	079b      	lsls	r3, r3, #30
 8005022:	d413      	bmi.n	800504c <_printf_i+0x230>
 8005024:	68e0      	ldr	r0, [r4, #12]
 8005026:	9b03      	ldr	r3, [sp, #12]
 8005028:	4298      	cmp	r0, r3
 800502a:	bfb8      	it	lt
 800502c:	4618      	movlt	r0, r3
 800502e:	e7a6      	b.n	8004f7e <_printf_i+0x162>
 8005030:	2301      	movs	r3, #1
 8005032:	4632      	mov	r2, r6
 8005034:	4649      	mov	r1, r9
 8005036:	4640      	mov	r0, r8
 8005038:	47d0      	blx	sl
 800503a:	3001      	adds	r0, #1
 800503c:	d09d      	beq.n	8004f7a <_printf_i+0x15e>
 800503e:	3501      	adds	r5, #1
 8005040:	68e3      	ldr	r3, [r4, #12]
 8005042:	9903      	ldr	r1, [sp, #12]
 8005044:	1a5b      	subs	r3, r3, r1
 8005046:	42ab      	cmp	r3, r5
 8005048:	dcf2      	bgt.n	8005030 <_printf_i+0x214>
 800504a:	e7eb      	b.n	8005024 <_printf_i+0x208>
 800504c:	2500      	movs	r5, #0
 800504e:	f104 0619 	add.w	r6, r4, #25
 8005052:	e7f5      	b.n	8005040 <_printf_i+0x224>
 8005054:	08008ee8 	.word	0x08008ee8
 8005058:	08008ef9 	.word	0x08008ef9

0800505c <_scanf_float>:
 800505c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005060:	b087      	sub	sp, #28
 8005062:	9303      	str	r3, [sp, #12]
 8005064:	688b      	ldr	r3, [r1, #8]
 8005066:	4617      	mov	r7, r2
 8005068:	1e5a      	subs	r2, r3, #1
 800506a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800506e:	bf82      	ittt	hi
 8005070:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005074:	eb03 0b05 	addhi.w	fp, r3, r5
 8005078:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800507c:	460a      	mov	r2, r1
 800507e:	f04f 0500 	mov.w	r5, #0
 8005082:	bf88      	it	hi
 8005084:	608b      	strhi	r3, [r1, #8]
 8005086:	680b      	ldr	r3, [r1, #0]
 8005088:	4680      	mov	r8, r0
 800508a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800508e:	f842 3b1c 	str.w	r3, [r2], #28
 8005092:	460c      	mov	r4, r1
 8005094:	bf98      	it	ls
 8005096:	f04f 0b00 	movls.w	fp, #0
 800509a:	4616      	mov	r6, r2
 800509c:	46aa      	mov	sl, r5
 800509e:	46a9      	mov	r9, r5
 80050a0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80050a4:	9201      	str	r2, [sp, #4]
 80050a6:	9502      	str	r5, [sp, #8]
 80050a8:	68a2      	ldr	r2, [r4, #8]
 80050aa:	b152      	cbz	r2, 80050c2 <_scanf_float+0x66>
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	2b4e      	cmp	r3, #78	@ 0x4e
 80050b2:	d865      	bhi.n	8005180 <_scanf_float+0x124>
 80050b4:	2b40      	cmp	r3, #64	@ 0x40
 80050b6:	d83d      	bhi.n	8005134 <_scanf_float+0xd8>
 80050b8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80050bc:	b2c8      	uxtb	r0, r1
 80050be:	280e      	cmp	r0, #14
 80050c0:	d93b      	bls.n	800513a <_scanf_float+0xde>
 80050c2:	f1b9 0f00 	cmp.w	r9, #0
 80050c6:	d003      	beq.n	80050d0 <_scanf_float+0x74>
 80050c8:	6823      	ldr	r3, [r4, #0]
 80050ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050ce:	6023      	str	r3, [r4, #0]
 80050d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050d4:	f1ba 0f01 	cmp.w	sl, #1
 80050d8:	f200 8118 	bhi.w	800530c <_scanf_float+0x2b0>
 80050dc:	9b01      	ldr	r3, [sp, #4]
 80050de:	429e      	cmp	r6, r3
 80050e0:	f200 8109 	bhi.w	80052f6 <_scanf_float+0x29a>
 80050e4:	2001      	movs	r0, #1
 80050e6:	b007      	add	sp, #28
 80050e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ec:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80050f0:	2a0d      	cmp	r2, #13
 80050f2:	d8e6      	bhi.n	80050c2 <_scanf_float+0x66>
 80050f4:	a101      	add	r1, pc, #4	@ (adr r1, 80050fc <_scanf_float+0xa0>)
 80050f6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80050fa:	bf00      	nop
 80050fc:	08005243 	.word	0x08005243
 8005100:	080050c3 	.word	0x080050c3
 8005104:	080050c3 	.word	0x080050c3
 8005108:	080050c3 	.word	0x080050c3
 800510c:	080052a3 	.word	0x080052a3
 8005110:	0800527b 	.word	0x0800527b
 8005114:	080050c3 	.word	0x080050c3
 8005118:	080050c3 	.word	0x080050c3
 800511c:	08005251 	.word	0x08005251
 8005120:	080050c3 	.word	0x080050c3
 8005124:	080050c3 	.word	0x080050c3
 8005128:	080050c3 	.word	0x080050c3
 800512c:	080050c3 	.word	0x080050c3
 8005130:	08005209 	.word	0x08005209
 8005134:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005138:	e7da      	b.n	80050f0 <_scanf_float+0x94>
 800513a:	290e      	cmp	r1, #14
 800513c:	d8c1      	bhi.n	80050c2 <_scanf_float+0x66>
 800513e:	a001      	add	r0, pc, #4	@ (adr r0, 8005144 <_scanf_float+0xe8>)
 8005140:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005144:	080051f9 	.word	0x080051f9
 8005148:	080050c3 	.word	0x080050c3
 800514c:	080051f9 	.word	0x080051f9
 8005150:	0800528f 	.word	0x0800528f
 8005154:	080050c3 	.word	0x080050c3
 8005158:	080051a1 	.word	0x080051a1
 800515c:	080051df 	.word	0x080051df
 8005160:	080051df 	.word	0x080051df
 8005164:	080051df 	.word	0x080051df
 8005168:	080051df 	.word	0x080051df
 800516c:	080051df 	.word	0x080051df
 8005170:	080051df 	.word	0x080051df
 8005174:	080051df 	.word	0x080051df
 8005178:	080051df 	.word	0x080051df
 800517c:	080051df 	.word	0x080051df
 8005180:	2b6e      	cmp	r3, #110	@ 0x6e
 8005182:	d809      	bhi.n	8005198 <_scanf_float+0x13c>
 8005184:	2b60      	cmp	r3, #96	@ 0x60
 8005186:	d8b1      	bhi.n	80050ec <_scanf_float+0x90>
 8005188:	2b54      	cmp	r3, #84	@ 0x54
 800518a:	d07b      	beq.n	8005284 <_scanf_float+0x228>
 800518c:	2b59      	cmp	r3, #89	@ 0x59
 800518e:	d198      	bne.n	80050c2 <_scanf_float+0x66>
 8005190:	2d07      	cmp	r5, #7
 8005192:	d196      	bne.n	80050c2 <_scanf_float+0x66>
 8005194:	2508      	movs	r5, #8
 8005196:	e02c      	b.n	80051f2 <_scanf_float+0x196>
 8005198:	2b74      	cmp	r3, #116	@ 0x74
 800519a:	d073      	beq.n	8005284 <_scanf_float+0x228>
 800519c:	2b79      	cmp	r3, #121	@ 0x79
 800519e:	e7f6      	b.n	800518e <_scanf_float+0x132>
 80051a0:	6821      	ldr	r1, [r4, #0]
 80051a2:	05c8      	lsls	r0, r1, #23
 80051a4:	d51b      	bpl.n	80051de <_scanf_float+0x182>
 80051a6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80051aa:	6021      	str	r1, [r4, #0]
 80051ac:	f109 0901 	add.w	r9, r9, #1
 80051b0:	f1bb 0f00 	cmp.w	fp, #0
 80051b4:	d003      	beq.n	80051be <_scanf_float+0x162>
 80051b6:	3201      	adds	r2, #1
 80051b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80051bc:	60a2      	str	r2, [r4, #8]
 80051be:	68a3      	ldr	r3, [r4, #8]
 80051c0:	3b01      	subs	r3, #1
 80051c2:	60a3      	str	r3, [r4, #8]
 80051c4:	6923      	ldr	r3, [r4, #16]
 80051c6:	3301      	adds	r3, #1
 80051c8:	6123      	str	r3, [r4, #16]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	3b01      	subs	r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	607b      	str	r3, [r7, #4]
 80051d2:	f340 8087 	ble.w	80052e4 <_scanf_float+0x288>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	3301      	adds	r3, #1
 80051da:	603b      	str	r3, [r7, #0]
 80051dc:	e764      	b.n	80050a8 <_scanf_float+0x4c>
 80051de:	eb1a 0105 	adds.w	r1, sl, r5
 80051e2:	f47f af6e 	bne.w	80050c2 <_scanf_float+0x66>
 80051e6:	460d      	mov	r5, r1
 80051e8:	468a      	mov	sl, r1
 80051ea:	6822      	ldr	r2, [r4, #0]
 80051ec:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80051f0:	6022      	str	r2, [r4, #0]
 80051f2:	f806 3b01 	strb.w	r3, [r6], #1
 80051f6:	e7e2      	b.n	80051be <_scanf_float+0x162>
 80051f8:	6822      	ldr	r2, [r4, #0]
 80051fa:	0610      	lsls	r0, r2, #24
 80051fc:	f57f af61 	bpl.w	80050c2 <_scanf_float+0x66>
 8005200:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005204:	6022      	str	r2, [r4, #0]
 8005206:	e7f4      	b.n	80051f2 <_scanf_float+0x196>
 8005208:	f1ba 0f00 	cmp.w	sl, #0
 800520c:	d10e      	bne.n	800522c <_scanf_float+0x1d0>
 800520e:	f1b9 0f00 	cmp.w	r9, #0
 8005212:	d10e      	bne.n	8005232 <_scanf_float+0x1d6>
 8005214:	6822      	ldr	r2, [r4, #0]
 8005216:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800521a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800521e:	d108      	bne.n	8005232 <_scanf_float+0x1d6>
 8005220:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005224:	f04f 0a01 	mov.w	sl, #1
 8005228:	6022      	str	r2, [r4, #0]
 800522a:	e7e2      	b.n	80051f2 <_scanf_float+0x196>
 800522c:	f1ba 0f02 	cmp.w	sl, #2
 8005230:	d055      	beq.n	80052de <_scanf_float+0x282>
 8005232:	2d01      	cmp	r5, #1
 8005234:	d002      	beq.n	800523c <_scanf_float+0x1e0>
 8005236:	2d04      	cmp	r5, #4
 8005238:	f47f af43 	bne.w	80050c2 <_scanf_float+0x66>
 800523c:	3501      	adds	r5, #1
 800523e:	b2ed      	uxtb	r5, r5
 8005240:	e7d7      	b.n	80051f2 <_scanf_float+0x196>
 8005242:	f1ba 0f01 	cmp.w	sl, #1
 8005246:	f47f af3c 	bne.w	80050c2 <_scanf_float+0x66>
 800524a:	f04f 0a02 	mov.w	sl, #2
 800524e:	e7d0      	b.n	80051f2 <_scanf_float+0x196>
 8005250:	b97d      	cbnz	r5, 8005272 <_scanf_float+0x216>
 8005252:	f1b9 0f00 	cmp.w	r9, #0
 8005256:	f47f af37 	bne.w	80050c8 <_scanf_float+0x6c>
 800525a:	6822      	ldr	r2, [r4, #0]
 800525c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005260:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005264:	f040 8103 	bne.w	800546e <_scanf_float+0x412>
 8005268:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800526c:	2501      	movs	r5, #1
 800526e:	6022      	str	r2, [r4, #0]
 8005270:	e7bf      	b.n	80051f2 <_scanf_float+0x196>
 8005272:	2d03      	cmp	r5, #3
 8005274:	d0e2      	beq.n	800523c <_scanf_float+0x1e0>
 8005276:	2d05      	cmp	r5, #5
 8005278:	e7de      	b.n	8005238 <_scanf_float+0x1dc>
 800527a:	2d02      	cmp	r5, #2
 800527c:	f47f af21 	bne.w	80050c2 <_scanf_float+0x66>
 8005280:	2503      	movs	r5, #3
 8005282:	e7b6      	b.n	80051f2 <_scanf_float+0x196>
 8005284:	2d06      	cmp	r5, #6
 8005286:	f47f af1c 	bne.w	80050c2 <_scanf_float+0x66>
 800528a:	2507      	movs	r5, #7
 800528c:	e7b1      	b.n	80051f2 <_scanf_float+0x196>
 800528e:	6822      	ldr	r2, [r4, #0]
 8005290:	0591      	lsls	r1, r2, #22
 8005292:	f57f af16 	bpl.w	80050c2 <_scanf_float+0x66>
 8005296:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800529a:	6022      	str	r2, [r4, #0]
 800529c:	f8cd 9008 	str.w	r9, [sp, #8]
 80052a0:	e7a7      	b.n	80051f2 <_scanf_float+0x196>
 80052a2:	6822      	ldr	r2, [r4, #0]
 80052a4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80052a8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80052ac:	d006      	beq.n	80052bc <_scanf_float+0x260>
 80052ae:	0550      	lsls	r0, r2, #21
 80052b0:	f57f af07 	bpl.w	80050c2 <_scanf_float+0x66>
 80052b4:	f1b9 0f00 	cmp.w	r9, #0
 80052b8:	f000 80d9 	beq.w	800546e <_scanf_float+0x412>
 80052bc:	0591      	lsls	r1, r2, #22
 80052be:	bf58      	it	pl
 80052c0:	9902      	ldrpl	r1, [sp, #8]
 80052c2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80052c6:	bf58      	it	pl
 80052c8:	eba9 0101 	subpl.w	r1, r9, r1
 80052cc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80052d0:	f04f 0900 	mov.w	r9, #0
 80052d4:	bf58      	it	pl
 80052d6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80052da:	6022      	str	r2, [r4, #0]
 80052dc:	e789      	b.n	80051f2 <_scanf_float+0x196>
 80052de:	f04f 0a03 	mov.w	sl, #3
 80052e2:	e786      	b.n	80051f2 <_scanf_float+0x196>
 80052e4:	4639      	mov	r1, r7
 80052e6:	4640      	mov	r0, r8
 80052e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80052ec:	4798      	blx	r3
 80052ee:	2800      	cmp	r0, #0
 80052f0:	f43f aeda 	beq.w	80050a8 <_scanf_float+0x4c>
 80052f4:	e6e5      	b.n	80050c2 <_scanf_float+0x66>
 80052f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80052fa:	463a      	mov	r2, r7
 80052fc:	4640      	mov	r0, r8
 80052fe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005302:	4798      	blx	r3
 8005304:	6923      	ldr	r3, [r4, #16]
 8005306:	3b01      	subs	r3, #1
 8005308:	6123      	str	r3, [r4, #16]
 800530a:	e6e7      	b.n	80050dc <_scanf_float+0x80>
 800530c:	1e6b      	subs	r3, r5, #1
 800530e:	2b06      	cmp	r3, #6
 8005310:	d824      	bhi.n	800535c <_scanf_float+0x300>
 8005312:	2d02      	cmp	r5, #2
 8005314:	d836      	bhi.n	8005384 <_scanf_float+0x328>
 8005316:	9b01      	ldr	r3, [sp, #4]
 8005318:	429e      	cmp	r6, r3
 800531a:	f67f aee3 	bls.w	80050e4 <_scanf_float+0x88>
 800531e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005322:	463a      	mov	r2, r7
 8005324:	4640      	mov	r0, r8
 8005326:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800532a:	4798      	blx	r3
 800532c:	6923      	ldr	r3, [r4, #16]
 800532e:	3b01      	subs	r3, #1
 8005330:	6123      	str	r3, [r4, #16]
 8005332:	e7f0      	b.n	8005316 <_scanf_float+0x2ba>
 8005334:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005338:	463a      	mov	r2, r7
 800533a:	4640      	mov	r0, r8
 800533c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005340:	4798      	blx	r3
 8005342:	6923      	ldr	r3, [r4, #16]
 8005344:	3b01      	subs	r3, #1
 8005346:	6123      	str	r3, [r4, #16]
 8005348:	f10a 3aff 	add.w	sl, sl, #4294967295
 800534c:	fa5f fa8a 	uxtb.w	sl, sl
 8005350:	f1ba 0f02 	cmp.w	sl, #2
 8005354:	d1ee      	bne.n	8005334 <_scanf_float+0x2d8>
 8005356:	3d03      	subs	r5, #3
 8005358:	b2ed      	uxtb	r5, r5
 800535a:	1b76      	subs	r6, r6, r5
 800535c:	6823      	ldr	r3, [r4, #0]
 800535e:	05da      	lsls	r2, r3, #23
 8005360:	d530      	bpl.n	80053c4 <_scanf_float+0x368>
 8005362:	055b      	lsls	r3, r3, #21
 8005364:	d511      	bpl.n	800538a <_scanf_float+0x32e>
 8005366:	9b01      	ldr	r3, [sp, #4]
 8005368:	429e      	cmp	r6, r3
 800536a:	f67f aebb 	bls.w	80050e4 <_scanf_float+0x88>
 800536e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005372:	463a      	mov	r2, r7
 8005374:	4640      	mov	r0, r8
 8005376:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800537a:	4798      	blx	r3
 800537c:	6923      	ldr	r3, [r4, #16]
 800537e:	3b01      	subs	r3, #1
 8005380:	6123      	str	r3, [r4, #16]
 8005382:	e7f0      	b.n	8005366 <_scanf_float+0x30a>
 8005384:	46aa      	mov	sl, r5
 8005386:	46b3      	mov	fp, r6
 8005388:	e7de      	b.n	8005348 <_scanf_float+0x2ec>
 800538a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800538e:	6923      	ldr	r3, [r4, #16]
 8005390:	2965      	cmp	r1, #101	@ 0x65
 8005392:	f103 33ff 	add.w	r3, r3, #4294967295
 8005396:	f106 35ff 	add.w	r5, r6, #4294967295
 800539a:	6123      	str	r3, [r4, #16]
 800539c:	d00c      	beq.n	80053b8 <_scanf_float+0x35c>
 800539e:	2945      	cmp	r1, #69	@ 0x45
 80053a0:	d00a      	beq.n	80053b8 <_scanf_float+0x35c>
 80053a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80053a6:	463a      	mov	r2, r7
 80053a8:	4640      	mov	r0, r8
 80053aa:	4798      	blx	r3
 80053ac:	6923      	ldr	r3, [r4, #16]
 80053ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80053b2:	3b01      	subs	r3, #1
 80053b4:	1eb5      	subs	r5, r6, #2
 80053b6:	6123      	str	r3, [r4, #16]
 80053b8:	463a      	mov	r2, r7
 80053ba:	4640      	mov	r0, r8
 80053bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80053c0:	4798      	blx	r3
 80053c2:	462e      	mov	r6, r5
 80053c4:	6822      	ldr	r2, [r4, #0]
 80053c6:	f012 0210 	ands.w	r2, r2, #16
 80053ca:	d001      	beq.n	80053d0 <_scanf_float+0x374>
 80053cc:	2000      	movs	r0, #0
 80053ce:	e68a      	b.n	80050e6 <_scanf_float+0x8a>
 80053d0:	7032      	strb	r2, [r6, #0]
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80053d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053dc:	d11c      	bne.n	8005418 <_scanf_float+0x3bc>
 80053de:	9b02      	ldr	r3, [sp, #8]
 80053e0:	454b      	cmp	r3, r9
 80053e2:	eba3 0209 	sub.w	r2, r3, r9
 80053e6:	d123      	bne.n	8005430 <_scanf_float+0x3d4>
 80053e8:	2200      	movs	r2, #0
 80053ea:	4640      	mov	r0, r8
 80053ec:	9901      	ldr	r1, [sp, #4]
 80053ee:	f002 fbff 	bl	8007bf0 <_strtod_r>
 80053f2:	9b03      	ldr	r3, [sp, #12]
 80053f4:	6825      	ldr	r5, [r4, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f015 0f02 	tst.w	r5, #2
 80053fc:	4606      	mov	r6, r0
 80053fe:	460f      	mov	r7, r1
 8005400:	f103 0204 	add.w	r2, r3, #4
 8005404:	d01f      	beq.n	8005446 <_scanf_float+0x3ea>
 8005406:	9903      	ldr	r1, [sp, #12]
 8005408:	600a      	str	r2, [r1, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	e9c3 6700 	strd	r6, r7, [r3]
 8005410:	68e3      	ldr	r3, [r4, #12]
 8005412:	3301      	adds	r3, #1
 8005414:	60e3      	str	r3, [r4, #12]
 8005416:	e7d9      	b.n	80053cc <_scanf_float+0x370>
 8005418:	9b04      	ldr	r3, [sp, #16]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d0e4      	beq.n	80053e8 <_scanf_float+0x38c>
 800541e:	9905      	ldr	r1, [sp, #20]
 8005420:	230a      	movs	r3, #10
 8005422:	4640      	mov	r0, r8
 8005424:	3101      	adds	r1, #1
 8005426:	f002 fc63 	bl	8007cf0 <_strtol_r>
 800542a:	9b04      	ldr	r3, [sp, #16]
 800542c:	9e05      	ldr	r6, [sp, #20]
 800542e:	1ac2      	subs	r2, r0, r3
 8005430:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005434:	429e      	cmp	r6, r3
 8005436:	bf28      	it	cs
 8005438:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800543c:	4630      	mov	r0, r6
 800543e:	490d      	ldr	r1, [pc, #52]	@ (8005474 <_scanf_float+0x418>)
 8005440:	f000 f8f0 	bl	8005624 <siprintf>
 8005444:	e7d0      	b.n	80053e8 <_scanf_float+0x38c>
 8005446:	076d      	lsls	r5, r5, #29
 8005448:	d4dd      	bmi.n	8005406 <_scanf_float+0x3aa>
 800544a:	9d03      	ldr	r5, [sp, #12]
 800544c:	602a      	str	r2, [r5, #0]
 800544e:	681d      	ldr	r5, [r3, #0]
 8005450:	4602      	mov	r2, r0
 8005452:	460b      	mov	r3, r1
 8005454:	f7fb fada 	bl	8000a0c <__aeabi_dcmpun>
 8005458:	b120      	cbz	r0, 8005464 <_scanf_float+0x408>
 800545a:	4807      	ldr	r0, [pc, #28]	@ (8005478 <_scanf_float+0x41c>)
 800545c:	f000 f9d4 	bl	8005808 <nanf>
 8005460:	6028      	str	r0, [r5, #0]
 8005462:	e7d5      	b.n	8005410 <_scanf_float+0x3b4>
 8005464:	4630      	mov	r0, r6
 8005466:	4639      	mov	r1, r7
 8005468:	f7fb fb2e 	bl	8000ac8 <__aeabi_d2f>
 800546c:	e7f8      	b.n	8005460 <_scanf_float+0x404>
 800546e:	f04f 0900 	mov.w	r9, #0
 8005472:	e62d      	b.n	80050d0 <_scanf_float+0x74>
 8005474:	08008f0a 	.word	0x08008f0a
 8005478:	080092a5 	.word	0x080092a5

0800547c <std>:
 800547c:	2300      	movs	r3, #0
 800547e:	b510      	push	{r4, lr}
 8005480:	4604      	mov	r4, r0
 8005482:	e9c0 3300 	strd	r3, r3, [r0]
 8005486:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800548a:	6083      	str	r3, [r0, #8]
 800548c:	8181      	strh	r1, [r0, #12]
 800548e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005490:	81c2      	strh	r2, [r0, #14]
 8005492:	6183      	str	r3, [r0, #24]
 8005494:	4619      	mov	r1, r3
 8005496:	2208      	movs	r2, #8
 8005498:	305c      	adds	r0, #92	@ 0x5c
 800549a:	f000 f926 	bl	80056ea <memset>
 800549e:	4b0d      	ldr	r3, [pc, #52]	@ (80054d4 <std+0x58>)
 80054a0:	6224      	str	r4, [r4, #32]
 80054a2:	6263      	str	r3, [r4, #36]	@ 0x24
 80054a4:	4b0c      	ldr	r3, [pc, #48]	@ (80054d8 <std+0x5c>)
 80054a6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80054a8:	4b0c      	ldr	r3, [pc, #48]	@ (80054dc <std+0x60>)
 80054aa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80054ac:	4b0c      	ldr	r3, [pc, #48]	@ (80054e0 <std+0x64>)
 80054ae:	6323      	str	r3, [r4, #48]	@ 0x30
 80054b0:	4b0c      	ldr	r3, [pc, #48]	@ (80054e4 <std+0x68>)
 80054b2:	429c      	cmp	r4, r3
 80054b4:	d006      	beq.n	80054c4 <std+0x48>
 80054b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80054ba:	4294      	cmp	r4, r2
 80054bc:	d002      	beq.n	80054c4 <std+0x48>
 80054be:	33d0      	adds	r3, #208	@ 0xd0
 80054c0:	429c      	cmp	r4, r3
 80054c2:	d105      	bne.n	80054d0 <std+0x54>
 80054c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80054c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054cc:	f000 b98a 	b.w	80057e4 <__retarget_lock_init_recursive>
 80054d0:	bd10      	pop	{r4, pc}
 80054d2:	bf00      	nop
 80054d4:	08005665 	.word	0x08005665
 80054d8:	08005687 	.word	0x08005687
 80054dc:	080056bf 	.word	0x080056bf
 80054e0:	080056e3 	.word	0x080056e3
 80054e4:	2000034c 	.word	0x2000034c

080054e8 <stdio_exit_handler>:
 80054e8:	4a02      	ldr	r2, [pc, #8]	@ (80054f4 <stdio_exit_handler+0xc>)
 80054ea:	4903      	ldr	r1, [pc, #12]	@ (80054f8 <stdio_exit_handler+0x10>)
 80054ec:	4803      	ldr	r0, [pc, #12]	@ (80054fc <stdio_exit_handler+0x14>)
 80054ee:	f000 b869 	b.w	80055c4 <_fwalk_sglue>
 80054f2:	bf00      	nop
 80054f4:	20000020 	.word	0x20000020
 80054f8:	08008325 	.word	0x08008325
 80054fc:	20000030 	.word	0x20000030

08005500 <cleanup_stdio>:
 8005500:	6841      	ldr	r1, [r0, #4]
 8005502:	4b0c      	ldr	r3, [pc, #48]	@ (8005534 <cleanup_stdio+0x34>)
 8005504:	b510      	push	{r4, lr}
 8005506:	4299      	cmp	r1, r3
 8005508:	4604      	mov	r4, r0
 800550a:	d001      	beq.n	8005510 <cleanup_stdio+0x10>
 800550c:	f002 ff0a 	bl	8008324 <_fflush_r>
 8005510:	68a1      	ldr	r1, [r4, #8]
 8005512:	4b09      	ldr	r3, [pc, #36]	@ (8005538 <cleanup_stdio+0x38>)
 8005514:	4299      	cmp	r1, r3
 8005516:	d002      	beq.n	800551e <cleanup_stdio+0x1e>
 8005518:	4620      	mov	r0, r4
 800551a:	f002 ff03 	bl	8008324 <_fflush_r>
 800551e:	68e1      	ldr	r1, [r4, #12]
 8005520:	4b06      	ldr	r3, [pc, #24]	@ (800553c <cleanup_stdio+0x3c>)
 8005522:	4299      	cmp	r1, r3
 8005524:	d004      	beq.n	8005530 <cleanup_stdio+0x30>
 8005526:	4620      	mov	r0, r4
 8005528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800552c:	f002 befa 	b.w	8008324 <_fflush_r>
 8005530:	bd10      	pop	{r4, pc}
 8005532:	bf00      	nop
 8005534:	2000034c 	.word	0x2000034c
 8005538:	200003b4 	.word	0x200003b4
 800553c:	2000041c 	.word	0x2000041c

08005540 <global_stdio_init.part.0>:
 8005540:	b510      	push	{r4, lr}
 8005542:	4b0b      	ldr	r3, [pc, #44]	@ (8005570 <global_stdio_init.part.0+0x30>)
 8005544:	4c0b      	ldr	r4, [pc, #44]	@ (8005574 <global_stdio_init.part.0+0x34>)
 8005546:	4a0c      	ldr	r2, [pc, #48]	@ (8005578 <global_stdio_init.part.0+0x38>)
 8005548:	4620      	mov	r0, r4
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	2104      	movs	r1, #4
 800554e:	2200      	movs	r2, #0
 8005550:	f7ff ff94 	bl	800547c <std>
 8005554:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005558:	2201      	movs	r2, #1
 800555a:	2109      	movs	r1, #9
 800555c:	f7ff ff8e 	bl	800547c <std>
 8005560:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005564:	2202      	movs	r2, #2
 8005566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800556a:	2112      	movs	r1, #18
 800556c:	f7ff bf86 	b.w	800547c <std>
 8005570:	20000484 	.word	0x20000484
 8005574:	2000034c 	.word	0x2000034c
 8005578:	080054e9 	.word	0x080054e9

0800557c <__sfp_lock_acquire>:
 800557c:	4801      	ldr	r0, [pc, #4]	@ (8005584 <__sfp_lock_acquire+0x8>)
 800557e:	f000 b932 	b.w	80057e6 <__retarget_lock_acquire_recursive>
 8005582:	bf00      	nop
 8005584:	2000048d 	.word	0x2000048d

08005588 <__sfp_lock_release>:
 8005588:	4801      	ldr	r0, [pc, #4]	@ (8005590 <__sfp_lock_release+0x8>)
 800558a:	f000 b92d 	b.w	80057e8 <__retarget_lock_release_recursive>
 800558e:	bf00      	nop
 8005590:	2000048d 	.word	0x2000048d

08005594 <__sinit>:
 8005594:	b510      	push	{r4, lr}
 8005596:	4604      	mov	r4, r0
 8005598:	f7ff fff0 	bl	800557c <__sfp_lock_acquire>
 800559c:	6a23      	ldr	r3, [r4, #32]
 800559e:	b11b      	cbz	r3, 80055a8 <__sinit+0x14>
 80055a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055a4:	f7ff bff0 	b.w	8005588 <__sfp_lock_release>
 80055a8:	4b04      	ldr	r3, [pc, #16]	@ (80055bc <__sinit+0x28>)
 80055aa:	6223      	str	r3, [r4, #32]
 80055ac:	4b04      	ldr	r3, [pc, #16]	@ (80055c0 <__sinit+0x2c>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1f5      	bne.n	80055a0 <__sinit+0xc>
 80055b4:	f7ff ffc4 	bl	8005540 <global_stdio_init.part.0>
 80055b8:	e7f2      	b.n	80055a0 <__sinit+0xc>
 80055ba:	bf00      	nop
 80055bc:	08005501 	.word	0x08005501
 80055c0:	20000484 	.word	0x20000484

080055c4 <_fwalk_sglue>:
 80055c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055c8:	4607      	mov	r7, r0
 80055ca:	4688      	mov	r8, r1
 80055cc:	4614      	mov	r4, r2
 80055ce:	2600      	movs	r6, #0
 80055d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80055d4:	f1b9 0901 	subs.w	r9, r9, #1
 80055d8:	d505      	bpl.n	80055e6 <_fwalk_sglue+0x22>
 80055da:	6824      	ldr	r4, [r4, #0]
 80055dc:	2c00      	cmp	r4, #0
 80055de:	d1f7      	bne.n	80055d0 <_fwalk_sglue+0xc>
 80055e0:	4630      	mov	r0, r6
 80055e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055e6:	89ab      	ldrh	r3, [r5, #12]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d907      	bls.n	80055fc <_fwalk_sglue+0x38>
 80055ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80055f0:	3301      	adds	r3, #1
 80055f2:	d003      	beq.n	80055fc <_fwalk_sglue+0x38>
 80055f4:	4629      	mov	r1, r5
 80055f6:	4638      	mov	r0, r7
 80055f8:	47c0      	blx	r8
 80055fa:	4306      	orrs	r6, r0
 80055fc:	3568      	adds	r5, #104	@ 0x68
 80055fe:	e7e9      	b.n	80055d4 <_fwalk_sglue+0x10>

08005600 <iprintf>:
 8005600:	b40f      	push	{r0, r1, r2, r3}
 8005602:	b507      	push	{r0, r1, r2, lr}
 8005604:	4906      	ldr	r1, [pc, #24]	@ (8005620 <iprintf+0x20>)
 8005606:	ab04      	add	r3, sp, #16
 8005608:	6808      	ldr	r0, [r1, #0]
 800560a:	f853 2b04 	ldr.w	r2, [r3], #4
 800560e:	6881      	ldr	r1, [r0, #8]
 8005610:	9301      	str	r3, [sp, #4]
 8005612:	f002 fcef 	bl	8007ff4 <_vfiprintf_r>
 8005616:	b003      	add	sp, #12
 8005618:	f85d eb04 	ldr.w	lr, [sp], #4
 800561c:	b004      	add	sp, #16
 800561e:	4770      	bx	lr
 8005620:	2000002c 	.word	0x2000002c

08005624 <siprintf>:
 8005624:	b40e      	push	{r1, r2, r3}
 8005626:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800562a:	b500      	push	{lr}
 800562c:	b09c      	sub	sp, #112	@ 0x70
 800562e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005630:	9002      	str	r0, [sp, #8]
 8005632:	9006      	str	r0, [sp, #24]
 8005634:	9107      	str	r1, [sp, #28]
 8005636:	9104      	str	r1, [sp, #16]
 8005638:	4808      	ldr	r0, [pc, #32]	@ (800565c <siprintf+0x38>)
 800563a:	4909      	ldr	r1, [pc, #36]	@ (8005660 <siprintf+0x3c>)
 800563c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005640:	9105      	str	r1, [sp, #20]
 8005642:	6800      	ldr	r0, [r0, #0]
 8005644:	a902      	add	r1, sp, #8
 8005646:	9301      	str	r3, [sp, #4]
 8005648:	f002 fbb0 	bl	8007dac <_svfiprintf_r>
 800564c:	2200      	movs	r2, #0
 800564e:	9b02      	ldr	r3, [sp, #8]
 8005650:	701a      	strb	r2, [r3, #0]
 8005652:	b01c      	add	sp, #112	@ 0x70
 8005654:	f85d eb04 	ldr.w	lr, [sp], #4
 8005658:	b003      	add	sp, #12
 800565a:	4770      	bx	lr
 800565c:	2000002c 	.word	0x2000002c
 8005660:	ffff0208 	.word	0xffff0208

08005664 <__sread>:
 8005664:	b510      	push	{r4, lr}
 8005666:	460c      	mov	r4, r1
 8005668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800566c:	f000 f86c 	bl	8005748 <_read_r>
 8005670:	2800      	cmp	r0, #0
 8005672:	bfab      	itete	ge
 8005674:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005676:	89a3      	ldrhlt	r3, [r4, #12]
 8005678:	181b      	addge	r3, r3, r0
 800567a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800567e:	bfac      	ite	ge
 8005680:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005682:	81a3      	strhlt	r3, [r4, #12]
 8005684:	bd10      	pop	{r4, pc}

08005686 <__swrite>:
 8005686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800568a:	461f      	mov	r7, r3
 800568c:	898b      	ldrh	r3, [r1, #12]
 800568e:	4605      	mov	r5, r0
 8005690:	05db      	lsls	r3, r3, #23
 8005692:	460c      	mov	r4, r1
 8005694:	4616      	mov	r6, r2
 8005696:	d505      	bpl.n	80056a4 <__swrite+0x1e>
 8005698:	2302      	movs	r3, #2
 800569a:	2200      	movs	r2, #0
 800569c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056a0:	f000 f840 	bl	8005724 <_lseek_r>
 80056a4:	89a3      	ldrh	r3, [r4, #12]
 80056a6:	4632      	mov	r2, r6
 80056a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056ac:	81a3      	strh	r3, [r4, #12]
 80056ae:	4628      	mov	r0, r5
 80056b0:	463b      	mov	r3, r7
 80056b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056ba:	f000 b857 	b.w	800576c <_write_r>

080056be <__sseek>:
 80056be:	b510      	push	{r4, lr}
 80056c0:	460c      	mov	r4, r1
 80056c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056c6:	f000 f82d 	bl	8005724 <_lseek_r>
 80056ca:	1c43      	adds	r3, r0, #1
 80056cc:	89a3      	ldrh	r3, [r4, #12]
 80056ce:	bf15      	itete	ne
 80056d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80056d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80056d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80056da:	81a3      	strheq	r3, [r4, #12]
 80056dc:	bf18      	it	ne
 80056de:	81a3      	strhne	r3, [r4, #12]
 80056e0:	bd10      	pop	{r4, pc}

080056e2 <__sclose>:
 80056e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056e6:	f000 b80d 	b.w	8005704 <_close_r>

080056ea <memset>:
 80056ea:	4603      	mov	r3, r0
 80056ec:	4402      	add	r2, r0
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d100      	bne.n	80056f4 <memset+0xa>
 80056f2:	4770      	bx	lr
 80056f4:	f803 1b01 	strb.w	r1, [r3], #1
 80056f8:	e7f9      	b.n	80056ee <memset+0x4>
	...

080056fc <_localeconv_r>:
 80056fc:	4800      	ldr	r0, [pc, #0]	@ (8005700 <_localeconv_r+0x4>)
 80056fe:	4770      	bx	lr
 8005700:	2000016c 	.word	0x2000016c

08005704 <_close_r>:
 8005704:	b538      	push	{r3, r4, r5, lr}
 8005706:	2300      	movs	r3, #0
 8005708:	4d05      	ldr	r5, [pc, #20]	@ (8005720 <_close_r+0x1c>)
 800570a:	4604      	mov	r4, r0
 800570c:	4608      	mov	r0, r1
 800570e:	602b      	str	r3, [r5, #0]
 8005710:	f7fc f8d9 	bl	80018c6 <_close>
 8005714:	1c43      	adds	r3, r0, #1
 8005716:	d102      	bne.n	800571e <_close_r+0x1a>
 8005718:	682b      	ldr	r3, [r5, #0]
 800571a:	b103      	cbz	r3, 800571e <_close_r+0x1a>
 800571c:	6023      	str	r3, [r4, #0]
 800571e:	bd38      	pop	{r3, r4, r5, pc}
 8005720:	20000488 	.word	0x20000488

08005724 <_lseek_r>:
 8005724:	b538      	push	{r3, r4, r5, lr}
 8005726:	4604      	mov	r4, r0
 8005728:	4608      	mov	r0, r1
 800572a:	4611      	mov	r1, r2
 800572c:	2200      	movs	r2, #0
 800572e:	4d05      	ldr	r5, [pc, #20]	@ (8005744 <_lseek_r+0x20>)
 8005730:	602a      	str	r2, [r5, #0]
 8005732:	461a      	mov	r2, r3
 8005734:	f7fc f8eb 	bl	800190e <_lseek>
 8005738:	1c43      	adds	r3, r0, #1
 800573a:	d102      	bne.n	8005742 <_lseek_r+0x1e>
 800573c:	682b      	ldr	r3, [r5, #0]
 800573e:	b103      	cbz	r3, 8005742 <_lseek_r+0x1e>
 8005740:	6023      	str	r3, [r4, #0]
 8005742:	bd38      	pop	{r3, r4, r5, pc}
 8005744:	20000488 	.word	0x20000488

08005748 <_read_r>:
 8005748:	b538      	push	{r3, r4, r5, lr}
 800574a:	4604      	mov	r4, r0
 800574c:	4608      	mov	r0, r1
 800574e:	4611      	mov	r1, r2
 8005750:	2200      	movs	r2, #0
 8005752:	4d05      	ldr	r5, [pc, #20]	@ (8005768 <_read_r+0x20>)
 8005754:	602a      	str	r2, [r5, #0]
 8005756:	461a      	mov	r2, r3
 8005758:	f7fc f87c 	bl	8001854 <_read>
 800575c:	1c43      	adds	r3, r0, #1
 800575e:	d102      	bne.n	8005766 <_read_r+0x1e>
 8005760:	682b      	ldr	r3, [r5, #0]
 8005762:	b103      	cbz	r3, 8005766 <_read_r+0x1e>
 8005764:	6023      	str	r3, [r4, #0]
 8005766:	bd38      	pop	{r3, r4, r5, pc}
 8005768:	20000488 	.word	0x20000488

0800576c <_write_r>:
 800576c:	b538      	push	{r3, r4, r5, lr}
 800576e:	4604      	mov	r4, r0
 8005770:	4608      	mov	r0, r1
 8005772:	4611      	mov	r1, r2
 8005774:	2200      	movs	r2, #0
 8005776:	4d05      	ldr	r5, [pc, #20]	@ (800578c <_write_r+0x20>)
 8005778:	602a      	str	r2, [r5, #0]
 800577a:	461a      	mov	r2, r3
 800577c:	f7fc f887 	bl	800188e <_write>
 8005780:	1c43      	adds	r3, r0, #1
 8005782:	d102      	bne.n	800578a <_write_r+0x1e>
 8005784:	682b      	ldr	r3, [r5, #0]
 8005786:	b103      	cbz	r3, 800578a <_write_r+0x1e>
 8005788:	6023      	str	r3, [r4, #0]
 800578a:	bd38      	pop	{r3, r4, r5, pc}
 800578c:	20000488 	.word	0x20000488

08005790 <__errno>:
 8005790:	4b01      	ldr	r3, [pc, #4]	@ (8005798 <__errno+0x8>)
 8005792:	6818      	ldr	r0, [r3, #0]
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	2000002c 	.word	0x2000002c

0800579c <__libc_init_array>:
 800579c:	b570      	push	{r4, r5, r6, lr}
 800579e:	2600      	movs	r6, #0
 80057a0:	4d0c      	ldr	r5, [pc, #48]	@ (80057d4 <__libc_init_array+0x38>)
 80057a2:	4c0d      	ldr	r4, [pc, #52]	@ (80057d8 <__libc_init_array+0x3c>)
 80057a4:	1b64      	subs	r4, r4, r5
 80057a6:	10a4      	asrs	r4, r4, #2
 80057a8:	42a6      	cmp	r6, r4
 80057aa:	d109      	bne.n	80057c0 <__libc_init_array+0x24>
 80057ac:	f003 fb68 	bl	8008e80 <_init>
 80057b0:	2600      	movs	r6, #0
 80057b2:	4d0a      	ldr	r5, [pc, #40]	@ (80057dc <__libc_init_array+0x40>)
 80057b4:	4c0a      	ldr	r4, [pc, #40]	@ (80057e0 <__libc_init_array+0x44>)
 80057b6:	1b64      	subs	r4, r4, r5
 80057b8:	10a4      	asrs	r4, r4, #2
 80057ba:	42a6      	cmp	r6, r4
 80057bc:	d105      	bne.n	80057ca <__libc_init_array+0x2e>
 80057be:	bd70      	pop	{r4, r5, r6, pc}
 80057c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80057c4:	4798      	blx	r3
 80057c6:	3601      	adds	r6, #1
 80057c8:	e7ee      	b.n	80057a8 <__libc_init_array+0xc>
 80057ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ce:	4798      	blx	r3
 80057d0:	3601      	adds	r6, #1
 80057d2:	e7f2      	b.n	80057ba <__libc_init_array+0x1e>
 80057d4:	08009310 	.word	0x08009310
 80057d8:	08009310 	.word	0x08009310
 80057dc:	08009310 	.word	0x08009310
 80057e0:	08009314 	.word	0x08009314

080057e4 <__retarget_lock_init_recursive>:
 80057e4:	4770      	bx	lr

080057e6 <__retarget_lock_acquire_recursive>:
 80057e6:	4770      	bx	lr

080057e8 <__retarget_lock_release_recursive>:
 80057e8:	4770      	bx	lr

080057ea <memchr>:
 80057ea:	4603      	mov	r3, r0
 80057ec:	b510      	push	{r4, lr}
 80057ee:	b2c9      	uxtb	r1, r1
 80057f0:	4402      	add	r2, r0
 80057f2:	4293      	cmp	r3, r2
 80057f4:	4618      	mov	r0, r3
 80057f6:	d101      	bne.n	80057fc <memchr+0x12>
 80057f8:	2000      	movs	r0, #0
 80057fa:	e003      	b.n	8005804 <memchr+0x1a>
 80057fc:	7804      	ldrb	r4, [r0, #0]
 80057fe:	3301      	adds	r3, #1
 8005800:	428c      	cmp	r4, r1
 8005802:	d1f6      	bne.n	80057f2 <memchr+0x8>
 8005804:	bd10      	pop	{r4, pc}
	...

08005808 <nanf>:
 8005808:	4800      	ldr	r0, [pc, #0]	@ (800580c <nanf+0x4>)
 800580a:	4770      	bx	lr
 800580c:	7fc00000 	.word	0x7fc00000

08005810 <quorem>:
 8005810:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005814:	6903      	ldr	r3, [r0, #16]
 8005816:	690c      	ldr	r4, [r1, #16]
 8005818:	4607      	mov	r7, r0
 800581a:	42a3      	cmp	r3, r4
 800581c:	db7e      	blt.n	800591c <quorem+0x10c>
 800581e:	3c01      	subs	r4, #1
 8005820:	00a3      	lsls	r3, r4, #2
 8005822:	f100 0514 	add.w	r5, r0, #20
 8005826:	f101 0814 	add.w	r8, r1, #20
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005830:	9301      	str	r3, [sp, #4]
 8005832:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005836:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800583a:	3301      	adds	r3, #1
 800583c:	429a      	cmp	r2, r3
 800583e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005842:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005846:	d32e      	bcc.n	80058a6 <quorem+0x96>
 8005848:	f04f 0a00 	mov.w	sl, #0
 800584c:	46c4      	mov	ip, r8
 800584e:	46ae      	mov	lr, r5
 8005850:	46d3      	mov	fp, sl
 8005852:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005856:	b298      	uxth	r0, r3
 8005858:	fb06 a000 	mla	r0, r6, r0, sl
 800585c:	0c1b      	lsrs	r3, r3, #16
 800585e:	0c02      	lsrs	r2, r0, #16
 8005860:	fb06 2303 	mla	r3, r6, r3, r2
 8005864:	f8de 2000 	ldr.w	r2, [lr]
 8005868:	b280      	uxth	r0, r0
 800586a:	b292      	uxth	r2, r2
 800586c:	1a12      	subs	r2, r2, r0
 800586e:	445a      	add	r2, fp
 8005870:	f8de 0000 	ldr.w	r0, [lr]
 8005874:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005878:	b29b      	uxth	r3, r3
 800587a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800587e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005882:	b292      	uxth	r2, r2
 8005884:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005888:	45e1      	cmp	r9, ip
 800588a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800588e:	f84e 2b04 	str.w	r2, [lr], #4
 8005892:	d2de      	bcs.n	8005852 <quorem+0x42>
 8005894:	9b00      	ldr	r3, [sp, #0]
 8005896:	58eb      	ldr	r3, [r5, r3]
 8005898:	b92b      	cbnz	r3, 80058a6 <quorem+0x96>
 800589a:	9b01      	ldr	r3, [sp, #4]
 800589c:	3b04      	subs	r3, #4
 800589e:	429d      	cmp	r5, r3
 80058a0:	461a      	mov	r2, r3
 80058a2:	d32f      	bcc.n	8005904 <quorem+0xf4>
 80058a4:	613c      	str	r4, [r7, #16]
 80058a6:	4638      	mov	r0, r7
 80058a8:	f001 f9c2 	bl	8006c30 <__mcmp>
 80058ac:	2800      	cmp	r0, #0
 80058ae:	db25      	blt.n	80058fc <quorem+0xec>
 80058b0:	4629      	mov	r1, r5
 80058b2:	2000      	movs	r0, #0
 80058b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80058b8:	f8d1 c000 	ldr.w	ip, [r1]
 80058bc:	fa1f fe82 	uxth.w	lr, r2
 80058c0:	fa1f f38c 	uxth.w	r3, ip
 80058c4:	eba3 030e 	sub.w	r3, r3, lr
 80058c8:	4403      	add	r3, r0
 80058ca:	0c12      	lsrs	r2, r2, #16
 80058cc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80058d0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058da:	45c1      	cmp	r9, r8
 80058dc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80058e0:	f841 3b04 	str.w	r3, [r1], #4
 80058e4:	d2e6      	bcs.n	80058b4 <quorem+0xa4>
 80058e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80058ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058ee:	b922      	cbnz	r2, 80058fa <quorem+0xea>
 80058f0:	3b04      	subs	r3, #4
 80058f2:	429d      	cmp	r5, r3
 80058f4:	461a      	mov	r2, r3
 80058f6:	d30b      	bcc.n	8005910 <quorem+0x100>
 80058f8:	613c      	str	r4, [r7, #16]
 80058fa:	3601      	adds	r6, #1
 80058fc:	4630      	mov	r0, r6
 80058fe:	b003      	add	sp, #12
 8005900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005904:	6812      	ldr	r2, [r2, #0]
 8005906:	3b04      	subs	r3, #4
 8005908:	2a00      	cmp	r2, #0
 800590a:	d1cb      	bne.n	80058a4 <quorem+0x94>
 800590c:	3c01      	subs	r4, #1
 800590e:	e7c6      	b.n	800589e <quorem+0x8e>
 8005910:	6812      	ldr	r2, [r2, #0]
 8005912:	3b04      	subs	r3, #4
 8005914:	2a00      	cmp	r2, #0
 8005916:	d1ef      	bne.n	80058f8 <quorem+0xe8>
 8005918:	3c01      	subs	r4, #1
 800591a:	e7ea      	b.n	80058f2 <quorem+0xe2>
 800591c:	2000      	movs	r0, #0
 800591e:	e7ee      	b.n	80058fe <quorem+0xee>

08005920 <_dtoa_r>:
 8005920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005924:	4614      	mov	r4, r2
 8005926:	461d      	mov	r5, r3
 8005928:	69c7      	ldr	r7, [r0, #28]
 800592a:	b097      	sub	sp, #92	@ 0x5c
 800592c:	4683      	mov	fp, r0
 800592e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005932:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005934:	b97f      	cbnz	r7, 8005956 <_dtoa_r+0x36>
 8005936:	2010      	movs	r0, #16
 8005938:	f000 fe02 	bl	8006540 <malloc>
 800593c:	4602      	mov	r2, r0
 800593e:	f8cb 001c 	str.w	r0, [fp, #28]
 8005942:	b920      	cbnz	r0, 800594e <_dtoa_r+0x2e>
 8005944:	21ef      	movs	r1, #239	@ 0xef
 8005946:	4ba8      	ldr	r3, [pc, #672]	@ (8005be8 <_dtoa_r+0x2c8>)
 8005948:	48a8      	ldr	r0, [pc, #672]	@ (8005bec <_dtoa_r+0x2cc>)
 800594a:	f002 fdf7 	bl	800853c <__assert_func>
 800594e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005952:	6007      	str	r7, [r0, #0]
 8005954:	60c7      	str	r7, [r0, #12]
 8005956:	f8db 301c 	ldr.w	r3, [fp, #28]
 800595a:	6819      	ldr	r1, [r3, #0]
 800595c:	b159      	cbz	r1, 8005976 <_dtoa_r+0x56>
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	2301      	movs	r3, #1
 8005962:	4093      	lsls	r3, r2
 8005964:	604a      	str	r2, [r1, #4]
 8005966:	608b      	str	r3, [r1, #8]
 8005968:	4658      	mov	r0, fp
 800596a:	f000 fedf 	bl	800672c <_Bfree>
 800596e:	2200      	movs	r2, #0
 8005970:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005974:	601a      	str	r2, [r3, #0]
 8005976:	1e2b      	subs	r3, r5, #0
 8005978:	bfaf      	iteee	ge
 800597a:	2300      	movge	r3, #0
 800597c:	2201      	movlt	r2, #1
 800597e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005982:	9303      	strlt	r3, [sp, #12]
 8005984:	bfa8      	it	ge
 8005986:	6033      	strge	r3, [r6, #0]
 8005988:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800598c:	4b98      	ldr	r3, [pc, #608]	@ (8005bf0 <_dtoa_r+0x2d0>)
 800598e:	bfb8      	it	lt
 8005990:	6032      	strlt	r2, [r6, #0]
 8005992:	ea33 0308 	bics.w	r3, r3, r8
 8005996:	d112      	bne.n	80059be <_dtoa_r+0x9e>
 8005998:	f242 730f 	movw	r3, #9999	@ 0x270f
 800599c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800599e:	6013      	str	r3, [r2, #0]
 80059a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80059a4:	4323      	orrs	r3, r4
 80059a6:	f000 8550 	beq.w	800644a <_dtoa_r+0xb2a>
 80059aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80059ac:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005bf4 <_dtoa_r+0x2d4>
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f000 8552 	beq.w	800645a <_dtoa_r+0xb3a>
 80059b6:	f10a 0303 	add.w	r3, sl, #3
 80059ba:	f000 bd4c 	b.w	8006456 <_dtoa_r+0xb36>
 80059be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059c2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80059c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059ca:	2200      	movs	r2, #0
 80059cc:	2300      	movs	r3, #0
 80059ce:	f7fa ffeb 	bl	80009a8 <__aeabi_dcmpeq>
 80059d2:	4607      	mov	r7, r0
 80059d4:	b158      	cbz	r0, 80059ee <_dtoa_r+0xce>
 80059d6:	2301      	movs	r3, #1
 80059d8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80059da:	6013      	str	r3, [r2, #0]
 80059dc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80059de:	b113      	cbz	r3, 80059e6 <_dtoa_r+0xc6>
 80059e0:	4b85      	ldr	r3, [pc, #532]	@ (8005bf8 <_dtoa_r+0x2d8>)
 80059e2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80059e4:	6013      	str	r3, [r2, #0]
 80059e6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005bfc <_dtoa_r+0x2dc>
 80059ea:	f000 bd36 	b.w	800645a <_dtoa_r+0xb3a>
 80059ee:	ab14      	add	r3, sp, #80	@ 0x50
 80059f0:	9301      	str	r3, [sp, #4]
 80059f2:	ab15      	add	r3, sp, #84	@ 0x54
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	4658      	mov	r0, fp
 80059f8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80059fc:	f001 fa30 	bl	8006e60 <__d2b>
 8005a00:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005a04:	4681      	mov	r9, r0
 8005a06:	2e00      	cmp	r6, #0
 8005a08:	d077      	beq.n	8005afa <_dtoa_r+0x1da>
 8005a0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a10:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005a14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a18:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005a1c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005a20:	9712      	str	r7, [sp, #72]	@ 0x48
 8005a22:	4619      	mov	r1, r3
 8005a24:	2200      	movs	r2, #0
 8005a26:	4b76      	ldr	r3, [pc, #472]	@ (8005c00 <_dtoa_r+0x2e0>)
 8005a28:	f7fa fb9e 	bl	8000168 <__aeabi_dsub>
 8005a2c:	a368      	add	r3, pc, #416	@ (adr r3, 8005bd0 <_dtoa_r+0x2b0>)
 8005a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a32:	f7fa fd51 	bl	80004d8 <__aeabi_dmul>
 8005a36:	a368      	add	r3, pc, #416	@ (adr r3, 8005bd8 <_dtoa_r+0x2b8>)
 8005a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3c:	f7fa fb96 	bl	800016c <__adddf3>
 8005a40:	4604      	mov	r4, r0
 8005a42:	4630      	mov	r0, r6
 8005a44:	460d      	mov	r5, r1
 8005a46:	f7fa fcdd 	bl	8000404 <__aeabi_i2d>
 8005a4a:	a365      	add	r3, pc, #404	@ (adr r3, 8005be0 <_dtoa_r+0x2c0>)
 8005a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a50:	f7fa fd42 	bl	80004d8 <__aeabi_dmul>
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	4620      	mov	r0, r4
 8005a5a:	4629      	mov	r1, r5
 8005a5c:	f7fa fb86 	bl	800016c <__adddf3>
 8005a60:	4604      	mov	r4, r0
 8005a62:	460d      	mov	r5, r1
 8005a64:	f7fa ffe8 	bl	8000a38 <__aeabi_d2iz>
 8005a68:	2200      	movs	r2, #0
 8005a6a:	4607      	mov	r7, r0
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	4620      	mov	r0, r4
 8005a70:	4629      	mov	r1, r5
 8005a72:	f7fa ffa3 	bl	80009bc <__aeabi_dcmplt>
 8005a76:	b140      	cbz	r0, 8005a8a <_dtoa_r+0x16a>
 8005a78:	4638      	mov	r0, r7
 8005a7a:	f7fa fcc3 	bl	8000404 <__aeabi_i2d>
 8005a7e:	4622      	mov	r2, r4
 8005a80:	462b      	mov	r3, r5
 8005a82:	f7fa ff91 	bl	80009a8 <__aeabi_dcmpeq>
 8005a86:	b900      	cbnz	r0, 8005a8a <_dtoa_r+0x16a>
 8005a88:	3f01      	subs	r7, #1
 8005a8a:	2f16      	cmp	r7, #22
 8005a8c:	d853      	bhi.n	8005b36 <_dtoa_r+0x216>
 8005a8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a92:	4b5c      	ldr	r3, [pc, #368]	@ (8005c04 <_dtoa_r+0x2e4>)
 8005a94:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9c:	f7fa ff8e 	bl	80009bc <__aeabi_dcmplt>
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	d04a      	beq.n	8005b3a <_dtoa_r+0x21a>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	3f01      	subs	r7, #1
 8005aa8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005aaa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005aac:	1b9b      	subs	r3, r3, r6
 8005aae:	1e5a      	subs	r2, r3, #1
 8005ab0:	bf46      	itte	mi
 8005ab2:	f1c3 0801 	rsbmi	r8, r3, #1
 8005ab6:	2300      	movmi	r3, #0
 8005ab8:	f04f 0800 	movpl.w	r8, #0
 8005abc:	9209      	str	r2, [sp, #36]	@ 0x24
 8005abe:	bf48      	it	mi
 8005ac0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005ac2:	2f00      	cmp	r7, #0
 8005ac4:	db3b      	blt.n	8005b3e <_dtoa_r+0x21e>
 8005ac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ac8:	970e      	str	r7, [sp, #56]	@ 0x38
 8005aca:	443b      	add	r3, r7
 8005acc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ace:	2300      	movs	r3, #0
 8005ad0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ad2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ad4:	2b09      	cmp	r3, #9
 8005ad6:	d866      	bhi.n	8005ba6 <_dtoa_r+0x286>
 8005ad8:	2b05      	cmp	r3, #5
 8005ada:	bfc4      	itt	gt
 8005adc:	3b04      	subgt	r3, #4
 8005ade:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005ae0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ae2:	bfc8      	it	gt
 8005ae4:	2400      	movgt	r4, #0
 8005ae6:	f1a3 0302 	sub.w	r3, r3, #2
 8005aea:	bfd8      	it	le
 8005aec:	2401      	movle	r4, #1
 8005aee:	2b03      	cmp	r3, #3
 8005af0:	d864      	bhi.n	8005bbc <_dtoa_r+0x29c>
 8005af2:	e8df f003 	tbb	[pc, r3]
 8005af6:	382b      	.short	0x382b
 8005af8:	5636      	.short	0x5636
 8005afa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005afe:	441e      	add	r6, r3
 8005b00:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005b04:	2b20      	cmp	r3, #32
 8005b06:	bfc1      	itttt	gt
 8005b08:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005b0c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005b10:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005b14:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005b18:	bfd6      	itet	le
 8005b1a:	f1c3 0320 	rsble	r3, r3, #32
 8005b1e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005b22:	fa04 f003 	lslle.w	r0, r4, r3
 8005b26:	f7fa fc5d 	bl	80003e4 <__aeabi_ui2d>
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005b30:	3e01      	subs	r6, #1
 8005b32:	9212      	str	r2, [sp, #72]	@ 0x48
 8005b34:	e775      	b.n	8005a22 <_dtoa_r+0x102>
 8005b36:	2301      	movs	r3, #1
 8005b38:	e7b6      	b.n	8005aa8 <_dtoa_r+0x188>
 8005b3a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005b3c:	e7b5      	b.n	8005aaa <_dtoa_r+0x18a>
 8005b3e:	427b      	negs	r3, r7
 8005b40:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b42:	2300      	movs	r3, #0
 8005b44:	eba8 0807 	sub.w	r8, r8, r7
 8005b48:	930e      	str	r3, [sp, #56]	@ 0x38
 8005b4a:	e7c2      	b.n	8005ad2 <_dtoa_r+0x1b2>
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b50:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	dc35      	bgt.n	8005bc2 <_dtoa_r+0x2a2>
 8005b56:	2301      	movs	r3, #1
 8005b58:	461a      	mov	r2, r3
 8005b5a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005b5e:	9221      	str	r2, [sp, #132]	@ 0x84
 8005b60:	e00b      	b.n	8005b7a <_dtoa_r+0x25a>
 8005b62:	2301      	movs	r3, #1
 8005b64:	e7f3      	b.n	8005b4e <_dtoa_r+0x22e>
 8005b66:	2300      	movs	r3, #0
 8005b68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b6a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005b6c:	18fb      	adds	r3, r7, r3
 8005b6e:	9308      	str	r3, [sp, #32]
 8005b70:	3301      	adds	r3, #1
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	9307      	str	r3, [sp, #28]
 8005b76:	bfb8      	it	lt
 8005b78:	2301      	movlt	r3, #1
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	2204      	movs	r2, #4
 8005b7e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005b82:	f102 0514 	add.w	r5, r2, #20
 8005b86:	429d      	cmp	r5, r3
 8005b88:	d91f      	bls.n	8005bca <_dtoa_r+0x2aa>
 8005b8a:	6041      	str	r1, [r0, #4]
 8005b8c:	4658      	mov	r0, fp
 8005b8e:	f000 fd8d 	bl	80066ac <_Balloc>
 8005b92:	4682      	mov	sl, r0
 8005b94:	2800      	cmp	r0, #0
 8005b96:	d139      	bne.n	8005c0c <_dtoa_r+0x2ec>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	f240 11af 	movw	r1, #431	@ 0x1af
 8005b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8005c08 <_dtoa_r+0x2e8>)
 8005ba0:	e6d2      	b.n	8005948 <_dtoa_r+0x28>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e7e0      	b.n	8005b68 <_dtoa_r+0x248>
 8005ba6:	2401      	movs	r4, #1
 8005ba8:	2300      	movs	r3, #0
 8005baa:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005bac:	9320      	str	r3, [sp, #128]	@ 0x80
 8005bae:	f04f 33ff 	mov.w	r3, #4294967295
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005bb8:	2312      	movs	r3, #18
 8005bba:	e7d0      	b.n	8005b5e <_dtoa_r+0x23e>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005bc0:	e7f5      	b.n	8005bae <_dtoa_r+0x28e>
 8005bc2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005bc4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005bc8:	e7d7      	b.n	8005b7a <_dtoa_r+0x25a>
 8005bca:	3101      	adds	r1, #1
 8005bcc:	0052      	lsls	r2, r2, #1
 8005bce:	e7d8      	b.n	8005b82 <_dtoa_r+0x262>
 8005bd0:	636f4361 	.word	0x636f4361
 8005bd4:	3fd287a7 	.word	0x3fd287a7
 8005bd8:	8b60c8b3 	.word	0x8b60c8b3
 8005bdc:	3fc68a28 	.word	0x3fc68a28
 8005be0:	509f79fb 	.word	0x509f79fb
 8005be4:	3fd34413 	.word	0x3fd34413
 8005be8:	08008f1c 	.word	0x08008f1c
 8005bec:	08008f33 	.word	0x08008f33
 8005bf0:	7ff00000 	.word	0x7ff00000
 8005bf4:	08008f18 	.word	0x08008f18
 8005bf8:	08008ee7 	.word	0x08008ee7
 8005bfc:	08008ee6 	.word	0x08008ee6
 8005c00:	3ff80000 	.word	0x3ff80000
 8005c04:	08009030 	.word	0x08009030
 8005c08:	08008f8b 	.word	0x08008f8b
 8005c0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c10:	6018      	str	r0, [r3, #0]
 8005c12:	9b07      	ldr	r3, [sp, #28]
 8005c14:	2b0e      	cmp	r3, #14
 8005c16:	f200 80a4 	bhi.w	8005d62 <_dtoa_r+0x442>
 8005c1a:	2c00      	cmp	r4, #0
 8005c1c:	f000 80a1 	beq.w	8005d62 <_dtoa_r+0x442>
 8005c20:	2f00      	cmp	r7, #0
 8005c22:	dd33      	ble.n	8005c8c <_dtoa_r+0x36c>
 8005c24:	4b86      	ldr	r3, [pc, #536]	@ (8005e40 <_dtoa_r+0x520>)
 8005c26:	f007 020f 	and.w	r2, r7, #15
 8005c2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c2e:	05f8      	lsls	r0, r7, #23
 8005c30:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005c34:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005c38:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005c3c:	d516      	bpl.n	8005c6c <_dtoa_r+0x34c>
 8005c3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c42:	4b80      	ldr	r3, [pc, #512]	@ (8005e44 <_dtoa_r+0x524>)
 8005c44:	2603      	movs	r6, #3
 8005c46:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c4a:	f7fa fd6f 	bl	800072c <__aeabi_ddiv>
 8005c4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c52:	f004 040f 	and.w	r4, r4, #15
 8005c56:	4d7b      	ldr	r5, [pc, #492]	@ (8005e44 <_dtoa_r+0x524>)
 8005c58:	b954      	cbnz	r4, 8005c70 <_dtoa_r+0x350>
 8005c5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c62:	f7fa fd63 	bl	800072c <__aeabi_ddiv>
 8005c66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c6a:	e028      	b.n	8005cbe <_dtoa_r+0x39e>
 8005c6c:	2602      	movs	r6, #2
 8005c6e:	e7f2      	b.n	8005c56 <_dtoa_r+0x336>
 8005c70:	07e1      	lsls	r1, r4, #31
 8005c72:	d508      	bpl.n	8005c86 <_dtoa_r+0x366>
 8005c74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005c7c:	f7fa fc2c 	bl	80004d8 <__aeabi_dmul>
 8005c80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c84:	3601      	adds	r6, #1
 8005c86:	1064      	asrs	r4, r4, #1
 8005c88:	3508      	adds	r5, #8
 8005c8a:	e7e5      	b.n	8005c58 <_dtoa_r+0x338>
 8005c8c:	f000 80d2 	beq.w	8005e34 <_dtoa_r+0x514>
 8005c90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c94:	427c      	negs	r4, r7
 8005c96:	4b6a      	ldr	r3, [pc, #424]	@ (8005e40 <_dtoa_r+0x520>)
 8005c98:	f004 020f 	and.w	r2, r4, #15
 8005c9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca4:	f7fa fc18 	bl	80004d8 <__aeabi_dmul>
 8005ca8:	2602      	movs	r6, #2
 8005caa:	2300      	movs	r3, #0
 8005cac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cb0:	4d64      	ldr	r5, [pc, #400]	@ (8005e44 <_dtoa_r+0x524>)
 8005cb2:	1124      	asrs	r4, r4, #4
 8005cb4:	2c00      	cmp	r4, #0
 8005cb6:	f040 80b2 	bne.w	8005e1e <_dtoa_r+0x4fe>
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1d3      	bne.n	8005c66 <_dtoa_r+0x346>
 8005cbe:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005cc2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f000 80b7 	beq.w	8005e38 <_dtoa_r+0x518>
 8005cca:	2200      	movs	r2, #0
 8005ccc:	4620      	mov	r0, r4
 8005cce:	4629      	mov	r1, r5
 8005cd0:	4b5d      	ldr	r3, [pc, #372]	@ (8005e48 <_dtoa_r+0x528>)
 8005cd2:	f7fa fe73 	bl	80009bc <__aeabi_dcmplt>
 8005cd6:	2800      	cmp	r0, #0
 8005cd8:	f000 80ae 	beq.w	8005e38 <_dtoa_r+0x518>
 8005cdc:	9b07      	ldr	r3, [sp, #28]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f000 80aa 	beq.w	8005e38 <_dtoa_r+0x518>
 8005ce4:	9b08      	ldr	r3, [sp, #32]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	dd37      	ble.n	8005d5a <_dtoa_r+0x43a>
 8005cea:	1e7b      	subs	r3, r7, #1
 8005cec:	4620      	mov	r0, r4
 8005cee:	9304      	str	r3, [sp, #16]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	4629      	mov	r1, r5
 8005cf4:	4b55      	ldr	r3, [pc, #340]	@ (8005e4c <_dtoa_r+0x52c>)
 8005cf6:	f7fa fbef 	bl	80004d8 <__aeabi_dmul>
 8005cfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cfe:	9c08      	ldr	r4, [sp, #32]
 8005d00:	3601      	adds	r6, #1
 8005d02:	4630      	mov	r0, r6
 8005d04:	f7fa fb7e 	bl	8000404 <__aeabi_i2d>
 8005d08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d0c:	f7fa fbe4 	bl	80004d8 <__aeabi_dmul>
 8005d10:	2200      	movs	r2, #0
 8005d12:	4b4f      	ldr	r3, [pc, #316]	@ (8005e50 <_dtoa_r+0x530>)
 8005d14:	f7fa fa2a 	bl	800016c <__adddf3>
 8005d18:	4605      	mov	r5, r0
 8005d1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005d1e:	2c00      	cmp	r4, #0
 8005d20:	f040 809a 	bne.w	8005e58 <_dtoa_r+0x538>
 8005d24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	4b4a      	ldr	r3, [pc, #296]	@ (8005e54 <_dtoa_r+0x534>)
 8005d2c:	f7fa fa1c 	bl	8000168 <__aeabi_dsub>
 8005d30:	4602      	mov	r2, r0
 8005d32:	460b      	mov	r3, r1
 8005d34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d38:	462a      	mov	r2, r5
 8005d3a:	4633      	mov	r3, r6
 8005d3c:	f7fa fe5c 	bl	80009f8 <__aeabi_dcmpgt>
 8005d40:	2800      	cmp	r0, #0
 8005d42:	f040 828e 	bne.w	8006262 <_dtoa_r+0x942>
 8005d46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d4a:	462a      	mov	r2, r5
 8005d4c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005d50:	f7fa fe34 	bl	80009bc <__aeabi_dcmplt>
 8005d54:	2800      	cmp	r0, #0
 8005d56:	f040 8127 	bne.w	8005fa8 <_dtoa_r+0x688>
 8005d5a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005d5e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005d62:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f2c0 8163 	blt.w	8006030 <_dtoa_r+0x710>
 8005d6a:	2f0e      	cmp	r7, #14
 8005d6c:	f300 8160 	bgt.w	8006030 <_dtoa_r+0x710>
 8005d70:	4b33      	ldr	r3, [pc, #204]	@ (8005e40 <_dtoa_r+0x520>)
 8005d72:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005d76:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d7a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005d7e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	da03      	bge.n	8005d8c <_dtoa_r+0x46c>
 8005d84:	9b07      	ldr	r3, [sp, #28]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f340 8100 	ble.w	8005f8c <_dtoa_r+0x66c>
 8005d8c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005d90:	4656      	mov	r6, sl
 8005d92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d96:	4620      	mov	r0, r4
 8005d98:	4629      	mov	r1, r5
 8005d9a:	f7fa fcc7 	bl	800072c <__aeabi_ddiv>
 8005d9e:	f7fa fe4b 	bl	8000a38 <__aeabi_d2iz>
 8005da2:	4680      	mov	r8, r0
 8005da4:	f7fa fb2e 	bl	8000404 <__aeabi_i2d>
 8005da8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005dac:	f7fa fb94 	bl	80004d8 <__aeabi_dmul>
 8005db0:	4602      	mov	r2, r0
 8005db2:	460b      	mov	r3, r1
 8005db4:	4620      	mov	r0, r4
 8005db6:	4629      	mov	r1, r5
 8005db8:	f7fa f9d6 	bl	8000168 <__aeabi_dsub>
 8005dbc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005dc0:	9d07      	ldr	r5, [sp, #28]
 8005dc2:	f806 4b01 	strb.w	r4, [r6], #1
 8005dc6:	eba6 040a 	sub.w	r4, r6, sl
 8005dca:	42a5      	cmp	r5, r4
 8005dcc:	4602      	mov	r2, r0
 8005dce:	460b      	mov	r3, r1
 8005dd0:	f040 8116 	bne.w	8006000 <_dtoa_r+0x6e0>
 8005dd4:	f7fa f9ca 	bl	800016c <__adddf3>
 8005dd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ddc:	4604      	mov	r4, r0
 8005dde:	460d      	mov	r5, r1
 8005de0:	f7fa fe0a 	bl	80009f8 <__aeabi_dcmpgt>
 8005de4:	2800      	cmp	r0, #0
 8005de6:	f040 80f8 	bne.w	8005fda <_dtoa_r+0x6ba>
 8005dea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005dee:	4620      	mov	r0, r4
 8005df0:	4629      	mov	r1, r5
 8005df2:	f7fa fdd9 	bl	80009a8 <__aeabi_dcmpeq>
 8005df6:	b118      	cbz	r0, 8005e00 <_dtoa_r+0x4e0>
 8005df8:	f018 0f01 	tst.w	r8, #1
 8005dfc:	f040 80ed 	bne.w	8005fda <_dtoa_r+0x6ba>
 8005e00:	4649      	mov	r1, r9
 8005e02:	4658      	mov	r0, fp
 8005e04:	f000 fc92 	bl	800672c <_Bfree>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	7033      	strb	r3, [r6, #0]
 8005e0c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005e0e:	3701      	adds	r7, #1
 8005e10:	601f      	str	r7, [r3, #0]
 8005e12:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f000 8320 	beq.w	800645a <_dtoa_r+0xb3a>
 8005e1a:	601e      	str	r6, [r3, #0]
 8005e1c:	e31d      	b.n	800645a <_dtoa_r+0xb3a>
 8005e1e:	07e2      	lsls	r2, r4, #31
 8005e20:	d505      	bpl.n	8005e2e <_dtoa_r+0x50e>
 8005e22:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005e26:	f7fa fb57 	bl	80004d8 <__aeabi_dmul>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	3601      	adds	r6, #1
 8005e2e:	1064      	asrs	r4, r4, #1
 8005e30:	3508      	adds	r5, #8
 8005e32:	e73f      	b.n	8005cb4 <_dtoa_r+0x394>
 8005e34:	2602      	movs	r6, #2
 8005e36:	e742      	b.n	8005cbe <_dtoa_r+0x39e>
 8005e38:	9c07      	ldr	r4, [sp, #28]
 8005e3a:	9704      	str	r7, [sp, #16]
 8005e3c:	e761      	b.n	8005d02 <_dtoa_r+0x3e2>
 8005e3e:	bf00      	nop
 8005e40:	08009030 	.word	0x08009030
 8005e44:	08009008 	.word	0x08009008
 8005e48:	3ff00000 	.word	0x3ff00000
 8005e4c:	40240000 	.word	0x40240000
 8005e50:	401c0000 	.word	0x401c0000
 8005e54:	40140000 	.word	0x40140000
 8005e58:	4b70      	ldr	r3, [pc, #448]	@ (800601c <_dtoa_r+0x6fc>)
 8005e5a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005e5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005e60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005e64:	4454      	add	r4, sl
 8005e66:	2900      	cmp	r1, #0
 8005e68:	d045      	beq.n	8005ef6 <_dtoa_r+0x5d6>
 8005e6a:	2000      	movs	r0, #0
 8005e6c:	496c      	ldr	r1, [pc, #432]	@ (8006020 <_dtoa_r+0x700>)
 8005e6e:	f7fa fc5d 	bl	800072c <__aeabi_ddiv>
 8005e72:	4633      	mov	r3, r6
 8005e74:	462a      	mov	r2, r5
 8005e76:	f7fa f977 	bl	8000168 <__aeabi_dsub>
 8005e7a:	4656      	mov	r6, sl
 8005e7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005e80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e84:	f7fa fdd8 	bl	8000a38 <__aeabi_d2iz>
 8005e88:	4605      	mov	r5, r0
 8005e8a:	f7fa fabb 	bl	8000404 <__aeabi_i2d>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	460b      	mov	r3, r1
 8005e92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e96:	f7fa f967 	bl	8000168 <__aeabi_dsub>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	3530      	adds	r5, #48	@ 0x30
 8005ea0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ea4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005ea8:	f806 5b01 	strb.w	r5, [r6], #1
 8005eac:	f7fa fd86 	bl	80009bc <__aeabi_dcmplt>
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	d163      	bne.n	8005f7c <_dtoa_r+0x65c>
 8005eb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005eb8:	2000      	movs	r0, #0
 8005eba:	495a      	ldr	r1, [pc, #360]	@ (8006024 <_dtoa_r+0x704>)
 8005ebc:	f7fa f954 	bl	8000168 <__aeabi_dsub>
 8005ec0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005ec4:	f7fa fd7a 	bl	80009bc <__aeabi_dcmplt>
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	f040 8087 	bne.w	8005fdc <_dtoa_r+0x6bc>
 8005ece:	42a6      	cmp	r6, r4
 8005ed0:	f43f af43 	beq.w	8005d5a <_dtoa_r+0x43a>
 8005ed4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005ed8:	2200      	movs	r2, #0
 8005eda:	4b53      	ldr	r3, [pc, #332]	@ (8006028 <_dtoa_r+0x708>)
 8005edc:	f7fa fafc 	bl	80004d8 <__aeabi_dmul>
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005ee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005eea:	4b4f      	ldr	r3, [pc, #316]	@ (8006028 <_dtoa_r+0x708>)
 8005eec:	f7fa faf4 	bl	80004d8 <__aeabi_dmul>
 8005ef0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ef4:	e7c4      	b.n	8005e80 <_dtoa_r+0x560>
 8005ef6:	4631      	mov	r1, r6
 8005ef8:	4628      	mov	r0, r5
 8005efa:	f7fa faed 	bl	80004d8 <__aeabi_dmul>
 8005efe:	4656      	mov	r6, sl
 8005f00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005f04:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005f06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f0a:	f7fa fd95 	bl	8000a38 <__aeabi_d2iz>
 8005f0e:	4605      	mov	r5, r0
 8005f10:	f7fa fa78 	bl	8000404 <__aeabi_i2d>
 8005f14:	4602      	mov	r2, r0
 8005f16:	460b      	mov	r3, r1
 8005f18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f1c:	f7fa f924 	bl	8000168 <__aeabi_dsub>
 8005f20:	4602      	mov	r2, r0
 8005f22:	460b      	mov	r3, r1
 8005f24:	3530      	adds	r5, #48	@ 0x30
 8005f26:	f806 5b01 	strb.w	r5, [r6], #1
 8005f2a:	42a6      	cmp	r6, r4
 8005f2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f30:	f04f 0200 	mov.w	r2, #0
 8005f34:	d124      	bne.n	8005f80 <_dtoa_r+0x660>
 8005f36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005f3a:	4b39      	ldr	r3, [pc, #228]	@ (8006020 <_dtoa_r+0x700>)
 8005f3c:	f7fa f916 	bl	800016c <__adddf3>
 8005f40:	4602      	mov	r2, r0
 8005f42:	460b      	mov	r3, r1
 8005f44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f48:	f7fa fd56 	bl	80009f8 <__aeabi_dcmpgt>
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	d145      	bne.n	8005fdc <_dtoa_r+0x6bc>
 8005f50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005f54:	2000      	movs	r0, #0
 8005f56:	4932      	ldr	r1, [pc, #200]	@ (8006020 <_dtoa_r+0x700>)
 8005f58:	f7fa f906 	bl	8000168 <__aeabi_dsub>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	460b      	mov	r3, r1
 8005f60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f64:	f7fa fd2a 	bl	80009bc <__aeabi_dcmplt>
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	f43f aef6 	beq.w	8005d5a <_dtoa_r+0x43a>
 8005f6e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005f70:	1e73      	subs	r3, r6, #1
 8005f72:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005f74:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005f78:	2b30      	cmp	r3, #48	@ 0x30
 8005f7a:	d0f8      	beq.n	8005f6e <_dtoa_r+0x64e>
 8005f7c:	9f04      	ldr	r7, [sp, #16]
 8005f7e:	e73f      	b.n	8005e00 <_dtoa_r+0x4e0>
 8005f80:	4b29      	ldr	r3, [pc, #164]	@ (8006028 <_dtoa_r+0x708>)
 8005f82:	f7fa faa9 	bl	80004d8 <__aeabi_dmul>
 8005f86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f8a:	e7bc      	b.n	8005f06 <_dtoa_r+0x5e6>
 8005f8c:	d10c      	bne.n	8005fa8 <_dtoa_r+0x688>
 8005f8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f92:	2200      	movs	r2, #0
 8005f94:	4b25      	ldr	r3, [pc, #148]	@ (800602c <_dtoa_r+0x70c>)
 8005f96:	f7fa fa9f 	bl	80004d8 <__aeabi_dmul>
 8005f9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f9e:	f7fa fd21 	bl	80009e4 <__aeabi_dcmpge>
 8005fa2:	2800      	cmp	r0, #0
 8005fa4:	f000 815b 	beq.w	800625e <_dtoa_r+0x93e>
 8005fa8:	2400      	movs	r4, #0
 8005faa:	4625      	mov	r5, r4
 8005fac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005fae:	4656      	mov	r6, sl
 8005fb0:	43db      	mvns	r3, r3
 8005fb2:	9304      	str	r3, [sp, #16]
 8005fb4:	2700      	movs	r7, #0
 8005fb6:	4621      	mov	r1, r4
 8005fb8:	4658      	mov	r0, fp
 8005fba:	f000 fbb7 	bl	800672c <_Bfree>
 8005fbe:	2d00      	cmp	r5, #0
 8005fc0:	d0dc      	beq.n	8005f7c <_dtoa_r+0x65c>
 8005fc2:	b12f      	cbz	r7, 8005fd0 <_dtoa_r+0x6b0>
 8005fc4:	42af      	cmp	r7, r5
 8005fc6:	d003      	beq.n	8005fd0 <_dtoa_r+0x6b0>
 8005fc8:	4639      	mov	r1, r7
 8005fca:	4658      	mov	r0, fp
 8005fcc:	f000 fbae 	bl	800672c <_Bfree>
 8005fd0:	4629      	mov	r1, r5
 8005fd2:	4658      	mov	r0, fp
 8005fd4:	f000 fbaa 	bl	800672c <_Bfree>
 8005fd8:	e7d0      	b.n	8005f7c <_dtoa_r+0x65c>
 8005fda:	9704      	str	r7, [sp, #16]
 8005fdc:	4633      	mov	r3, r6
 8005fde:	461e      	mov	r6, r3
 8005fe0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005fe4:	2a39      	cmp	r2, #57	@ 0x39
 8005fe6:	d107      	bne.n	8005ff8 <_dtoa_r+0x6d8>
 8005fe8:	459a      	cmp	sl, r3
 8005fea:	d1f8      	bne.n	8005fde <_dtoa_r+0x6be>
 8005fec:	9a04      	ldr	r2, [sp, #16]
 8005fee:	3201      	adds	r2, #1
 8005ff0:	9204      	str	r2, [sp, #16]
 8005ff2:	2230      	movs	r2, #48	@ 0x30
 8005ff4:	f88a 2000 	strb.w	r2, [sl]
 8005ff8:	781a      	ldrb	r2, [r3, #0]
 8005ffa:	3201      	adds	r2, #1
 8005ffc:	701a      	strb	r2, [r3, #0]
 8005ffe:	e7bd      	b.n	8005f7c <_dtoa_r+0x65c>
 8006000:	2200      	movs	r2, #0
 8006002:	4b09      	ldr	r3, [pc, #36]	@ (8006028 <_dtoa_r+0x708>)
 8006004:	f7fa fa68 	bl	80004d8 <__aeabi_dmul>
 8006008:	2200      	movs	r2, #0
 800600a:	2300      	movs	r3, #0
 800600c:	4604      	mov	r4, r0
 800600e:	460d      	mov	r5, r1
 8006010:	f7fa fcca 	bl	80009a8 <__aeabi_dcmpeq>
 8006014:	2800      	cmp	r0, #0
 8006016:	f43f aebc 	beq.w	8005d92 <_dtoa_r+0x472>
 800601a:	e6f1      	b.n	8005e00 <_dtoa_r+0x4e0>
 800601c:	08009030 	.word	0x08009030
 8006020:	3fe00000 	.word	0x3fe00000
 8006024:	3ff00000 	.word	0x3ff00000
 8006028:	40240000 	.word	0x40240000
 800602c:	40140000 	.word	0x40140000
 8006030:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006032:	2a00      	cmp	r2, #0
 8006034:	f000 80db 	beq.w	80061ee <_dtoa_r+0x8ce>
 8006038:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800603a:	2a01      	cmp	r2, #1
 800603c:	f300 80bf 	bgt.w	80061be <_dtoa_r+0x89e>
 8006040:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006042:	2a00      	cmp	r2, #0
 8006044:	f000 80b7 	beq.w	80061b6 <_dtoa_r+0x896>
 8006048:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800604c:	4646      	mov	r6, r8
 800604e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006050:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006052:	2101      	movs	r1, #1
 8006054:	441a      	add	r2, r3
 8006056:	4658      	mov	r0, fp
 8006058:	4498      	add	r8, r3
 800605a:	9209      	str	r2, [sp, #36]	@ 0x24
 800605c:	f000 fc64 	bl	8006928 <__i2b>
 8006060:	4605      	mov	r5, r0
 8006062:	b15e      	cbz	r6, 800607c <_dtoa_r+0x75c>
 8006064:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006066:	2b00      	cmp	r3, #0
 8006068:	dd08      	ble.n	800607c <_dtoa_r+0x75c>
 800606a:	42b3      	cmp	r3, r6
 800606c:	bfa8      	it	ge
 800606e:	4633      	movge	r3, r6
 8006070:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006072:	eba8 0803 	sub.w	r8, r8, r3
 8006076:	1af6      	subs	r6, r6, r3
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	9309      	str	r3, [sp, #36]	@ 0x24
 800607c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800607e:	b1f3      	cbz	r3, 80060be <_dtoa_r+0x79e>
 8006080:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 80b7 	beq.w	80061f6 <_dtoa_r+0x8d6>
 8006088:	b18c      	cbz	r4, 80060ae <_dtoa_r+0x78e>
 800608a:	4629      	mov	r1, r5
 800608c:	4622      	mov	r2, r4
 800608e:	4658      	mov	r0, fp
 8006090:	f000 fd08 	bl	8006aa4 <__pow5mult>
 8006094:	464a      	mov	r2, r9
 8006096:	4601      	mov	r1, r0
 8006098:	4605      	mov	r5, r0
 800609a:	4658      	mov	r0, fp
 800609c:	f000 fc5a 	bl	8006954 <__multiply>
 80060a0:	4649      	mov	r1, r9
 80060a2:	9004      	str	r0, [sp, #16]
 80060a4:	4658      	mov	r0, fp
 80060a6:	f000 fb41 	bl	800672c <_Bfree>
 80060aa:	9b04      	ldr	r3, [sp, #16]
 80060ac:	4699      	mov	r9, r3
 80060ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060b0:	1b1a      	subs	r2, r3, r4
 80060b2:	d004      	beq.n	80060be <_dtoa_r+0x79e>
 80060b4:	4649      	mov	r1, r9
 80060b6:	4658      	mov	r0, fp
 80060b8:	f000 fcf4 	bl	8006aa4 <__pow5mult>
 80060bc:	4681      	mov	r9, r0
 80060be:	2101      	movs	r1, #1
 80060c0:	4658      	mov	r0, fp
 80060c2:	f000 fc31 	bl	8006928 <__i2b>
 80060c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060c8:	4604      	mov	r4, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f000 81c9 	beq.w	8006462 <_dtoa_r+0xb42>
 80060d0:	461a      	mov	r2, r3
 80060d2:	4601      	mov	r1, r0
 80060d4:	4658      	mov	r0, fp
 80060d6:	f000 fce5 	bl	8006aa4 <__pow5mult>
 80060da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80060dc:	4604      	mov	r4, r0
 80060de:	2b01      	cmp	r3, #1
 80060e0:	f300 808f 	bgt.w	8006202 <_dtoa_r+0x8e2>
 80060e4:	9b02      	ldr	r3, [sp, #8]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	f040 8087 	bne.w	80061fa <_dtoa_r+0x8da>
 80060ec:	9b03      	ldr	r3, [sp, #12]
 80060ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f040 8083 	bne.w	80061fe <_dtoa_r+0x8de>
 80060f8:	9b03      	ldr	r3, [sp, #12]
 80060fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80060fe:	0d1b      	lsrs	r3, r3, #20
 8006100:	051b      	lsls	r3, r3, #20
 8006102:	b12b      	cbz	r3, 8006110 <_dtoa_r+0x7f0>
 8006104:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006106:	f108 0801 	add.w	r8, r8, #1
 800610a:	3301      	adds	r3, #1
 800610c:	9309      	str	r3, [sp, #36]	@ 0x24
 800610e:	2301      	movs	r3, #1
 8006110:	930a      	str	r3, [sp, #40]	@ 0x28
 8006112:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006114:	2b00      	cmp	r3, #0
 8006116:	f000 81aa 	beq.w	800646e <_dtoa_r+0xb4e>
 800611a:	6923      	ldr	r3, [r4, #16]
 800611c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006120:	6918      	ldr	r0, [r3, #16]
 8006122:	f000 fbb5 	bl	8006890 <__hi0bits>
 8006126:	f1c0 0020 	rsb	r0, r0, #32
 800612a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800612c:	4418      	add	r0, r3
 800612e:	f010 001f 	ands.w	r0, r0, #31
 8006132:	d071      	beq.n	8006218 <_dtoa_r+0x8f8>
 8006134:	f1c0 0320 	rsb	r3, r0, #32
 8006138:	2b04      	cmp	r3, #4
 800613a:	dd65      	ble.n	8006208 <_dtoa_r+0x8e8>
 800613c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800613e:	f1c0 001c 	rsb	r0, r0, #28
 8006142:	4403      	add	r3, r0
 8006144:	4480      	add	r8, r0
 8006146:	4406      	add	r6, r0
 8006148:	9309      	str	r3, [sp, #36]	@ 0x24
 800614a:	f1b8 0f00 	cmp.w	r8, #0
 800614e:	dd05      	ble.n	800615c <_dtoa_r+0x83c>
 8006150:	4649      	mov	r1, r9
 8006152:	4642      	mov	r2, r8
 8006154:	4658      	mov	r0, fp
 8006156:	f000 fcff 	bl	8006b58 <__lshift>
 800615a:	4681      	mov	r9, r0
 800615c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800615e:	2b00      	cmp	r3, #0
 8006160:	dd05      	ble.n	800616e <_dtoa_r+0x84e>
 8006162:	4621      	mov	r1, r4
 8006164:	461a      	mov	r2, r3
 8006166:	4658      	mov	r0, fp
 8006168:	f000 fcf6 	bl	8006b58 <__lshift>
 800616c:	4604      	mov	r4, r0
 800616e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006170:	2b00      	cmp	r3, #0
 8006172:	d053      	beq.n	800621c <_dtoa_r+0x8fc>
 8006174:	4621      	mov	r1, r4
 8006176:	4648      	mov	r0, r9
 8006178:	f000 fd5a 	bl	8006c30 <__mcmp>
 800617c:	2800      	cmp	r0, #0
 800617e:	da4d      	bge.n	800621c <_dtoa_r+0x8fc>
 8006180:	1e7b      	subs	r3, r7, #1
 8006182:	4649      	mov	r1, r9
 8006184:	9304      	str	r3, [sp, #16]
 8006186:	220a      	movs	r2, #10
 8006188:	2300      	movs	r3, #0
 800618a:	4658      	mov	r0, fp
 800618c:	f000 faf0 	bl	8006770 <__multadd>
 8006190:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006192:	4681      	mov	r9, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 816c 	beq.w	8006472 <_dtoa_r+0xb52>
 800619a:	2300      	movs	r3, #0
 800619c:	4629      	mov	r1, r5
 800619e:	220a      	movs	r2, #10
 80061a0:	4658      	mov	r0, fp
 80061a2:	f000 fae5 	bl	8006770 <__multadd>
 80061a6:	9b08      	ldr	r3, [sp, #32]
 80061a8:	4605      	mov	r5, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	dc61      	bgt.n	8006272 <_dtoa_r+0x952>
 80061ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	dc3b      	bgt.n	800622c <_dtoa_r+0x90c>
 80061b4:	e05d      	b.n	8006272 <_dtoa_r+0x952>
 80061b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80061b8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80061bc:	e746      	b.n	800604c <_dtoa_r+0x72c>
 80061be:	9b07      	ldr	r3, [sp, #28]
 80061c0:	1e5c      	subs	r4, r3, #1
 80061c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061c4:	42a3      	cmp	r3, r4
 80061c6:	bfbf      	itttt	lt
 80061c8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80061ca:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80061cc:	1ae3      	sublt	r3, r4, r3
 80061ce:	18d2      	addlt	r2, r2, r3
 80061d0:	bfa8      	it	ge
 80061d2:	1b1c      	subge	r4, r3, r4
 80061d4:	9b07      	ldr	r3, [sp, #28]
 80061d6:	bfbe      	ittt	lt
 80061d8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80061da:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80061dc:	2400      	movlt	r4, #0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	bfb5      	itete	lt
 80061e2:	eba8 0603 	sublt.w	r6, r8, r3
 80061e6:	4646      	movge	r6, r8
 80061e8:	2300      	movlt	r3, #0
 80061ea:	9b07      	ldrge	r3, [sp, #28]
 80061ec:	e730      	b.n	8006050 <_dtoa_r+0x730>
 80061ee:	4646      	mov	r6, r8
 80061f0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80061f2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80061f4:	e735      	b.n	8006062 <_dtoa_r+0x742>
 80061f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80061f8:	e75c      	b.n	80060b4 <_dtoa_r+0x794>
 80061fa:	2300      	movs	r3, #0
 80061fc:	e788      	b.n	8006110 <_dtoa_r+0x7f0>
 80061fe:	9b02      	ldr	r3, [sp, #8]
 8006200:	e786      	b.n	8006110 <_dtoa_r+0x7f0>
 8006202:	2300      	movs	r3, #0
 8006204:	930a      	str	r3, [sp, #40]	@ 0x28
 8006206:	e788      	b.n	800611a <_dtoa_r+0x7fa>
 8006208:	d09f      	beq.n	800614a <_dtoa_r+0x82a>
 800620a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800620c:	331c      	adds	r3, #28
 800620e:	441a      	add	r2, r3
 8006210:	4498      	add	r8, r3
 8006212:	441e      	add	r6, r3
 8006214:	9209      	str	r2, [sp, #36]	@ 0x24
 8006216:	e798      	b.n	800614a <_dtoa_r+0x82a>
 8006218:	4603      	mov	r3, r0
 800621a:	e7f6      	b.n	800620a <_dtoa_r+0x8ea>
 800621c:	9b07      	ldr	r3, [sp, #28]
 800621e:	9704      	str	r7, [sp, #16]
 8006220:	2b00      	cmp	r3, #0
 8006222:	dc20      	bgt.n	8006266 <_dtoa_r+0x946>
 8006224:	9308      	str	r3, [sp, #32]
 8006226:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006228:	2b02      	cmp	r3, #2
 800622a:	dd1e      	ble.n	800626a <_dtoa_r+0x94a>
 800622c:	9b08      	ldr	r3, [sp, #32]
 800622e:	2b00      	cmp	r3, #0
 8006230:	f47f aebc 	bne.w	8005fac <_dtoa_r+0x68c>
 8006234:	4621      	mov	r1, r4
 8006236:	2205      	movs	r2, #5
 8006238:	4658      	mov	r0, fp
 800623a:	f000 fa99 	bl	8006770 <__multadd>
 800623e:	4601      	mov	r1, r0
 8006240:	4604      	mov	r4, r0
 8006242:	4648      	mov	r0, r9
 8006244:	f000 fcf4 	bl	8006c30 <__mcmp>
 8006248:	2800      	cmp	r0, #0
 800624a:	f77f aeaf 	ble.w	8005fac <_dtoa_r+0x68c>
 800624e:	2331      	movs	r3, #49	@ 0x31
 8006250:	4656      	mov	r6, sl
 8006252:	f806 3b01 	strb.w	r3, [r6], #1
 8006256:	9b04      	ldr	r3, [sp, #16]
 8006258:	3301      	adds	r3, #1
 800625a:	9304      	str	r3, [sp, #16]
 800625c:	e6aa      	b.n	8005fb4 <_dtoa_r+0x694>
 800625e:	9c07      	ldr	r4, [sp, #28]
 8006260:	9704      	str	r7, [sp, #16]
 8006262:	4625      	mov	r5, r4
 8006264:	e7f3      	b.n	800624e <_dtoa_r+0x92e>
 8006266:	9b07      	ldr	r3, [sp, #28]
 8006268:	9308      	str	r3, [sp, #32]
 800626a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800626c:	2b00      	cmp	r3, #0
 800626e:	f000 8104 	beq.w	800647a <_dtoa_r+0xb5a>
 8006272:	2e00      	cmp	r6, #0
 8006274:	dd05      	ble.n	8006282 <_dtoa_r+0x962>
 8006276:	4629      	mov	r1, r5
 8006278:	4632      	mov	r2, r6
 800627a:	4658      	mov	r0, fp
 800627c:	f000 fc6c 	bl	8006b58 <__lshift>
 8006280:	4605      	mov	r5, r0
 8006282:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006284:	2b00      	cmp	r3, #0
 8006286:	d05a      	beq.n	800633e <_dtoa_r+0xa1e>
 8006288:	4658      	mov	r0, fp
 800628a:	6869      	ldr	r1, [r5, #4]
 800628c:	f000 fa0e 	bl	80066ac <_Balloc>
 8006290:	4606      	mov	r6, r0
 8006292:	b928      	cbnz	r0, 80062a0 <_dtoa_r+0x980>
 8006294:	4602      	mov	r2, r0
 8006296:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800629a:	4b83      	ldr	r3, [pc, #524]	@ (80064a8 <_dtoa_r+0xb88>)
 800629c:	f7ff bb54 	b.w	8005948 <_dtoa_r+0x28>
 80062a0:	692a      	ldr	r2, [r5, #16]
 80062a2:	f105 010c 	add.w	r1, r5, #12
 80062a6:	3202      	adds	r2, #2
 80062a8:	0092      	lsls	r2, r2, #2
 80062aa:	300c      	adds	r0, #12
 80062ac:	f002 f932 	bl	8008514 <memcpy>
 80062b0:	2201      	movs	r2, #1
 80062b2:	4631      	mov	r1, r6
 80062b4:	4658      	mov	r0, fp
 80062b6:	f000 fc4f 	bl	8006b58 <__lshift>
 80062ba:	462f      	mov	r7, r5
 80062bc:	4605      	mov	r5, r0
 80062be:	f10a 0301 	add.w	r3, sl, #1
 80062c2:	9307      	str	r3, [sp, #28]
 80062c4:	9b08      	ldr	r3, [sp, #32]
 80062c6:	4453      	add	r3, sl
 80062c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80062ca:	9b02      	ldr	r3, [sp, #8]
 80062cc:	f003 0301 	and.w	r3, r3, #1
 80062d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80062d2:	9b07      	ldr	r3, [sp, #28]
 80062d4:	4621      	mov	r1, r4
 80062d6:	3b01      	subs	r3, #1
 80062d8:	4648      	mov	r0, r9
 80062da:	9302      	str	r3, [sp, #8]
 80062dc:	f7ff fa98 	bl	8005810 <quorem>
 80062e0:	4639      	mov	r1, r7
 80062e2:	9008      	str	r0, [sp, #32]
 80062e4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80062e8:	4648      	mov	r0, r9
 80062ea:	f000 fca1 	bl	8006c30 <__mcmp>
 80062ee:	462a      	mov	r2, r5
 80062f0:	9009      	str	r0, [sp, #36]	@ 0x24
 80062f2:	4621      	mov	r1, r4
 80062f4:	4658      	mov	r0, fp
 80062f6:	f000 fcb7 	bl	8006c68 <__mdiff>
 80062fa:	68c2      	ldr	r2, [r0, #12]
 80062fc:	4606      	mov	r6, r0
 80062fe:	bb02      	cbnz	r2, 8006342 <_dtoa_r+0xa22>
 8006300:	4601      	mov	r1, r0
 8006302:	4648      	mov	r0, r9
 8006304:	f000 fc94 	bl	8006c30 <__mcmp>
 8006308:	4602      	mov	r2, r0
 800630a:	4631      	mov	r1, r6
 800630c:	4658      	mov	r0, fp
 800630e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006310:	f000 fa0c 	bl	800672c <_Bfree>
 8006314:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006316:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006318:	9e07      	ldr	r6, [sp, #28]
 800631a:	ea43 0102 	orr.w	r1, r3, r2
 800631e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006320:	4319      	orrs	r1, r3
 8006322:	d110      	bne.n	8006346 <_dtoa_r+0xa26>
 8006324:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006328:	d029      	beq.n	800637e <_dtoa_r+0xa5e>
 800632a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800632c:	2b00      	cmp	r3, #0
 800632e:	dd02      	ble.n	8006336 <_dtoa_r+0xa16>
 8006330:	9b08      	ldr	r3, [sp, #32]
 8006332:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006336:	9b02      	ldr	r3, [sp, #8]
 8006338:	f883 8000 	strb.w	r8, [r3]
 800633c:	e63b      	b.n	8005fb6 <_dtoa_r+0x696>
 800633e:	4628      	mov	r0, r5
 8006340:	e7bb      	b.n	80062ba <_dtoa_r+0x99a>
 8006342:	2201      	movs	r2, #1
 8006344:	e7e1      	b.n	800630a <_dtoa_r+0x9ea>
 8006346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006348:	2b00      	cmp	r3, #0
 800634a:	db04      	blt.n	8006356 <_dtoa_r+0xa36>
 800634c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800634e:	430b      	orrs	r3, r1
 8006350:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006352:	430b      	orrs	r3, r1
 8006354:	d120      	bne.n	8006398 <_dtoa_r+0xa78>
 8006356:	2a00      	cmp	r2, #0
 8006358:	dded      	ble.n	8006336 <_dtoa_r+0xa16>
 800635a:	4649      	mov	r1, r9
 800635c:	2201      	movs	r2, #1
 800635e:	4658      	mov	r0, fp
 8006360:	f000 fbfa 	bl	8006b58 <__lshift>
 8006364:	4621      	mov	r1, r4
 8006366:	4681      	mov	r9, r0
 8006368:	f000 fc62 	bl	8006c30 <__mcmp>
 800636c:	2800      	cmp	r0, #0
 800636e:	dc03      	bgt.n	8006378 <_dtoa_r+0xa58>
 8006370:	d1e1      	bne.n	8006336 <_dtoa_r+0xa16>
 8006372:	f018 0f01 	tst.w	r8, #1
 8006376:	d0de      	beq.n	8006336 <_dtoa_r+0xa16>
 8006378:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800637c:	d1d8      	bne.n	8006330 <_dtoa_r+0xa10>
 800637e:	2339      	movs	r3, #57	@ 0x39
 8006380:	9a02      	ldr	r2, [sp, #8]
 8006382:	7013      	strb	r3, [r2, #0]
 8006384:	4633      	mov	r3, r6
 8006386:	461e      	mov	r6, r3
 8006388:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800638c:	3b01      	subs	r3, #1
 800638e:	2a39      	cmp	r2, #57	@ 0x39
 8006390:	d052      	beq.n	8006438 <_dtoa_r+0xb18>
 8006392:	3201      	adds	r2, #1
 8006394:	701a      	strb	r2, [r3, #0]
 8006396:	e60e      	b.n	8005fb6 <_dtoa_r+0x696>
 8006398:	2a00      	cmp	r2, #0
 800639a:	dd07      	ble.n	80063ac <_dtoa_r+0xa8c>
 800639c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80063a0:	d0ed      	beq.n	800637e <_dtoa_r+0xa5e>
 80063a2:	9a02      	ldr	r2, [sp, #8]
 80063a4:	f108 0301 	add.w	r3, r8, #1
 80063a8:	7013      	strb	r3, [r2, #0]
 80063aa:	e604      	b.n	8005fb6 <_dtoa_r+0x696>
 80063ac:	9b07      	ldr	r3, [sp, #28]
 80063ae:	9a07      	ldr	r2, [sp, #28]
 80063b0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80063b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d028      	beq.n	800640c <_dtoa_r+0xaec>
 80063ba:	4649      	mov	r1, r9
 80063bc:	2300      	movs	r3, #0
 80063be:	220a      	movs	r2, #10
 80063c0:	4658      	mov	r0, fp
 80063c2:	f000 f9d5 	bl	8006770 <__multadd>
 80063c6:	42af      	cmp	r7, r5
 80063c8:	4681      	mov	r9, r0
 80063ca:	f04f 0300 	mov.w	r3, #0
 80063ce:	f04f 020a 	mov.w	r2, #10
 80063d2:	4639      	mov	r1, r7
 80063d4:	4658      	mov	r0, fp
 80063d6:	d107      	bne.n	80063e8 <_dtoa_r+0xac8>
 80063d8:	f000 f9ca 	bl	8006770 <__multadd>
 80063dc:	4607      	mov	r7, r0
 80063de:	4605      	mov	r5, r0
 80063e0:	9b07      	ldr	r3, [sp, #28]
 80063e2:	3301      	adds	r3, #1
 80063e4:	9307      	str	r3, [sp, #28]
 80063e6:	e774      	b.n	80062d2 <_dtoa_r+0x9b2>
 80063e8:	f000 f9c2 	bl	8006770 <__multadd>
 80063ec:	4629      	mov	r1, r5
 80063ee:	4607      	mov	r7, r0
 80063f0:	2300      	movs	r3, #0
 80063f2:	220a      	movs	r2, #10
 80063f4:	4658      	mov	r0, fp
 80063f6:	f000 f9bb 	bl	8006770 <__multadd>
 80063fa:	4605      	mov	r5, r0
 80063fc:	e7f0      	b.n	80063e0 <_dtoa_r+0xac0>
 80063fe:	9b08      	ldr	r3, [sp, #32]
 8006400:	2700      	movs	r7, #0
 8006402:	2b00      	cmp	r3, #0
 8006404:	bfcc      	ite	gt
 8006406:	461e      	movgt	r6, r3
 8006408:	2601      	movle	r6, #1
 800640a:	4456      	add	r6, sl
 800640c:	4649      	mov	r1, r9
 800640e:	2201      	movs	r2, #1
 8006410:	4658      	mov	r0, fp
 8006412:	f000 fba1 	bl	8006b58 <__lshift>
 8006416:	4621      	mov	r1, r4
 8006418:	4681      	mov	r9, r0
 800641a:	f000 fc09 	bl	8006c30 <__mcmp>
 800641e:	2800      	cmp	r0, #0
 8006420:	dcb0      	bgt.n	8006384 <_dtoa_r+0xa64>
 8006422:	d102      	bne.n	800642a <_dtoa_r+0xb0a>
 8006424:	f018 0f01 	tst.w	r8, #1
 8006428:	d1ac      	bne.n	8006384 <_dtoa_r+0xa64>
 800642a:	4633      	mov	r3, r6
 800642c:	461e      	mov	r6, r3
 800642e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006432:	2a30      	cmp	r2, #48	@ 0x30
 8006434:	d0fa      	beq.n	800642c <_dtoa_r+0xb0c>
 8006436:	e5be      	b.n	8005fb6 <_dtoa_r+0x696>
 8006438:	459a      	cmp	sl, r3
 800643a:	d1a4      	bne.n	8006386 <_dtoa_r+0xa66>
 800643c:	9b04      	ldr	r3, [sp, #16]
 800643e:	3301      	adds	r3, #1
 8006440:	9304      	str	r3, [sp, #16]
 8006442:	2331      	movs	r3, #49	@ 0x31
 8006444:	f88a 3000 	strb.w	r3, [sl]
 8006448:	e5b5      	b.n	8005fb6 <_dtoa_r+0x696>
 800644a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800644c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80064ac <_dtoa_r+0xb8c>
 8006450:	b11b      	cbz	r3, 800645a <_dtoa_r+0xb3a>
 8006452:	f10a 0308 	add.w	r3, sl, #8
 8006456:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006458:	6013      	str	r3, [r2, #0]
 800645a:	4650      	mov	r0, sl
 800645c:	b017      	add	sp, #92	@ 0x5c
 800645e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006462:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006464:	2b01      	cmp	r3, #1
 8006466:	f77f ae3d 	ble.w	80060e4 <_dtoa_r+0x7c4>
 800646a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800646c:	930a      	str	r3, [sp, #40]	@ 0x28
 800646e:	2001      	movs	r0, #1
 8006470:	e65b      	b.n	800612a <_dtoa_r+0x80a>
 8006472:	9b08      	ldr	r3, [sp, #32]
 8006474:	2b00      	cmp	r3, #0
 8006476:	f77f aed6 	ble.w	8006226 <_dtoa_r+0x906>
 800647a:	4656      	mov	r6, sl
 800647c:	4621      	mov	r1, r4
 800647e:	4648      	mov	r0, r9
 8006480:	f7ff f9c6 	bl	8005810 <quorem>
 8006484:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006488:	9b08      	ldr	r3, [sp, #32]
 800648a:	f806 8b01 	strb.w	r8, [r6], #1
 800648e:	eba6 020a 	sub.w	r2, r6, sl
 8006492:	4293      	cmp	r3, r2
 8006494:	ddb3      	ble.n	80063fe <_dtoa_r+0xade>
 8006496:	4649      	mov	r1, r9
 8006498:	2300      	movs	r3, #0
 800649a:	220a      	movs	r2, #10
 800649c:	4658      	mov	r0, fp
 800649e:	f000 f967 	bl	8006770 <__multadd>
 80064a2:	4681      	mov	r9, r0
 80064a4:	e7ea      	b.n	800647c <_dtoa_r+0xb5c>
 80064a6:	bf00      	nop
 80064a8:	08008f8b 	.word	0x08008f8b
 80064ac:	08008f0f 	.word	0x08008f0f

080064b0 <_free_r>:
 80064b0:	b538      	push	{r3, r4, r5, lr}
 80064b2:	4605      	mov	r5, r0
 80064b4:	2900      	cmp	r1, #0
 80064b6:	d040      	beq.n	800653a <_free_r+0x8a>
 80064b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064bc:	1f0c      	subs	r4, r1, #4
 80064be:	2b00      	cmp	r3, #0
 80064c0:	bfb8      	it	lt
 80064c2:	18e4      	addlt	r4, r4, r3
 80064c4:	f000 f8e6 	bl	8006694 <__malloc_lock>
 80064c8:	4a1c      	ldr	r2, [pc, #112]	@ (800653c <_free_r+0x8c>)
 80064ca:	6813      	ldr	r3, [r2, #0]
 80064cc:	b933      	cbnz	r3, 80064dc <_free_r+0x2c>
 80064ce:	6063      	str	r3, [r4, #4]
 80064d0:	6014      	str	r4, [r2, #0]
 80064d2:	4628      	mov	r0, r5
 80064d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064d8:	f000 b8e2 	b.w	80066a0 <__malloc_unlock>
 80064dc:	42a3      	cmp	r3, r4
 80064de:	d908      	bls.n	80064f2 <_free_r+0x42>
 80064e0:	6820      	ldr	r0, [r4, #0]
 80064e2:	1821      	adds	r1, r4, r0
 80064e4:	428b      	cmp	r3, r1
 80064e6:	bf01      	itttt	eq
 80064e8:	6819      	ldreq	r1, [r3, #0]
 80064ea:	685b      	ldreq	r3, [r3, #4]
 80064ec:	1809      	addeq	r1, r1, r0
 80064ee:	6021      	streq	r1, [r4, #0]
 80064f0:	e7ed      	b.n	80064ce <_free_r+0x1e>
 80064f2:	461a      	mov	r2, r3
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	b10b      	cbz	r3, 80064fc <_free_r+0x4c>
 80064f8:	42a3      	cmp	r3, r4
 80064fa:	d9fa      	bls.n	80064f2 <_free_r+0x42>
 80064fc:	6811      	ldr	r1, [r2, #0]
 80064fe:	1850      	adds	r0, r2, r1
 8006500:	42a0      	cmp	r0, r4
 8006502:	d10b      	bne.n	800651c <_free_r+0x6c>
 8006504:	6820      	ldr	r0, [r4, #0]
 8006506:	4401      	add	r1, r0
 8006508:	1850      	adds	r0, r2, r1
 800650a:	4283      	cmp	r3, r0
 800650c:	6011      	str	r1, [r2, #0]
 800650e:	d1e0      	bne.n	80064d2 <_free_r+0x22>
 8006510:	6818      	ldr	r0, [r3, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	4408      	add	r0, r1
 8006516:	6010      	str	r0, [r2, #0]
 8006518:	6053      	str	r3, [r2, #4]
 800651a:	e7da      	b.n	80064d2 <_free_r+0x22>
 800651c:	d902      	bls.n	8006524 <_free_r+0x74>
 800651e:	230c      	movs	r3, #12
 8006520:	602b      	str	r3, [r5, #0]
 8006522:	e7d6      	b.n	80064d2 <_free_r+0x22>
 8006524:	6820      	ldr	r0, [r4, #0]
 8006526:	1821      	adds	r1, r4, r0
 8006528:	428b      	cmp	r3, r1
 800652a:	bf01      	itttt	eq
 800652c:	6819      	ldreq	r1, [r3, #0]
 800652e:	685b      	ldreq	r3, [r3, #4]
 8006530:	1809      	addeq	r1, r1, r0
 8006532:	6021      	streq	r1, [r4, #0]
 8006534:	6063      	str	r3, [r4, #4]
 8006536:	6054      	str	r4, [r2, #4]
 8006538:	e7cb      	b.n	80064d2 <_free_r+0x22>
 800653a:	bd38      	pop	{r3, r4, r5, pc}
 800653c:	20000494 	.word	0x20000494

08006540 <malloc>:
 8006540:	4b02      	ldr	r3, [pc, #8]	@ (800654c <malloc+0xc>)
 8006542:	4601      	mov	r1, r0
 8006544:	6818      	ldr	r0, [r3, #0]
 8006546:	f000 b825 	b.w	8006594 <_malloc_r>
 800654a:	bf00      	nop
 800654c:	2000002c 	.word	0x2000002c

08006550 <sbrk_aligned>:
 8006550:	b570      	push	{r4, r5, r6, lr}
 8006552:	4e0f      	ldr	r6, [pc, #60]	@ (8006590 <sbrk_aligned+0x40>)
 8006554:	460c      	mov	r4, r1
 8006556:	6831      	ldr	r1, [r6, #0]
 8006558:	4605      	mov	r5, r0
 800655a:	b911      	cbnz	r1, 8006562 <sbrk_aligned+0x12>
 800655c:	f001 ffca 	bl	80084f4 <_sbrk_r>
 8006560:	6030      	str	r0, [r6, #0]
 8006562:	4621      	mov	r1, r4
 8006564:	4628      	mov	r0, r5
 8006566:	f001 ffc5 	bl	80084f4 <_sbrk_r>
 800656a:	1c43      	adds	r3, r0, #1
 800656c:	d103      	bne.n	8006576 <sbrk_aligned+0x26>
 800656e:	f04f 34ff 	mov.w	r4, #4294967295
 8006572:	4620      	mov	r0, r4
 8006574:	bd70      	pop	{r4, r5, r6, pc}
 8006576:	1cc4      	adds	r4, r0, #3
 8006578:	f024 0403 	bic.w	r4, r4, #3
 800657c:	42a0      	cmp	r0, r4
 800657e:	d0f8      	beq.n	8006572 <sbrk_aligned+0x22>
 8006580:	1a21      	subs	r1, r4, r0
 8006582:	4628      	mov	r0, r5
 8006584:	f001 ffb6 	bl	80084f4 <_sbrk_r>
 8006588:	3001      	adds	r0, #1
 800658a:	d1f2      	bne.n	8006572 <sbrk_aligned+0x22>
 800658c:	e7ef      	b.n	800656e <sbrk_aligned+0x1e>
 800658e:	bf00      	nop
 8006590:	20000490 	.word	0x20000490

08006594 <_malloc_r>:
 8006594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006598:	1ccd      	adds	r5, r1, #3
 800659a:	f025 0503 	bic.w	r5, r5, #3
 800659e:	3508      	adds	r5, #8
 80065a0:	2d0c      	cmp	r5, #12
 80065a2:	bf38      	it	cc
 80065a4:	250c      	movcc	r5, #12
 80065a6:	2d00      	cmp	r5, #0
 80065a8:	4606      	mov	r6, r0
 80065aa:	db01      	blt.n	80065b0 <_malloc_r+0x1c>
 80065ac:	42a9      	cmp	r1, r5
 80065ae:	d904      	bls.n	80065ba <_malloc_r+0x26>
 80065b0:	230c      	movs	r3, #12
 80065b2:	6033      	str	r3, [r6, #0]
 80065b4:	2000      	movs	r0, #0
 80065b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006690 <_malloc_r+0xfc>
 80065be:	f000 f869 	bl	8006694 <__malloc_lock>
 80065c2:	f8d8 3000 	ldr.w	r3, [r8]
 80065c6:	461c      	mov	r4, r3
 80065c8:	bb44      	cbnz	r4, 800661c <_malloc_r+0x88>
 80065ca:	4629      	mov	r1, r5
 80065cc:	4630      	mov	r0, r6
 80065ce:	f7ff ffbf 	bl	8006550 <sbrk_aligned>
 80065d2:	1c43      	adds	r3, r0, #1
 80065d4:	4604      	mov	r4, r0
 80065d6:	d158      	bne.n	800668a <_malloc_r+0xf6>
 80065d8:	f8d8 4000 	ldr.w	r4, [r8]
 80065dc:	4627      	mov	r7, r4
 80065de:	2f00      	cmp	r7, #0
 80065e0:	d143      	bne.n	800666a <_malloc_r+0xd6>
 80065e2:	2c00      	cmp	r4, #0
 80065e4:	d04b      	beq.n	800667e <_malloc_r+0xea>
 80065e6:	6823      	ldr	r3, [r4, #0]
 80065e8:	4639      	mov	r1, r7
 80065ea:	4630      	mov	r0, r6
 80065ec:	eb04 0903 	add.w	r9, r4, r3
 80065f0:	f001 ff80 	bl	80084f4 <_sbrk_r>
 80065f4:	4581      	cmp	r9, r0
 80065f6:	d142      	bne.n	800667e <_malloc_r+0xea>
 80065f8:	6821      	ldr	r1, [r4, #0]
 80065fa:	4630      	mov	r0, r6
 80065fc:	1a6d      	subs	r5, r5, r1
 80065fe:	4629      	mov	r1, r5
 8006600:	f7ff ffa6 	bl	8006550 <sbrk_aligned>
 8006604:	3001      	adds	r0, #1
 8006606:	d03a      	beq.n	800667e <_malloc_r+0xea>
 8006608:	6823      	ldr	r3, [r4, #0]
 800660a:	442b      	add	r3, r5
 800660c:	6023      	str	r3, [r4, #0]
 800660e:	f8d8 3000 	ldr.w	r3, [r8]
 8006612:	685a      	ldr	r2, [r3, #4]
 8006614:	bb62      	cbnz	r2, 8006670 <_malloc_r+0xdc>
 8006616:	f8c8 7000 	str.w	r7, [r8]
 800661a:	e00f      	b.n	800663c <_malloc_r+0xa8>
 800661c:	6822      	ldr	r2, [r4, #0]
 800661e:	1b52      	subs	r2, r2, r5
 8006620:	d420      	bmi.n	8006664 <_malloc_r+0xd0>
 8006622:	2a0b      	cmp	r2, #11
 8006624:	d917      	bls.n	8006656 <_malloc_r+0xc2>
 8006626:	1961      	adds	r1, r4, r5
 8006628:	42a3      	cmp	r3, r4
 800662a:	6025      	str	r5, [r4, #0]
 800662c:	bf18      	it	ne
 800662e:	6059      	strne	r1, [r3, #4]
 8006630:	6863      	ldr	r3, [r4, #4]
 8006632:	bf08      	it	eq
 8006634:	f8c8 1000 	streq.w	r1, [r8]
 8006638:	5162      	str	r2, [r4, r5]
 800663a:	604b      	str	r3, [r1, #4]
 800663c:	4630      	mov	r0, r6
 800663e:	f000 f82f 	bl	80066a0 <__malloc_unlock>
 8006642:	f104 000b 	add.w	r0, r4, #11
 8006646:	1d23      	adds	r3, r4, #4
 8006648:	f020 0007 	bic.w	r0, r0, #7
 800664c:	1ac2      	subs	r2, r0, r3
 800664e:	bf1c      	itt	ne
 8006650:	1a1b      	subne	r3, r3, r0
 8006652:	50a3      	strne	r3, [r4, r2]
 8006654:	e7af      	b.n	80065b6 <_malloc_r+0x22>
 8006656:	6862      	ldr	r2, [r4, #4]
 8006658:	42a3      	cmp	r3, r4
 800665a:	bf0c      	ite	eq
 800665c:	f8c8 2000 	streq.w	r2, [r8]
 8006660:	605a      	strne	r2, [r3, #4]
 8006662:	e7eb      	b.n	800663c <_malloc_r+0xa8>
 8006664:	4623      	mov	r3, r4
 8006666:	6864      	ldr	r4, [r4, #4]
 8006668:	e7ae      	b.n	80065c8 <_malloc_r+0x34>
 800666a:	463c      	mov	r4, r7
 800666c:	687f      	ldr	r7, [r7, #4]
 800666e:	e7b6      	b.n	80065de <_malloc_r+0x4a>
 8006670:	461a      	mov	r2, r3
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	42a3      	cmp	r3, r4
 8006676:	d1fb      	bne.n	8006670 <_malloc_r+0xdc>
 8006678:	2300      	movs	r3, #0
 800667a:	6053      	str	r3, [r2, #4]
 800667c:	e7de      	b.n	800663c <_malloc_r+0xa8>
 800667e:	230c      	movs	r3, #12
 8006680:	4630      	mov	r0, r6
 8006682:	6033      	str	r3, [r6, #0]
 8006684:	f000 f80c 	bl	80066a0 <__malloc_unlock>
 8006688:	e794      	b.n	80065b4 <_malloc_r+0x20>
 800668a:	6005      	str	r5, [r0, #0]
 800668c:	e7d6      	b.n	800663c <_malloc_r+0xa8>
 800668e:	bf00      	nop
 8006690:	20000494 	.word	0x20000494

08006694 <__malloc_lock>:
 8006694:	4801      	ldr	r0, [pc, #4]	@ (800669c <__malloc_lock+0x8>)
 8006696:	f7ff b8a6 	b.w	80057e6 <__retarget_lock_acquire_recursive>
 800669a:	bf00      	nop
 800669c:	2000048c 	.word	0x2000048c

080066a0 <__malloc_unlock>:
 80066a0:	4801      	ldr	r0, [pc, #4]	@ (80066a8 <__malloc_unlock+0x8>)
 80066a2:	f7ff b8a1 	b.w	80057e8 <__retarget_lock_release_recursive>
 80066a6:	bf00      	nop
 80066a8:	2000048c 	.word	0x2000048c

080066ac <_Balloc>:
 80066ac:	b570      	push	{r4, r5, r6, lr}
 80066ae:	69c6      	ldr	r6, [r0, #28]
 80066b0:	4604      	mov	r4, r0
 80066b2:	460d      	mov	r5, r1
 80066b4:	b976      	cbnz	r6, 80066d4 <_Balloc+0x28>
 80066b6:	2010      	movs	r0, #16
 80066b8:	f7ff ff42 	bl	8006540 <malloc>
 80066bc:	4602      	mov	r2, r0
 80066be:	61e0      	str	r0, [r4, #28]
 80066c0:	b920      	cbnz	r0, 80066cc <_Balloc+0x20>
 80066c2:	216b      	movs	r1, #107	@ 0x6b
 80066c4:	4b17      	ldr	r3, [pc, #92]	@ (8006724 <_Balloc+0x78>)
 80066c6:	4818      	ldr	r0, [pc, #96]	@ (8006728 <_Balloc+0x7c>)
 80066c8:	f001 ff38 	bl	800853c <__assert_func>
 80066cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80066d0:	6006      	str	r6, [r0, #0]
 80066d2:	60c6      	str	r6, [r0, #12]
 80066d4:	69e6      	ldr	r6, [r4, #28]
 80066d6:	68f3      	ldr	r3, [r6, #12]
 80066d8:	b183      	cbz	r3, 80066fc <_Balloc+0x50>
 80066da:	69e3      	ldr	r3, [r4, #28]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80066e2:	b9b8      	cbnz	r0, 8006714 <_Balloc+0x68>
 80066e4:	2101      	movs	r1, #1
 80066e6:	fa01 f605 	lsl.w	r6, r1, r5
 80066ea:	1d72      	adds	r2, r6, #5
 80066ec:	4620      	mov	r0, r4
 80066ee:	0092      	lsls	r2, r2, #2
 80066f0:	f001 ff42 	bl	8008578 <_calloc_r>
 80066f4:	b160      	cbz	r0, 8006710 <_Balloc+0x64>
 80066f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80066fa:	e00e      	b.n	800671a <_Balloc+0x6e>
 80066fc:	2221      	movs	r2, #33	@ 0x21
 80066fe:	2104      	movs	r1, #4
 8006700:	4620      	mov	r0, r4
 8006702:	f001 ff39 	bl	8008578 <_calloc_r>
 8006706:	69e3      	ldr	r3, [r4, #28]
 8006708:	60f0      	str	r0, [r6, #12]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1e4      	bne.n	80066da <_Balloc+0x2e>
 8006710:	2000      	movs	r0, #0
 8006712:	bd70      	pop	{r4, r5, r6, pc}
 8006714:	6802      	ldr	r2, [r0, #0]
 8006716:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800671a:	2300      	movs	r3, #0
 800671c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006720:	e7f7      	b.n	8006712 <_Balloc+0x66>
 8006722:	bf00      	nop
 8006724:	08008f1c 	.word	0x08008f1c
 8006728:	08008f9c 	.word	0x08008f9c

0800672c <_Bfree>:
 800672c:	b570      	push	{r4, r5, r6, lr}
 800672e:	69c6      	ldr	r6, [r0, #28]
 8006730:	4605      	mov	r5, r0
 8006732:	460c      	mov	r4, r1
 8006734:	b976      	cbnz	r6, 8006754 <_Bfree+0x28>
 8006736:	2010      	movs	r0, #16
 8006738:	f7ff ff02 	bl	8006540 <malloc>
 800673c:	4602      	mov	r2, r0
 800673e:	61e8      	str	r0, [r5, #28]
 8006740:	b920      	cbnz	r0, 800674c <_Bfree+0x20>
 8006742:	218f      	movs	r1, #143	@ 0x8f
 8006744:	4b08      	ldr	r3, [pc, #32]	@ (8006768 <_Bfree+0x3c>)
 8006746:	4809      	ldr	r0, [pc, #36]	@ (800676c <_Bfree+0x40>)
 8006748:	f001 fef8 	bl	800853c <__assert_func>
 800674c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006750:	6006      	str	r6, [r0, #0]
 8006752:	60c6      	str	r6, [r0, #12]
 8006754:	b13c      	cbz	r4, 8006766 <_Bfree+0x3a>
 8006756:	69eb      	ldr	r3, [r5, #28]
 8006758:	6862      	ldr	r2, [r4, #4]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006760:	6021      	str	r1, [r4, #0]
 8006762:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006766:	bd70      	pop	{r4, r5, r6, pc}
 8006768:	08008f1c 	.word	0x08008f1c
 800676c:	08008f9c 	.word	0x08008f9c

08006770 <__multadd>:
 8006770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006774:	4607      	mov	r7, r0
 8006776:	460c      	mov	r4, r1
 8006778:	461e      	mov	r6, r3
 800677a:	2000      	movs	r0, #0
 800677c:	690d      	ldr	r5, [r1, #16]
 800677e:	f101 0c14 	add.w	ip, r1, #20
 8006782:	f8dc 3000 	ldr.w	r3, [ip]
 8006786:	3001      	adds	r0, #1
 8006788:	b299      	uxth	r1, r3
 800678a:	fb02 6101 	mla	r1, r2, r1, r6
 800678e:	0c1e      	lsrs	r6, r3, #16
 8006790:	0c0b      	lsrs	r3, r1, #16
 8006792:	fb02 3306 	mla	r3, r2, r6, r3
 8006796:	b289      	uxth	r1, r1
 8006798:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800679c:	4285      	cmp	r5, r0
 800679e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80067a2:	f84c 1b04 	str.w	r1, [ip], #4
 80067a6:	dcec      	bgt.n	8006782 <__multadd+0x12>
 80067a8:	b30e      	cbz	r6, 80067ee <__multadd+0x7e>
 80067aa:	68a3      	ldr	r3, [r4, #8]
 80067ac:	42ab      	cmp	r3, r5
 80067ae:	dc19      	bgt.n	80067e4 <__multadd+0x74>
 80067b0:	6861      	ldr	r1, [r4, #4]
 80067b2:	4638      	mov	r0, r7
 80067b4:	3101      	adds	r1, #1
 80067b6:	f7ff ff79 	bl	80066ac <_Balloc>
 80067ba:	4680      	mov	r8, r0
 80067bc:	b928      	cbnz	r0, 80067ca <__multadd+0x5a>
 80067be:	4602      	mov	r2, r0
 80067c0:	21ba      	movs	r1, #186	@ 0xba
 80067c2:	4b0c      	ldr	r3, [pc, #48]	@ (80067f4 <__multadd+0x84>)
 80067c4:	480c      	ldr	r0, [pc, #48]	@ (80067f8 <__multadd+0x88>)
 80067c6:	f001 feb9 	bl	800853c <__assert_func>
 80067ca:	6922      	ldr	r2, [r4, #16]
 80067cc:	f104 010c 	add.w	r1, r4, #12
 80067d0:	3202      	adds	r2, #2
 80067d2:	0092      	lsls	r2, r2, #2
 80067d4:	300c      	adds	r0, #12
 80067d6:	f001 fe9d 	bl	8008514 <memcpy>
 80067da:	4621      	mov	r1, r4
 80067dc:	4638      	mov	r0, r7
 80067de:	f7ff ffa5 	bl	800672c <_Bfree>
 80067e2:	4644      	mov	r4, r8
 80067e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80067e8:	3501      	adds	r5, #1
 80067ea:	615e      	str	r6, [r3, #20]
 80067ec:	6125      	str	r5, [r4, #16]
 80067ee:	4620      	mov	r0, r4
 80067f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067f4:	08008f8b 	.word	0x08008f8b
 80067f8:	08008f9c 	.word	0x08008f9c

080067fc <__s2b>:
 80067fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006800:	4615      	mov	r5, r2
 8006802:	2209      	movs	r2, #9
 8006804:	461f      	mov	r7, r3
 8006806:	3308      	adds	r3, #8
 8006808:	460c      	mov	r4, r1
 800680a:	fb93 f3f2 	sdiv	r3, r3, r2
 800680e:	4606      	mov	r6, r0
 8006810:	2201      	movs	r2, #1
 8006812:	2100      	movs	r1, #0
 8006814:	429a      	cmp	r2, r3
 8006816:	db09      	blt.n	800682c <__s2b+0x30>
 8006818:	4630      	mov	r0, r6
 800681a:	f7ff ff47 	bl	80066ac <_Balloc>
 800681e:	b940      	cbnz	r0, 8006832 <__s2b+0x36>
 8006820:	4602      	mov	r2, r0
 8006822:	21d3      	movs	r1, #211	@ 0xd3
 8006824:	4b18      	ldr	r3, [pc, #96]	@ (8006888 <__s2b+0x8c>)
 8006826:	4819      	ldr	r0, [pc, #100]	@ (800688c <__s2b+0x90>)
 8006828:	f001 fe88 	bl	800853c <__assert_func>
 800682c:	0052      	lsls	r2, r2, #1
 800682e:	3101      	adds	r1, #1
 8006830:	e7f0      	b.n	8006814 <__s2b+0x18>
 8006832:	9b08      	ldr	r3, [sp, #32]
 8006834:	2d09      	cmp	r5, #9
 8006836:	6143      	str	r3, [r0, #20]
 8006838:	f04f 0301 	mov.w	r3, #1
 800683c:	6103      	str	r3, [r0, #16]
 800683e:	dd16      	ble.n	800686e <__s2b+0x72>
 8006840:	f104 0909 	add.w	r9, r4, #9
 8006844:	46c8      	mov	r8, r9
 8006846:	442c      	add	r4, r5
 8006848:	f818 3b01 	ldrb.w	r3, [r8], #1
 800684c:	4601      	mov	r1, r0
 800684e:	220a      	movs	r2, #10
 8006850:	4630      	mov	r0, r6
 8006852:	3b30      	subs	r3, #48	@ 0x30
 8006854:	f7ff ff8c 	bl	8006770 <__multadd>
 8006858:	45a0      	cmp	r8, r4
 800685a:	d1f5      	bne.n	8006848 <__s2b+0x4c>
 800685c:	f1a5 0408 	sub.w	r4, r5, #8
 8006860:	444c      	add	r4, r9
 8006862:	1b2d      	subs	r5, r5, r4
 8006864:	1963      	adds	r3, r4, r5
 8006866:	42bb      	cmp	r3, r7
 8006868:	db04      	blt.n	8006874 <__s2b+0x78>
 800686a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800686e:	2509      	movs	r5, #9
 8006870:	340a      	adds	r4, #10
 8006872:	e7f6      	b.n	8006862 <__s2b+0x66>
 8006874:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006878:	4601      	mov	r1, r0
 800687a:	220a      	movs	r2, #10
 800687c:	4630      	mov	r0, r6
 800687e:	3b30      	subs	r3, #48	@ 0x30
 8006880:	f7ff ff76 	bl	8006770 <__multadd>
 8006884:	e7ee      	b.n	8006864 <__s2b+0x68>
 8006886:	bf00      	nop
 8006888:	08008f8b 	.word	0x08008f8b
 800688c:	08008f9c 	.word	0x08008f9c

08006890 <__hi0bits>:
 8006890:	4603      	mov	r3, r0
 8006892:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006896:	bf3a      	itte	cc
 8006898:	0403      	lslcc	r3, r0, #16
 800689a:	2010      	movcc	r0, #16
 800689c:	2000      	movcs	r0, #0
 800689e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80068a2:	bf3c      	itt	cc
 80068a4:	021b      	lslcc	r3, r3, #8
 80068a6:	3008      	addcc	r0, #8
 80068a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068ac:	bf3c      	itt	cc
 80068ae:	011b      	lslcc	r3, r3, #4
 80068b0:	3004      	addcc	r0, #4
 80068b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068b6:	bf3c      	itt	cc
 80068b8:	009b      	lslcc	r3, r3, #2
 80068ba:	3002      	addcc	r0, #2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	db05      	blt.n	80068cc <__hi0bits+0x3c>
 80068c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80068c4:	f100 0001 	add.w	r0, r0, #1
 80068c8:	bf08      	it	eq
 80068ca:	2020      	moveq	r0, #32
 80068cc:	4770      	bx	lr

080068ce <__lo0bits>:
 80068ce:	6803      	ldr	r3, [r0, #0]
 80068d0:	4602      	mov	r2, r0
 80068d2:	f013 0007 	ands.w	r0, r3, #7
 80068d6:	d00b      	beq.n	80068f0 <__lo0bits+0x22>
 80068d8:	07d9      	lsls	r1, r3, #31
 80068da:	d421      	bmi.n	8006920 <__lo0bits+0x52>
 80068dc:	0798      	lsls	r0, r3, #30
 80068de:	bf49      	itett	mi
 80068e0:	085b      	lsrmi	r3, r3, #1
 80068e2:	089b      	lsrpl	r3, r3, #2
 80068e4:	2001      	movmi	r0, #1
 80068e6:	6013      	strmi	r3, [r2, #0]
 80068e8:	bf5c      	itt	pl
 80068ea:	2002      	movpl	r0, #2
 80068ec:	6013      	strpl	r3, [r2, #0]
 80068ee:	4770      	bx	lr
 80068f0:	b299      	uxth	r1, r3
 80068f2:	b909      	cbnz	r1, 80068f8 <__lo0bits+0x2a>
 80068f4:	2010      	movs	r0, #16
 80068f6:	0c1b      	lsrs	r3, r3, #16
 80068f8:	b2d9      	uxtb	r1, r3
 80068fa:	b909      	cbnz	r1, 8006900 <__lo0bits+0x32>
 80068fc:	3008      	adds	r0, #8
 80068fe:	0a1b      	lsrs	r3, r3, #8
 8006900:	0719      	lsls	r1, r3, #28
 8006902:	bf04      	itt	eq
 8006904:	091b      	lsreq	r3, r3, #4
 8006906:	3004      	addeq	r0, #4
 8006908:	0799      	lsls	r1, r3, #30
 800690a:	bf04      	itt	eq
 800690c:	089b      	lsreq	r3, r3, #2
 800690e:	3002      	addeq	r0, #2
 8006910:	07d9      	lsls	r1, r3, #31
 8006912:	d403      	bmi.n	800691c <__lo0bits+0x4e>
 8006914:	085b      	lsrs	r3, r3, #1
 8006916:	f100 0001 	add.w	r0, r0, #1
 800691a:	d003      	beq.n	8006924 <__lo0bits+0x56>
 800691c:	6013      	str	r3, [r2, #0]
 800691e:	4770      	bx	lr
 8006920:	2000      	movs	r0, #0
 8006922:	4770      	bx	lr
 8006924:	2020      	movs	r0, #32
 8006926:	4770      	bx	lr

08006928 <__i2b>:
 8006928:	b510      	push	{r4, lr}
 800692a:	460c      	mov	r4, r1
 800692c:	2101      	movs	r1, #1
 800692e:	f7ff febd 	bl	80066ac <_Balloc>
 8006932:	4602      	mov	r2, r0
 8006934:	b928      	cbnz	r0, 8006942 <__i2b+0x1a>
 8006936:	f240 1145 	movw	r1, #325	@ 0x145
 800693a:	4b04      	ldr	r3, [pc, #16]	@ (800694c <__i2b+0x24>)
 800693c:	4804      	ldr	r0, [pc, #16]	@ (8006950 <__i2b+0x28>)
 800693e:	f001 fdfd 	bl	800853c <__assert_func>
 8006942:	2301      	movs	r3, #1
 8006944:	6144      	str	r4, [r0, #20]
 8006946:	6103      	str	r3, [r0, #16]
 8006948:	bd10      	pop	{r4, pc}
 800694a:	bf00      	nop
 800694c:	08008f8b 	.word	0x08008f8b
 8006950:	08008f9c 	.word	0x08008f9c

08006954 <__multiply>:
 8006954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006958:	4614      	mov	r4, r2
 800695a:	690a      	ldr	r2, [r1, #16]
 800695c:	6923      	ldr	r3, [r4, #16]
 800695e:	460f      	mov	r7, r1
 8006960:	429a      	cmp	r2, r3
 8006962:	bfa2      	ittt	ge
 8006964:	4623      	movge	r3, r4
 8006966:	460c      	movge	r4, r1
 8006968:	461f      	movge	r7, r3
 800696a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800696e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006972:	68a3      	ldr	r3, [r4, #8]
 8006974:	6861      	ldr	r1, [r4, #4]
 8006976:	eb0a 0609 	add.w	r6, sl, r9
 800697a:	42b3      	cmp	r3, r6
 800697c:	b085      	sub	sp, #20
 800697e:	bfb8      	it	lt
 8006980:	3101      	addlt	r1, #1
 8006982:	f7ff fe93 	bl	80066ac <_Balloc>
 8006986:	b930      	cbnz	r0, 8006996 <__multiply+0x42>
 8006988:	4602      	mov	r2, r0
 800698a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800698e:	4b43      	ldr	r3, [pc, #268]	@ (8006a9c <__multiply+0x148>)
 8006990:	4843      	ldr	r0, [pc, #268]	@ (8006aa0 <__multiply+0x14c>)
 8006992:	f001 fdd3 	bl	800853c <__assert_func>
 8006996:	f100 0514 	add.w	r5, r0, #20
 800699a:	462b      	mov	r3, r5
 800699c:	2200      	movs	r2, #0
 800699e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80069a2:	4543      	cmp	r3, r8
 80069a4:	d321      	bcc.n	80069ea <__multiply+0x96>
 80069a6:	f107 0114 	add.w	r1, r7, #20
 80069aa:	f104 0214 	add.w	r2, r4, #20
 80069ae:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80069b2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80069b6:	9302      	str	r3, [sp, #8]
 80069b8:	1b13      	subs	r3, r2, r4
 80069ba:	3b15      	subs	r3, #21
 80069bc:	f023 0303 	bic.w	r3, r3, #3
 80069c0:	3304      	adds	r3, #4
 80069c2:	f104 0715 	add.w	r7, r4, #21
 80069c6:	42ba      	cmp	r2, r7
 80069c8:	bf38      	it	cc
 80069ca:	2304      	movcc	r3, #4
 80069cc:	9301      	str	r3, [sp, #4]
 80069ce:	9b02      	ldr	r3, [sp, #8]
 80069d0:	9103      	str	r1, [sp, #12]
 80069d2:	428b      	cmp	r3, r1
 80069d4:	d80c      	bhi.n	80069f0 <__multiply+0x9c>
 80069d6:	2e00      	cmp	r6, #0
 80069d8:	dd03      	ble.n	80069e2 <__multiply+0x8e>
 80069da:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d05a      	beq.n	8006a98 <__multiply+0x144>
 80069e2:	6106      	str	r6, [r0, #16]
 80069e4:	b005      	add	sp, #20
 80069e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ea:	f843 2b04 	str.w	r2, [r3], #4
 80069ee:	e7d8      	b.n	80069a2 <__multiply+0x4e>
 80069f0:	f8b1 a000 	ldrh.w	sl, [r1]
 80069f4:	f1ba 0f00 	cmp.w	sl, #0
 80069f8:	d023      	beq.n	8006a42 <__multiply+0xee>
 80069fa:	46a9      	mov	r9, r5
 80069fc:	f04f 0c00 	mov.w	ip, #0
 8006a00:	f104 0e14 	add.w	lr, r4, #20
 8006a04:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006a08:	f8d9 3000 	ldr.w	r3, [r9]
 8006a0c:	fa1f fb87 	uxth.w	fp, r7
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	fb0a 330b 	mla	r3, sl, fp, r3
 8006a16:	4463      	add	r3, ip
 8006a18:	f8d9 c000 	ldr.w	ip, [r9]
 8006a1c:	0c3f      	lsrs	r7, r7, #16
 8006a1e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006a22:	fb0a c707 	mla	r7, sl, r7, ip
 8006a26:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006a30:	4572      	cmp	r2, lr
 8006a32:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006a36:	f849 3b04 	str.w	r3, [r9], #4
 8006a3a:	d8e3      	bhi.n	8006a04 <__multiply+0xb0>
 8006a3c:	9b01      	ldr	r3, [sp, #4]
 8006a3e:	f845 c003 	str.w	ip, [r5, r3]
 8006a42:	9b03      	ldr	r3, [sp, #12]
 8006a44:	3104      	adds	r1, #4
 8006a46:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006a4a:	f1b9 0f00 	cmp.w	r9, #0
 8006a4e:	d021      	beq.n	8006a94 <__multiply+0x140>
 8006a50:	46ae      	mov	lr, r5
 8006a52:	f04f 0a00 	mov.w	sl, #0
 8006a56:	682b      	ldr	r3, [r5, #0]
 8006a58:	f104 0c14 	add.w	ip, r4, #20
 8006a5c:	f8bc b000 	ldrh.w	fp, [ip]
 8006a60:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	fb09 770b 	mla	r7, r9, fp, r7
 8006a6a:	4457      	add	r7, sl
 8006a6c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006a70:	f84e 3b04 	str.w	r3, [lr], #4
 8006a74:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006a78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a7c:	f8be 3000 	ldrh.w	r3, [lr]
 8006a80:	4562      	cmp	r2, ip
 8006a82:	fb09 330a 	mla	r3, r9, sl, r3
 8006a86:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006a8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a8e:	d8e5      	bhi.n	8006a5c <__multiply+0x108>
 8006a90:	9f01      	ldr	r7, [sp, #4]
 8006a92:	51eb      	str	r3, [r5, r7]
 8006a94:	3504      	adds	r5, #4
 8006a96:	e79a      	b.n	80069ce <__multiply+0x7a>
 8006a98:	3e01      	subs	r6, #1
 8006a9a:	e79c      	b.n	80069d6 <__multiply+0x82>
 8006a9c:	08008f8b 	.word	0x08008f8b
 8006aa0:	08008f9c 	.word	0x08008f9c

08006aa4 <__pow5mult>:
 8006aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006aa8:	4615      	mov	r5, r2
 8006aaa:	f012 0203 	ands.w	r2, r2, #3
 8006aae:	4607      	mov	r7, r0
 8006ab0:	460e      	mov	r6, r1
 8006ab2:	d007      	beq.n	8006ac4 <__pow5mult+0x20>
 8006ab4:	4c25      	ldr	r4, [pc, #148]	@ (8006b4c <__pow5mult+0xa8>)
 8006ab6:	3a01      	subs	r2, #1
 8006ab8:	2300      	movs	r3, #0
 8006aba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006abe:	f7ff fe57 	bl	8006770 <__multadd>
 8006ac2:	4606      	mov	r6, r0
 8006ac4:	10ad      	asrs	r5, r5, #2
 8006ac6:	d03d      	beq.n	8006b44 <__pow5mult+0xa0>
 8006ac8:	69fc      	ldr	r4, [r7, #28]
 8006aca:	b97c      	cbnz	r4, 8006aec <__pow5mult+0x48>
 8006acc:	2010      	movs	r0, #16
 8006ace:	f7ff fd37 	bl	8006540 <malloc>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	61f8      	str	r0, [r7, #28]
 8006ad6:	b928      	cbnz	r0, 8006ae4 <__pow5mult+0x40>
 8006ad8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006adc:	4b1c      	ldr	r3, [pc, #112]	@ (8006b50 <__pow5mult+0xac>)
 8006ade:	481d      	ldr	r0, [pc, #116]	@ (8006b54 <__pow5mult+0xb0>)
 8006ae0:	f001 fd2c 	bl	800853c <__assert_func>
 8006ae4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ae8:	6004      	str	r4, [r0, #0]
 8006aea:	60c4      	str	r4, [r0, #12]
 8006aec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006af0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006af4:	b94c      	cbnz	r4, 8006b0a <__pow5mult+0x66>
 8006af6:	f240 2171 	movw	r1, #625	@ 0x271
 8006afa:	4638      	mov	r0, r7
 8006afc:	f7ff ff14 	bl	8006928 <__i2b>
 8006b00:	2300      	movs	r3, #0
 8006b02:	4604      	mov	r4, r0
 8006b04:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b08:	6003      	str	r3, [r0, #0]
 8006b0a:	f04f 0900 	mov.w	r9, #0
 8006b0e:	07eb      	lsls	r3, r5, #31
 8006b10:	d50a      	bpl.n	8006b28 <__pow5mult+0x84>
 8006b12:	4631      	mov	r1, r6
 8006b14:	4622      	mov	r2, r4
 8006b16:	4638      	mov	r0, r7
 8006b18:	f7ff ff1c 	bl	8006954 <__multiply>
 8006b1c:	4680      	mov	r8, r0
 8006b1e:	4631      	mov	r1, r6
 8006b20:	4638      	mov	r0, r7
 8006b22:	f7ff fe03 	bl	800672c <_Bfree>
 8006b26:	4646      	mov	r6, r8
 8006b28:	106d      	asrs	r5, r5, #1
 8006b2a:	d00b      	beq.n	8006b44 <__pow5mult+0xa0>
 8006b2c:	6820      	ldr	r0, [r4, #0]
 8006b2e:	b938      	cbnz	r0, 8006b40 <__pow5mult+0x9c>
 8006b30:	4622      	mov	r2, r4
 8006b32:	4621      	mov	r1, r4
 8006b34:	4638      	mov	r0, r7
 8006b36:	f7ff ff0d 	bl	8006954 <__multiply>
 8006b3a:	6020      	str	r0, [r4, #0]
 8006b3c:	f8c0 9000 	str.w	r9, [r0]
 8006b40:	4604      	mov	r4, r0
 8006b42:	e7e4      	b.n	8006b0e <__pow5mult+0x6a>
 8006b44:	4630      	mov	r0, r6
 8006b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b4a:	bf00      	nop
 8006b4c:	08008ff8 	.word	0x08008ff8
 8006b50:	08008f1c 	.word	0x08008f1c
 8006b54:	08008f9c 	.word	0x08008f9c

08006b58 <__lshift>:
 8006b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b5c:	460c      	mov	r4, r1
 8006b5e:	4607      	mov	r7, r0
 8006b60:	4691      	mov	r9, r2
 8006b62:	6923      	ldr	r3, [r4, #16]
 8006b64:	6849      	ldr	r1, [r1, #4]
 8006b66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006b6a:	68a3      	ldr	r3, [r4, #8]
 8006b6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006b70:	f108 0601 	add.w	r6, r8, #1
 8006b74:	42b3      	cmp	r3, r6
 8006b76:	db0b      	blt.n	8006b90 <__lshift+0x38>
 8006b78:	4638      	mov	r0, r7
 8006b7a:	f7ff fd97 	bl	80066ac <_Balloc>
 8006b7e:	4605      	mov	r5, r0
 8006b80:	b948      	cbnz	r0, 8006b96 <__lshift+0x3e>
 8006b82:	4602      	mov	r2, r0
 8006b84:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006b88:	4b27      	ldr	r3, [pc, #156]	@ (8006c28 <__lshift+0xd0>)
 8006b8a:	4828      	ldr	r0, [pc, #160]	@ (8006c2c <__lshift+0xd4>)
 8006b8c:	f001 fcd6 	bl	800853c <__assert_func>
 8006b90:	3101      	adds	r1, #1
 8006b92:	005b      	lsls	r3, r3, #1
 8006b94:	e7ee      	b.n	8006b74 <__lshift+0x1c>
 8006b96:	2300      	movs	r3, #0
 8006b98:	f100 0114 	add.w	r1, r0, #20
 8006b9c:	f100 0210 	add.w	r2, r0, #16
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	4553      	cmp	r3, sl
 8006ba4:	db33      	blt.n	8006c0e <__lshift+0xb6>
 8006ba6:	6920      	ldr	r0, [r4, #16]
 8006ba8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006bac:	f104 0314 	add.w	r3, r4, #20
 8006bb0:	f019 091f 	ands.w	r9, r9, #31
 8006bb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006bb8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006bbc:	d02b      	beq.n	8006c16 <__lshift+0xbe>
 8006bbe:	468a      	mov	sl, r1
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f1c9 0e20 	rsb	lr, r9, #32
 8006bc6:	6818      	ldr	r0, [r3, #0]
 8006bc8:	fa00 f009 	lsl.w	r0, r0, r9
 8006bcc:	4310      	orrs	r0, r2
 8006bce:	f84a 0b04 	str.w	r0, [sl], #4
 8006bd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bd6:	459c      	cmp	ip, r3
 8006bd8:	fa22 f20e 	lsr.w	r2, r2, lr
 8006bdc:	d8f3      	bhi.n	8006bc6 <__lshift+0x6e>
 8006bde:	ebac 0304 	sub.w	r3, ip, r4
 8006be2:	3b15      	subs	r3, #21
 8006be4:	f023 0303 	bic.w	r3, r3, #3
 8006be8:	3304      	adds	r3, #4
 8006bea:	f104 0015 	add.w	r0, r4, #21
 8006bee:	4584      	cmp	ip, r0
 8006bf0:	bf38      	it	cc
 8006bf2:	2304      	movcc	r3, #4
 8006bf4:	50ca      	str	r2, [r1, r3]
 8006bf6:	b10a      	cbz	r2, 8006bfc <__lshift+0xa4>
 8006bf8:	f108 0602 	add.w	r6, r8, #2
 8006bfc:	3e01      	subs	r6, #1
 8006bfe:	4638      	mov	r0, r7
 8006c00:	4621      	mov	r1, r4
 8006c02:	612e      	str	r6, [r5, #16]
 8006c04:	f7ff fd92 	bl	800672c <_Bfree>
 8006c08:	4628      	mov	r0, r5
 8006c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c0e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006c12:	3301      	adds	r3, #1
 8006c14:	e7c5      	b.n	8006ba2 <__lshift+0x4a>
 8006c16:	3904      	subs	r1, #4
 8006c18:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c1c:	459c      	cmp	ip, r3
 8006c1e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c22:	d8f9      	bhi.n	8006c18 <__lshift+0xc0>
 8006c24:	e7ea      	b.n	8006bfc <__lshift+0xa4>
 8006c26:	bf00      	nop
 8006c28:	08008f8b 	.word	0x08008f8b
 8006c2c:	08008f9c 	.word	0x08008f9c

08006c30 <__mcmp>:
 8006c30:	4603      	mov	r3, r0
 8006c32:	690a      	ldr	r2, [r1, #16]
 8006c34:	6900      	ldr	r0, [r0, #16]
 8006c36:	b530      	push	{r4, r5, lr}
 8006c38:	1a80      	subs	r0, r0, r2
 8006c3a:	d10e      	bne.n	8006c5a <__mcmp+0x2a>
 8006c3c:	3314      	adds	r3, #20
 8006c3e:	3114      	adds	r1, #20
 8006c40:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006c44:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006c48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006c4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006c50:	4295      	cmp	r5, r2
 8006c52:	d003      	beq.n	8006c5c <__mcmp+0x2c>
 8006c54:	d205      	bcs.n	8006c62 <__mcmp+0x32>
 8006c56:	f04f 30ff 	mov.w	r0, #4294967295
 8006c5a:	bd30      	pop	{r4, r5, pc}
 8006c5c:	42a3      	cmp	r3, r4
 8006c5e:	d3f3      	bcc.n	8006c48 <__mcmp+0x18>
 8006c60:	e7fb      	b.n	8006c5a <__mcmp+0x2a>
 8006c62:	2001      	movs	r0, #1
 8006c64:	e7f9      	b.n	8006c5a <__mcmp+0x2a>
	...

08006c68 <__mdiff>:
 8006c68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c6c:	4689      	mov	r9, r1
 8006c6e:	4606      	mov	r6, r0
 8006c70:	4611      	mov	r1, r2
 8006c72:	4648      	mov	r0, r9
 8006c74:	4614      	mov	r4, r2
 8006c76:	f7ff ffdb 	bl	8006c30 <__mcmp>
 8006c7a:	1e05      	subs	r5, r0, #0
 8006c7c:	d112      	bne.n	8006ca4 <__mdiff+0x3c>
 8006c7e:	4629      	mov	r1, r5
 8006c80:	4630      	mov	r0, r6
 8006c82:	f7ff fd13 	bl	80066ac <_Balloc>
 8006c86:	4602      	mov	r2, r0
 8006c88:	b928      	cbnz	r0, 8006c96 <__mdiff+0x2e>
 8006c8a:	f240 2137 	movw	r1, #567	@ 0x237
 8006c8e:	4b3e      	ldr	r3, [pc, #248]	@ (8006d88 <__mdiff+0x120>)
 8006c90:	483e      	ldr	r0, [pc, #248]	@ (8006d8c <__mdiff+0x124>)
 8006c92:	f001 fc53 	bl	800853c <__assert_func>
 8006c96:	2301      	movs	r3, #1
 8006c98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006c9c:	4610      	mov	r0, r2
 8006c9e:	b003      	add	sp, #12
 8006ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ca4:	bfbc      	itt	lt
 8006ca6:	464b      	movlt	r3, r9
 8006ca8:	46a1      	movlt	r9, r4
 8006caa:	4630      	mov	r0, r6
 8006cac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006cb0:	bfba      	itte	lt
 8006cb2:	461c      	movlt	r4, r3
 8006cb4:	2501      	movlt	r5, #1
 8006cb6:	2500      	movge	r5, #0
 8006cb8:	f7ff fcf8 	bl	80066ac <_Balloc>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	b918      	cbnz	r0, 8006cc8 <__mdiff+0x60>
 8006cc0:	f240 2145 	movw	r1, #581	@ 0x245
 8006cc4:	4b30      	ldr	r3, [pc, #192]	@ (8006d88 <__mdiff+0x120>)
 8006cc6:	e7e3      	b.n	8006c90 <__mdiff+0x28>
 8006cc8:	f100 0b14 	add.w	fp, r0, #20
 8006ccc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006cd0:	f109 0310 	add.w	r3, r9, #16
 8006cd4:	60c5      	str	r5, [r0, #12]
 8006cd6:	f04f 0c00 	mov.w	ip, #0
 8006cda:	f109 0514 	add.w	r5, r9, #20
 8006cde:	46d9      	mov	r9, fp
 8006ce0:	6926      	ldr	r6, [r4, #16]
 8006ce2:	f104 0e14 	add.w	lr, r4, #20
 8006ce6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006cea:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006cee:	9301      	str	r3, [sp, #4]
 8006cf0:	9b01      	ldr	r3, [sp, #4]
 8006cf2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006cf6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006cfa:	b281      	uxth	r1, r0
 8006cfc:	9301      	str	r3, [sp, #4]
 8006cfe:	fa1f f38a 	uxth.w	r3, sl
 8006d02:	1a5b      	subs	r3, r3, r1
 8006d04:	0c00      	lsrs	r0, r0, #16
 8006d06:	4463      	add	r3, ip
 8006d08:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006d0c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006d16:	4576      	cmp	r6, lr
 8006d18:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006d1c:	f849 3b04 	str.w	r3, [r9], #4
 8006d20:	d8e6      	bhi.n	8006cf0 <__mdiff+0x88>
 8006d22:	1b33      	subs	r3, r6, r4
 8006d24:	3b15      	subs	r3, #21
 8006d26:	f023 0303 	bic.w	r3, r3, #3
 8006d2a:	3415      	adds	r4, #21
 8006d2c:	3304      	adds	r3, #4
 8006d2e:	42a6      	cmp	r6, r4
 8006d30:	bf38      	it	cc
 8006d32:	2304      	movcc	r3, #4
 8006d34:	441d      	add	r5, r3
 8006d36:	445b      	add	r3, fp
 8006d38:	461e      	mov	r6, r3
 8006d3a:	462c      	mov	r4, r5
 8006d3c:	4544      	cmp	r4, r8
 8006d3e:	d30e      	bcc.n	8006d5e <__mdiff+0xf6>
 8006d40:	f108 0103 	add.w	r1, r8, #3
 8006d44:	1b49      	subs	r1, r1, r5
 8006d46:	f021 0103 	bic.w	r1, r1, #3
 8006d4a:	3d03      	subs	r5, #3
 8006d4c:	45a8      	cmp	r8, r5
 8006d4e:	bf38      	it	cc
 8006d50:	2100      	movcc	r1, #0
 8006d52:	440b      	add	r3, r1
 8006d54:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006d58:	b199      	cbz	r1, 8006d82 <__mdiff+0x11a>
 8006d5a:	6117      	str	r7, [r2, #16]
 8006d5c:	e79e      	b.n	8006c9c <__mdiff+0x34>
 8006d5e:	46e6      	mov	lr, ip
 8006d60:	f854 1b04 	ldr.w	r1, [r4], #4
 8006d64:	fa1f fc81 	uxth.w	ip, r1
 8006d68:	44f4      	add	ip, lr
 8006d6a:	0c08      	lsrs	r0, r1, #16
 8006d6c:	4471      	add	r1, lr
 8006d6e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006d72:	b289      	uxth	r1, r1
 8006d74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006d78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006d7c:	f846 1b04 	str.w	r1, [r6], #4
 8006d80:	e7dc      	b.n	8006d3c <__mdiff+0xd4>
 8006d82:	3f01      	subs	r7, #1
 8006d84:	e7e6      	b.n	8006d54 <__mdiff+0xec>
 8006d86:	bf00      	nop
 8006d88:	08008f8b 	.word	0x08008f8b
 8006d8c:	08008f9c 	.word	0x08008f9c

08006d90 <__ulp>:
 8006d90:	4b0e      	ldr	r3, [pc, #56]	@ (8006dcc <__ulp+0x3c>)
 8006d92:	400b      	ands	r3, r1
 8006d94:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	dc08      	bgt.n	8006dae <__ulp+0x1e>
 8006d9c:	425b      	negs	r3, r3
 8006d9e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006da2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006da6:	da04      	bge.n	8006db2 <__ulp+0x22>
 8006da8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006dac:	4113      	asrs	r3, r2
 8006dae:	2200      	movs	r2, #0
 8006db0:	e008      	b.n	8006dc4 <__ulp+0x34>
 8006db2:	f1a2 0314 	sub.w	r3, r2, #20
 8006db6:	2b1e      	cmp	r3, #30
 8006db8:	bfd6      	itet	le
 8006dba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006dbe:	2201      	movgt	r2, #1
 8006dc0:	40da      	lsrle	r2, r3
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	4610      	mov	r0, r2
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	7ff00000 	.word	0x7ff00000

08006dd0 <__b2d>:
 8006dd0:	6902      	ldr	r2, [r0, #16]
 8006dd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd4:	f100 0614 	add.w	r6, r0, #20
 8006dd8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8006ddc:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8006de0:	4f1e      	ldr	r7, [pc, #120]	@ (8006e5c <__b2d+0x8c>)
 8006de2:	4620      	mov	r0, r4
 8006de4:	f7ff fd54 	bl	8006890 <__hi0bits>
 8006de8:	4603      	mov	r3, r0
 8006dea:	f1c0 0020 	rsb	r0, r0, #32
 8006dee:	2b0a      	cmp	r3, #10
 8006df0:	f1a2 0504 	sub.w	r5, r2, #4
 8006df4:	6008      	str	r0, [r1, #0]
 8006df6:	dc12      	bgt.n	8006e1e <__b2d+0x4e>
 8006df8:	42ae      	cmp	r6, r5
 8006dfa:	bf2c      	ite	cs
 8006dfc:	2200      	movcs	r2, #0
 8006dfe:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006e02:	f1c3 0c0b 	rsb	ip, r3, #11
 8006e06:	3315      	adds	r3, #21
 8006e08:	fa24 fe0c 	lsr.w	lr, r4, ip
 8006e0c:	fa04 f303 	lsl.w	r3, r4, r3
 8006e10:	fa22 f20c 	lsr.w	r2, r2, ip
 8006e14:	ea4e 0107 	orr.w	r1, lr, r7
 8006e18:	431a      	orrs	r2, r3
 8006e1a:	4610      	mov	r0, r2
 8006e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e1e:	42ae      	cmp	r6, r5
 8006e20:	bf36      	itet	cc
 8006e22:	f1a2 0508 	subcc.w	r5, r2, #8
 8006e26:	2200      	movcs	r2, #0
 8006e28:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006e2c:	3b0b      	subs	r3, #11
 8006e2e:	d012      	beq.n	8006e56 <__b2d+0x86>
 8006e30:	f1c3 0720 	rsb	r7, r3, #32
 8006e34:	fa22 f107 	lsr.w	r1, r2, r7
 8006e38:	409c      	lsls	r4, r3
 8006e3a:	430c      	orrs	r4, r1
 8006e3c:	42b5      	cmp	r5, r6
 8006e3e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8006e42:	bf94      	ite	ls
 8006e44:	2400      	movls	r4, #0
 8006e46:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8006e4a:	409a      	lsls	r2, r3
 8006e4c:	40fc      	lsrs	r4, r7
 8006e4e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8006e52:	4322      	orrs	r2, r4
 8006e54:	e7e1      	b.n	8006e1a <__b2d+0x4a>
 8006e56:	ea44 0107 	orr.w	r1, r4, r7
 8006e5a:	e7de      	b.n	8006e1a <__b2d+0x4a>
 8006e5c:	3ff00000 	.word	0x3ff00000

08006e60 <__d2b>:
 8006e60:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006e64:	2101      	movs	r1, #1
 8006e66:	4690      	mov	r8, r2
 8006e68:	4699      	mov	r9, r3
 8006e6a:	9e08      	ldr	r6, [sp, #32]
 8006e6c:	f7ff fc1e 	bl	80066ac <_Balloc>
 8006e70:	4604      	mov	r4, r0
 8006e72:	b930      	cbnz	r0, 8006e82 <__d2b+0x22>
 8006e74:	4602      	mov	r2, r0
 8006e76:	f240 310f 	movw	r1, #783	@ 0x30f
 8006e7a:	4b23      	ldr	r3, [pc, #140]	@ (8006f08 <__d2b+0xa8>)
 8006e7c:	4823      	ldr	r0, [pc, #140]	@ (8006f0c <__d2b+0xac>)
 8006e7e:	f001 fb5d 	bl	800853c <__assert_func>
 8006e82:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006e86:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e8a:	b10d      	cbz	r5, 8006e90 <__d2b+0x30>
 8006e8c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e90:	9301      	str	r3, [sp, #4]
 8006e92:	f1b8 0300 	subs.w	r3, r8, #0
 8006e96:	d024      	beq.n	8006ee2 <__d2b+0x82>
 8006e98:	4668      	mov	r0, sp
 8006e9a:	9300      	str	r3, [sp, #0]
 8006e9c:	f7ff fd17 	bl	80068ce <__lo0bits>
 8006ea0:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006ea4:	b1d8      	cbz	r0, 8006ede <__d2b+0x7e>
 8006ea6:	f1c0 0320 	rsb	r3, r0, #32
 8006eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8006eae:	430b      	orrs	r3, r1
 8006eb0:	40c2      	lsrs	r2, r0
 8006eb2:	6163      	str	r3, [r4, #20]
 8006eb4:	9201      	str	r2, [sp, #4]
 8006eb6:	9b01      	ldr	r3, [sp, #4]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	bf0c      	ite	eq
 8006ebc:	2201      	moveq	r2, #1
 8006ebe:	2202      	movne	r2, #2
 8006ec0:	61a3      	str	r3, [r4, #24]
 8006ec2:	6122      	str	r2, [r4, #16]
 8006ec4:	b1ad      	cbz	r5, 8006ef2 <__d2b+0x92>
 8006ec6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006eca:	4405      	add	r5, r0
 8006ecc:	6035      	str	r5, [r6, #0]
 8006ece:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006ed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ed4:	6018      	str	r0, [r3, #0]
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	b002      	add	sp, #8
 8006eda:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006ede:	6161      	str	r1, [r4, #20]
 8006ee0:	e7e9      	b.n	8006eb6 <__d2b+0x56>
 8006ee2:	a801      	add	r0, sp, #4
 8006ee4:	f7ff fcf3 	bl	80068ce <__lo0bits>
 8006ee8:	9b01      	ldr	r3, [sp, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	6163      	str	r3, [r4, #20]
 8006eee:	3020      	adds	r0, #32
 8006ef0:	e7e7      	b.n	8006ec2 <__d2b+0x62>
 8006ef2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006ef6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006efa:	6030      	str	r0, [r6, #0]
 8006efc:	6918      	ldr	r0, [r3, #16]
 8006efe:	f7ff fcc7 	bl	8006890 <__hi0bits>
 8006f02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006f06:	e7e4      	b.n	8006ed2 <__d2b+0x72>
 8006f08:	08008f8b 	.word	0x08008f8b
 8006f0c:	08008f9c 	.word	0x08008f9c

08006f10 <__ratio>:
 8006f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f14:	b085      	sub	sp, #20
 8006f16:	e9cd 1000 	strd	r1, r0, [sp]
 8006f1a:	a902      	add	r1, sp, #8
 8006f1c:	f7ff ff58 	bl	8006dd0 <__b2d>
 8006f20:	468b      	mov	fp, r1
 8006f22:	4606      	mov	r6, r0
 8006f24:	460f      	mov	r7, r1
 8006f26:	9800      	ldr	r0, [sp, #0]
 8006f28:	a903      	add	r1, sp, #12
 8006f2a:	f7ff ff51 	bl	8006dd0 <__b2d>
 8006f2e:	460d      	mov	r5, r1
 8006f30:	9b01      	ldr	r3, [sp, #4]
 8006f32:	4689      	mov	r9, r1
 8006f34:	6919      	ldr	r1, [r3, #16]
 8006f36:	9b00      	ldr	r3, [sp, #0]
 8006f38:	4604      	mov	r4, r0
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	4630      	mov	r0, r6
 8006f3e:	1ac9      	subs	r1, r1, r3
 8006f40:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006f44:	1a9b      	subs	r3, r3, r2
 8006f46:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	bfcd      	iteet	gt
 8006f4e:	463a      	movgt	r2, r7
 8006f50:	462a      	movle	r2, r5
 8006f52:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006f56:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006f5a:	bfd8      	it	le
 8006f5c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006f60:	464b      	mov	r3, r9
 8006f62:	4622      	mov	r2, r4
 8006f64:	4659      	mov	r1, fp
 8006f66:	f7f9 fbe1 	bl	800072c <__aeabi_ddiv>
 8006f6a:	b005      	add	sp, #20
 8006f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006f70 <__copybits>:
 8006f70:	3901      	subs	r1, #1
 8006f72:	b570      	push	{r4, r5, r6, lr}
 8006f74:	1149      	asrs	r1, r1, #5
 8006f76:	6914      	ldr	r4, [r2, #16]
 8006f78:	3101      	adds	r1, #1
 8006f7a:	f102 0314 	add.w	r3, r2, #20
 8006f7e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006f82:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006f86:	1f05      	subs	r5, r0, #4
 8006f88:	42a3      	cmp	r3, r4
 8006f8a:	d30c      	bcc.n	8006fa6 <__copybits+0x36>
 8006f8c:	1aa3      	subs	r3, r4, r2
 8006f8e:	3b11      	subs	r3, #17
 8006f90:	f023 0303 	bic.w	r3, r3, #3
 8006f94:	3211      	adds	r2, #17
 8006f96:	42a2      	cmp	r2, r4
 8006f98:	bf88      	it	hi
 8006f9a:	2300      	movhi	r3, #0
 8006f9c:	4418      	add	r0, r3
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	4288      	cmp	r0, r1
 8006fa2:	d305      	bcc.n	8006fb0 <__copybits+0x40>
 8006fa4:	bd70      	pop	{r4, r5, r6, pc}
 8006fa6:	f853 6b04 	ldr.w	r6, [r3], #4
 8006faa:	f845 6f04 	str.w	r6, [r5, #4]!
 8006fae:	e7eb      	b.n	8006f88 <__copybits+0x18>
 8006fb0:	f840 3b04 	str.w	r3, [r0], #4
 8006fb4:	e7f4      	b.n	8006fa0 <__copybits+0x30>

08006fb6 <__any_on>:
 8006fb6:	f100 0214 	add.w	r2, r0, #20
 8006fba:	6900      	ldr	r0, [r0, #16]
 8006fbc:	114b      	asrs	r3, r1, #5
 8006fbe:	4298      	cmp	r0, r3
 8006fc0:	b510      	push	{r4, lr}
 8006fc2:	db11      	blt.n	8006fe8 <__any_on+0x32>
 8006fc4:	dd0a      	ble.n	8006fdc <__any_on+0x26>
 8006fc6:	f011 011f 	ands.w	r1, r1, #31
 8006fca:	d007      	beq.n	8006fdc <__any_on+0x26>
 8006fcc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006fd0:	fa24 f001 	lsr.w	r0, r4, r1
 8006fd4:	fa00 f101 	lsl.w	r1, r0, r1
 8006fd8:	428c      	cmp	r4, r1
 8006fda:	d10b      	bne.n	8006ff4 <__any_on+0x3e>
 8006fdc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d803      	bhi.n	8006fec <__any_on+0x36>
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	bd10      	pop	{r4, pc}
 8006fe8:	4603      	mov	r3, r0
 8006fea:	e7f7      	b.n	8006fdc <__any_on+0x26>
 8006fec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006ff0:	2900      	cmp	r1, #0
 8006ff2:	d0f5      	beq.n	8006fe0 <__any_on+0x2a>
 8006ff4:	2001      	movs	r0, #1
 8006ff6:	e7f6      	b.n	8006fe6 <__any_on+0x30>

08006ff8 <sulp>:
 8006ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ffc:	460f      	mov	r7, r1
 8006ffe:	4690      	mov	r8, r2
 8007000:	f7ff fec6 	bl	8006d90 <__ulp>
 8007004:	4604      	mov	r4, r0
 8007006:	460d      	mov	r5, r1
 8007008:	f1b8 0f00 	cmp.w	r8, #0
 800700c:	d011      	beq.n	8007032 <sulp+0x3a>
 800700e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007012:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007016:	2b00      	cmp	r3, #0
 8007018:	dd0b      	ble.n	8007032 <sulp+0x3a>
 800701a:	2400      	movs	r4, #0
 800701c:	051b      	lsls	r3, r3, #20
 800701e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007022:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007026:	4622      	mov	r2, r4
 8007028:	462b      	mov	r3, r5
 800702a:	f7f9 fa55 	bl	80004d8 <__aeabi_dmul>
 800702e:	4604      	mov	r4, r0
 8007030:	460d      	mov	r5, r1
 8007032:	4620      	mov	r0, r4
 8007034:	4629      	mov	r1, r5
 8007036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800703a:	0000      	movs	r0, r0
 800703c:	0000      	movs	r0, r0
	...

08007040 <_strtod_l>:
 8007040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007044:	b09f      	sub	sp, #124	@ 0x7c
 8007046:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007048:	2200      	movs	r2, #0
 800704a:	460c      	mov	r4, r1
 800704c:	921a      	str	r2, [sp, #104]	@ 0x68
 800704e:	f04f 0a00 	mov.w	sl, #0
 8007052:	f04f 0b00 	mov.w	fp, #0
 8007056:	460a      	mov	r2, r1
 8007058:	9005      	str	r0, [sp, #20]
 800705a:	9219      	str	r2, [sp, #100]	@ 0x64
 800705c:	7811      	ldrb	r1, [r2, #0]
 800705e:	292b      	cmp	r1, #43	@ 0x2b
 8007060:	d048      	beq.n	80070f4 <_strtod_l+0xb4>
 8007062:	d836      	bhi.n	80070d2 <_strtod_l+0x92>
 8007064:	290d      	cmp	r1, #13
 8007066:	d830      	bhi.n	80070ca <_strtod_l+0x8a>
 8007068:	2908      	cmp	r1, #8
 800706a:	d830      	bhi.n	80070ce <_strtod_l+0x8e>
 800706c:	2900      	cmp	r1, #0
 800706e:	d039      	beq.n	80070e4 <_strtod_l+0xa4>
 8007070:	2200      	movs	r2, #0
 8007072:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007074:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007076:	782a      	ldrb	r2, [r5, #0]
 8007078:	2a30      	cmp	r2, #48	@ 0x30
 800707a:	f040 80b1 	bne.w	80071e0 <_strtod_l+0x1a0>
 800707e:	786a      	ldrb	r2, [r5, #1]
 8007080:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007084:	2a58      	cmp	r2, #88	@ 0x58
 8007086:	d16c      	bne.n	8007162 <_strtod_l+0x122>
 8007088:	9302      	str	r3, [sp, #8]
 800708a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800708c:	4a8e      	ldr	r2, [pc, #568]	@ (80072c8 <_strtod_l+0x288>)
 800708e:	9301      	str	r3, [sp, #4]
 8007090:	ab1a      	add	r3, sp, #104	@ 0x68
 8007092:	9300      	str	r3, [sp, #0]
 8007094:	9805      	ldr	r0, [sp, #20]
 8007096:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007098:	a919      	add	r1, sp, #100	@ 0x64
 800709a:	f001 fae9 	bl	8008670 <__gethex>
 800709e:	f010 060f 	ands.w	r6, r0, #15
 80070a2:	4604      	mov	r4, r0
 80070a4:	d005      	beq.n	80070b2 <_strtod_l+0x72>
 80070a6:	2e06      	cmp	r6, #6
 80070a8:	d126      	bne.n	80070f8 <_strtod_l+0xb8>
 80070aa:	2300      	movs	r3, #0
 80070ac:	3501      	adds	r5, #1
 80070ae:	9519      	str	r5, [sp, #100]	@ 0x64
 80070b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f040 8584 	bne.w	8007bc2 <_strtod_l+0xb82>
 80070ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070bc:	b1bb      	cbz	r3, 80070ee <_strtod_l+0xae>
 80070be:	4650      	mov	r0, sl
 80070c0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80070c4:	b01f      	add	sp, #124	@ 0x7c
 80070c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ca:	2920      	cmp	r1, #32
 80070cc:	d1d0      	bne.n	8007070 <_strtod_l+0x30>
 80070ce:	3201      	adds	r2, #1
 80070d0:	e7c3      	b.n	800705a <_strtod_l+0x1a>
 80070d2:	292d      	cmp	r1, #45	@ 0x2d
 80070d4:	d1cc      	bne.n	8007070 <_strtod_l+0x30>
 80070d6:	2101      	movs	r1, #1
 80070d8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80070da:	1c51      	adds	r1, r2, #1
 80070dc:	9119      	str	r1, [sp, #100]	@ 0x64
 80070de:	7852      	ldrb	r2, [r2, #1]
 80070e0:	2a00      	cmp	r2, #0
 80070e2:	d1c7      	bne.n	8007074 <_strtod_l+0x34>
 80070e4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80070e6:	9419      	str	r4, [sp, #100]	@ 0x64
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	f040 8568 	bne.w	8007bbe <_strtod_l+0xb7e>
 80070ee:	4650      	mov	r0, sl
 80070f0:	4659      	mov	r1, fp
 80070f2:	e7e7      	b.n	80070c4 <_strtod_l+0x84>
 80070f4:	2100      	movs	r1, #0
 80070f6:	e7ef      	b.n	80070d8 <_strtod_l+0x98>
 80070f8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80070fa:	b13a      	cbz	r2, 800710c <_strtod_l+0xcc>
 80070fc:	2135      	movs	r1, #53	@ 0x35
 80070fe:	a81c      	add	r0, sp, #112	@ 0x70
 8007100:	f7ff ff36 	bl	8006f70 <__copybits>
 8007104:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007106:	9805      	ldr	r0, [sp, #20]
 8007108:	f7ff fb10 	bl	800672c <_Bfree>
 800710c:	3e01      	subs	r6, #1
 800710e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007110:	2e04      	cmp	r6, #4
 8007112:	d806      	bhi.n	8007122 <_strtod_l+0xe2>
 8007114:	e8df f006 	tbb	[pc, r6]
 8007118:	201d0314 	.word	0x201d0314
 800711c:	14          	.byte	0x14
 800711d:	00          	.byte	0x00
 800711e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007122:	05e1      	lsls	r1, r4, #23
 8007124:	bf48      	it	mi
 8007126:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800712a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800712e:	0d1b      	lsrs	r3, r3, #20
 8007130:	051b      	lsls	r3, r3, #20
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1bd      	bne.n	80070b2 <_strtod_l+0x72>
 8007136:	f7fe fb2b 	bl	8005790 <__errno>
 800713a:	2322      	movs	r3, #34	@ 0x22
 800713c:	6003      	str	r3, [r0, #0]
 800713e:	e7b8      	b.n	80070b2 <_strtod_l+0x72>
 8007140:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007144:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007148:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800714c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007150:	e7e7      	b.n	8007122 <_strtod_l+0xe2>
 8007152:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80072cc <_strtod_l+0x28c>
 8007156:	e7e4      	b.n	8007122 <_strtod_l+0xe2>
 8007158:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800715c:	f04f 3aff 	mov.w	sl, #4294967295
 8007160:	e7df      	b.n	8007122 <_strtod_l+0xe2>
 8007162:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007164:	1c5a      	adds	r2, r3, #1
 8007166:	9219      	str	r2, [sp, #100]	@ 0x64
 8007168:	785b      	ldrb	r3, [r3, #1]
 800716a:	2b30      	cmp	r3, #48	@ 0x30
 800716c:	d0f9      	beq.n	8007162 <_strtod_l+0x122>
 800716e:	2b00      	cmp	r3, #0
 8007170:	d09f      	beq.n	80070b2 <_strtod_l+0x72>
 8007172:	2301      	movs	r3, #1
 8007174:	9309      	str	r3, [sp, #36]	@ 0x24
 8007176:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007178:	220a      	movs	r2, #10
 800717a:	930c      	str	r3, [sp, #48]	@ 0x30
 800717c:	2300      	movs	r3, #0
 800717e:	461f      	mov	r7, r3
 8007180:	9308      	str	r3, [sp, #32]
 8007182:	930a      	str	r3, [sp, #40]	@ 0x28
 8007184:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007186:	7805      	ldrb	r5, [r0, #0]
 8007188:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800718c:	b2d9      	uxtb	r1, r3
 800718e:	2909      	cmp	r1, #9
 8007190:	d928      	bls.n	80071e4 <_strtod_l+0x1a4>
 8007192:	2201      	movs	r2, #1
 8007194:	494e      	ldr	r1, [pc, #312]	@ (80072d0 <_strtod_l+0x290>)
 8007196:	f001 f99b 	bl	80084d0 <strncmp>
 800719a:	2800      	cmp	r0, #0
 800719c:	d032      	beq.n	8007204 <_strtod_l+0x1c4>
 800719e:	2000      	movs	r0, #0
 80071a0:	462a      	mov	r2, r5
 80071a2:	4681      	mov	r9, r0
 80071a4:	463d      	mov	r5, r7
 80071a6:	4603      	mov	r3, r0
 80071a8:	2a65      	cmp	r2, #101	@ 0x65
 80071aa:	d001      	beq.n	80071b0 <_strtod_l+0x170>
 80071ac:	2a45      	cmp	r2, #69	@ 0x45
 80071ae:	d114      	bne.n	80071da <_strtod_l+0x19a>
 80071b0:	b91d      	cbnz	r5, 80071ba <_strtod_l+0x17a>
 80071b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071b4:	4302      	orrs	r2, r0
 80071b6:	d095      	beq.n	80070e4 <_strtod_l+0xa4>
 80071b8:	2500      	movs	r5, #0
 80071ba:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80071bc:	1c62      	adds	r2, r4, #1
 80071be:	9219      	str	r2, [sp, #100]	@ 0x64
 80071c0:	7862      	ldrb	r2, [r4, #1]
 80071c2:	2a2b      	cmp	r2, #43	@ 0x2b
 80071c4:	d077      	beq.n	80072b6 <_strtod_l+0x276>
 80071c6:	2a2d      	cmp	r2, #45	@ 0x2d
 80071c8:	d07b      	beq.n	80072c2 <_strtod_l+0x282>
 80071ca:	f04f 0c00 	mov.w	ip, #0
 80071ce:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80071d2:	2909      	cmp	r1, #9
 80071d4:	f240 8082 	bls.w	80072dc <_strtod_l+0x29c>
 80071d8:	9419      	str	r4, [sp, #100]	@ 0x64
 80071da:	f04f 0800 	mov.w	r8, #0
 80071de:	e0a2      	b.n	8007326 <_strtod_l+0x2e6>
 80071e0:	2300      	movs	r3, #0
 80071e2:	e7c7      	b.n	8007174 <_strtod_l+0x134>
 80071e4:	2f08      	cmp	r7, #8
 80071e6:	bfd5      	itete	le
 80071e8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80071ea:	9908      	ldrgt	r1, [sp, #32]
 80071ec:	fb02 3301 	mlale	r3, r2, r1, r3
 80071f0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80071f4:	f100 0001 	add.w	r0, r0, #1
 80071f8:	bfd4      	ite	le
 80071fa:	930a      	strle	r3, [sp, #40]	@ 0x28
 80071fc:	9308      	strgt	r3, [sp, #32]
 80071fe:	3701      	adds	r7, #1
 8007200:	9019      	str	r0, [sp, #100]	@ 0x64
 8007202:	e7bf      	b.n	8007184 <_strtod_l+0x144>
 8007204:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007206:	1c5a      	adds	r2, r3, #1
 8007208:	9219      	str	r2, [sp, #100]	@ 0x64
 800720a:	785a      	ldrb	r2, [r3, #1]
 800720c:	b37f      	cbz	r7, 800726e <_strtod_l+0x22e>
 800720e:	4681      	mov	r9, r0
 8007210:	463d      	mov	r5, r7
 8007212:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007216:	2b09      	cmp	r3, #9
 8007218:	d912      	bls.n	8007240 <_strtod_l+0x200>
 800721a:	2301      	movs	r3, #1
 800721c:	e7c4      	b.n	80071a8 <_strtod_l+0x168>
 800721e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007220:	3001      	adds	r0, #1
 8007222:	1c5a      	adds	r2, r3, #1
 8007224:	9219      	str	r2, [sp, #100]	@ 0x64
 8007226:	785a      	ldrb	r2, [r3, #1]
 8007228:	2a30      	cmp	r2, #48	@ 0x30
 800722a:	d0f8      	beq.n	800721e <_strtod_l+0x1de>
 800722c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007230:	2b08      	cmp	r3, #8
 8007232:	f200 84cb 	bhi.w	8007bcc <_strtod_l+0xb8c>
 8007236:	4681      	mov	r9, r0
 8007238:	2000      	movs	r0, #0
 800723a:	4605      	mov	r5, r0
 800723c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800723e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007240:	3a30      	subs	r2, #48	@ 0x30
 8007242:	f100 0301 	add.w	r3, r0, #1
 8007246:	d02a      	beq.n	800729e <_strtod_l+0x25e>
 8007248:	4499      	add	r9, r3
 800724a:	210a      	movs	r1, #10
 800724c:	462b      	mov	r3, r5
 800724e:	eb00 0c05 	add.w	ip, r0, r5
 8007252:	4563      	cmp	r3, ip
 8007254:	d10d      	bne.n	8007272 <_strtod_l+0x232>
 8007256:	1c69      	adds	r1, r5, #1
 8007258:	4401      	add	r1, r0
 800725a:	4428      	add	r0, r5
 800725c:	2808      	cmp	r0, #8
 800725e:	dc16      	bgt.n	800728e <_strtod_l+0x24e>
 8007260:	230a      	movs	r3, #10
 8007262:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007264:	fb03 2300 	mla	r3, r3, r0, r2
 8007268:	930a      	str	r3, [sp, #40]	@ 0x28
 800726a:	2300      	movs	r3, #0
 800726c:	e018      	b.n	80072a0 <_strtod_l+0x260>
 800726e:	4638      	mov	r0, r7
 8007270:	e7da      	b.n	8007228 <_strtod_l+0x1e8>
 8007272:	2b08      	cmp	r3, #8
 8007274:	f103 0301 	add.w	r3, r3, #1
 8007278:	dc03      	bgt.n	8007282 <_strtod_l+0x242>
 800727a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800727c:	434e      	muls	r6, r1
 800727e:	960a      	str	r6, [sp, #40]	@ 0x28
 8007280:	e7e7      	b.n	8007252 <_strtod_l+0x212>
 8007282:	2b10      	cmp	r3, #16
 8007284:	bfde      	ittt	le
 8007286:	9e08      	ldrle	r6, [sp, #32]
 8007288:	434e      	mulle	r6, r1
 800728a:	9608      	strle	r6, [sp, #32]
 800728c:	e7e1      	b.n	8007252 <_strtod_l+0x212>
 800728e:	280f      	cmp	r0, #15
 8007290:	dceb      	bgt.n	800726a <_strtod_l+0x22a>
 8007292:	230a      	movs	r3, #10
 8007294:	9808      	ldr	r0, [sp, #32]
 8007296:	fb03 2300 	mla	r3, r3, r0, r2
 800729a:	9308      	str	r3, [sp, #32]
 800729c:	e7e5      	b.n	800726a <_strtod_l+0x22a>
 800729e:	4629      	mov	r1, r5
 80072a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80072a2:	460d      	mov	r5, r1
 80072a4:	1c50      	adds	r0, r2, #1
 80072a6:	9019      	str	r0, [sp, #100]	@ 0x64
 80072a8:	7852      	ldrb	r2, [r2, #1]
 80072aa:	4618      	mov	r0, r3
 80072ac:	e7b1      	b.n	8007212 <_strtod_l+0x1d2>
 80072ae:	f04f 0900 	mov.w	r9, #0
 80072b2:	2301      	movs	r3, #1
 80072b4:	e77d      	b.n	80071b2 <_strtod_l+0x172>
 80072b6:	f04f 0c00 	mov.w	ip, #0
 80072ba:	1ca2      	adds	r2, r4, #2
 80072bc:	9219      	str	r2, [sp, #100]	@ 0x64
 80072be:	78a2      	ldrb	r2, [r4, #2]
 80072c0:	e785      	b.n	80071ce <_strtod_l+0x18e>
 80072c2:	f04f 0c01 	mov.w	ip, #1
 80072c6:	e7f8      	b.n	80072ba <_strtod_l+0x27a>
 80072c8:	08009110 	.word	0x08009110
 80072cc:	7ff00000 	.word	0x7ff00000
 80072d0:	080090f8 	.word	0x080090f8
 80072d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80072d6:	1c51      	adds	r1, r2, #1
 80072d8:	9119      	str	r1, [sp, #100]	@ 0x64
 80072da:	7852      	ldrb	r2, [r2, #1]
 80072dc:	2a30      	cmp	r2, #48	@ 0x30
 80072de:	d0f9      	beq.n	80072d4 <_strtod_l+0x294>
 80072e0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80072e4:	2908      	cmp	r1, #8
 80072e6:	f63f af78 	bhi.w	80071da <_strtod_l+0x19a>
 80072ea:	f04f 080a 	mov.w	r8, #10
 80072ee:	3a30      	subs	r2, #48	@ 0x30
 80072f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80072f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80072f4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80072f6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80072f8:	1c56      	adds	r6, r2, #1
 80072fa:	9619      	str	r6, [sp, #100]	@ 0x64
 80072fc:	7852      	ldrb	r2, [r2, #1]
 80072fe:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007302:	f1be 0f09 	cmp.w	lr, #9
 8007306:	d939      	bls.n	800737c <_strtod_l+0x33c>
 8007308:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800730a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800730e:	1a76      	subs	r6, r6, r1
 8007310:	2e08      	cmp	r6, #8
 8007312:	dc03      	bgt.n	800731c <_strtod_l+0x2dc>
 8007314:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007316:	4588      	cmp	r8, r1
 8007318:	bfa8      	it	ge
 800731a:	4688      	movge	r8, r1
 800731c:	f1bc 0f00 	cmp.w	ip, #0
 8007320:	d001      	beq.n	8007326 <_strtod_l+0x2e6>
 8007322:	f1c8 0800 	rsb	r8, r8, #0
 8007326:	2d00      	cmp	r5, #0
 8007328:	d14e      	bne.n	80073c8 <_strtod_l+0x388>
 800732a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800732c:	4308      	orrs	r0, r1
 800732e:	f47f aec0 	bne.w	80070b2 <_strtod_l+0x72>
 8007332:	2b00      	cmp	r3, #0
 8007334:	f47f aed6 	bne.w	80070e4 <_strtod_l+0xa4>
 8007338:	2a69      	cmp	r2, #105	@ 0x69
 800733a:	d028      	beq.n	800738e <_strtod_l+0x34e>
 800733c:	dc25      	bgt.n	800738a <_strtod_l+0x34a>
 800733e:	2a49      	cmp	r2, #73	@ 0x49
 8007340:	d025      	beq.n	800738e <_strtod_l+0x34e>
 8007342:	2a4e      	cmp	r2, #78	@ 0x4e
 8007344:	f47f aece 	bne.w	80070e4 <_strtod_l+0xa4>
 8007348:	499a      	ldr	r1, [pc, #616]	@ (80075b4 <_strtod_l+0x574>)
 800734a:	a819      	add	r0, sp, #100	@ 0x64
 800734c:	f001 fbb2 	bl	8008ab4 <__match>
 8007350:	2800      	cmp	r0, #0
 8007352:	f43f aec7 	beq.w	80070e4 <_strtod_l+0xa4>
 8007356:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	2b28      	cmp	r3, #40	@ 0x28
 800735c:	d12e      	bne.n	80073bc <_strtod_l+0x37c>
 800735e:	4996      	ldr	r1, [pc, #600]	@ (80075b8 <_strtod_l+0x578>)
 8007360:	aa1c      	add	r2, sp, #112	@ 0x70
 8007362:	a819      	add	r0, sp, #100	@ 0x64
 8007364:	f001 fbba 	bl	8008adc <__hexnan>
 8007368:	2805      	cmp	r0, #5
 800736a:	d127      	bne.n	80073bc <_strtod_l+0x37c>
 800736c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800736e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007372:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007376:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800737a:	e69a      	b.n	80070b2 <_strtod_l+0x72>
 800737c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800737e:	fb08 2101 	mla	r1, r8, r1, r2
 8007382:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007386:	920e      	str	r2, [sp, #56]	@ 0x38
 8007388:	e7b5      	b.n	80072f6 <_strtod_l+0x2b6>
 800738a:	2a6e      	cmp	r2, #110	@ 0x6e
 800738c:	e7da      	b.n	8007344 <_strtod_l+0x304>
 800738e:	498b      	ldr	r1, [pc, #556]	@ (80075bc <_strtod_l+0x57c>)
 8007390:	a819      	add	r0, sp, #100	@ 0x64
 8007392:	f001 fb8f 	bl	8008ab4 <__match>
 8007396:	2800      	cmp	r0, #0
 8007398:	f43f aea4 	beq.w	80070e4 <_strtod_l+0xa4>
 800739c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800739e:	4988      	ldr	r1, [pc, #544]	@ (80075c0 <_strtod_l+0x580>)
 80073a0:	3b01      	subs	r3, #1
 80073a2:	a819      	add	r0, sp, #100	@ 0x64
 80073a4:	9319      	str	r3, [sp, #100]	@ 0x64
 80073a6:	f001 fb85 	bl	8008ab4 <__match>
 80073aa:	b910      	cbnz	r0, 80073b2 <_strtod_l+0x372>
 80073ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80073ae:	3301      	adds	r3, #1
 80073b0:	9319      	str	r3, [sp, #100]	@ 0x64
 80073b2:	f04f 0a00 	mov.w	sl, #0
 80073b6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80075c4 <_strtod_l+0x584>
 80073ba:	e67a      	b.n	80070b2 <_strtod_l+0x72>
 80073bc:	4882      	ldr	r0, [pc, #520]	@ (80075c8 <_strtod_l+0x588>)
 80073be:	f001 f8b7 	bl	8008530 <nan>
 80073c2:	4682      	mov	sl, r0
 80073c4:	468b      	mov	fp, r1
 80073c6:	e674      	b.n	80070b2 <_strtod_l+0x72>
 80073c8:	eba8 0309 	sub.w	r3, r8, r9
 80073cc:	2f00      	cmp	r7, #0
 80073ce:	bf08      	it	eq
 80073d0:	462f      	moveq	r7, r5
 80073d2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80073d4:	2d10      	cmp	r5, #16
 80073d6:	462c      	mov	r4, r5
 80073d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80073da:	bfa8      	it	ge
 80073dc:	2410      	movge	r4, #16
 80073de:	f7f9 f801 	bl	80003e4 <__aeabi_ui2d>
 80073e2:	2d09      	cmp	r5, #9
 80073e4:	4682      	mov	sl, r0
 80073e6:	468b      	mov	fp, r1
 80073e8:	dc11      	bgt.n	800740e <_strtod_l+0x3ce>
 80073ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f43f ae60 	beq.w	80070b2 <_strtod_l+0x72>
 80073f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073f4:	dd76      	ble.n	80074e4 <_strtod_l+0x4a4>
 80073f6:	2b16      	cmp	r3, #22
 80073f8:	dc5d      	bgt.n	80074b6 <_strtod_l+0x476>
 80073fa:	4974      	ldr	r1, [pc, #464]	@ (80075cc <_strtod_l+0x58c>)
 80073fc:	4652      	mov	r2, sl
 80073fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007402:	465b      	mov	r3, fp
 8007404:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007408:	f7f9 f866 	bl	80004d8 <__aeabi_dmul>
 800740c:	e7d9      	b.n	80073c2 <_strtod_l+0x382>
 800740e:	4b6f      	ldr	r3, [pc, #444]	@ (80075cc <_strtod_l+0x58c>)
 8007410:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007414:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007418:	f7f9 f85e 	bl	80004d8 <__aeabi_dmul>
 800741c:	4682      	mov	sl, r0
 800741e:	9808      	ldr	r0, [sp, #32]
 8007420:	468b      	mov	fp, r1
 8007422:	f7f8 ffdf 	bl	80003e4 <__aeabi_ui2d>
 8007426:	4602      	mov	r2, r0
 8007428:	460b      	mov	r3, r1
 800742a:	4650      	mov	r0, sl
 800742c:	4659      	mov	r1, fp
 800742e:	f7f8 fe9d 	bl	800016c <__adddf3>
 8007432:	2d0f      	cmp	r5, #15
 8007434:	4682      	mov	sl, r0
 8007436:	468b      	mov	fp, r1
 8007438:	ddd7      	ble.n	80073ea <_strtod_l+0x3aa>
 800743a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800743c:	1b2c      	subs	r4, r5, r4
 800743e:	441c      	add	r4, r3
 8007440:	2c00      	cmp	r4, #0
 8007442:	f340 8096 	ble.w	8007572 <_strtod_l+0x532>
 8007446:	f014 030f 	ands.w	r3, r4, #15
 800744a:	d00a      	beq.n	8007462 <_strtod_l+0x422>
 800744c:	495f      	ldr	r1, [pc, #380]	@ (80075cc <_strtod_l+0x58c>)
 800744e:	4652      	mov	r2, sl
 8007450:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007454:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007458:	465b      	mov	r3, fp
 800745a:	f7f9 f83d 	bl	80004d8 <__aeabi_dmul>
 800745e:	4682      	mov	sl, r0
 8007460:	468b      	mov	fp, r1
 8007462:	f034 040f 	bics.w	r4, r4, #15
 8007466:	d073      	beq.n	8007550 <_strtod_l+0x510>
 8007468:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800746c:	dd48      	ble.n	8007500 <_strtod_l+0x4c0>
 800746e:	2400      	movs	r4, #0
 8007470:	46a0      	mov	r8, r4
 8007472:	46a1      	mov	r9, r4
 8007474:	940a      	str	r4, [sp, #40]	@ 0x28
 8007476:	2322      	movs	r3, #34	@ 0x22
 8007478:	f04f 0a00 	mov.w	sl, #0
 800747c:	9a05      	ldr	r2, [sp, #20]
 800747e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80075c4 <_strtod_l+0x584>
 8007482:	6013      	str	r3, [r2, #0]
 8007484:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007486:	2b00      	cmp	r3, #0
 8007488:	f43f ae13 	beq.w	80070b2 <_strtod_l+0x72>
 800748c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800748e:	9805      	ldr	r0, [sp, #20]
 8007490:	f7ff f94c 	bl	800672c <_Bfree>
 8007494:	4649      	mov	r1, r9
 8007496:	9805      	ldr	r0, [sp, #20]
 8007498:	f7ff f948 	bl	800672c <_Bfree>
 800749c:	4641      	mov	r1, r8
 800749e:	9805      	ldr	r0, [sp, #20]
 80074a0:	f7ff f944 	bl	800672c <_Bfree>
 80074a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80074a6:	9805      	ldr	r0, [sp, #20]
 80074a8:	f7ff f940 	bl	800672c <_Bfree>
 80074ac:	4621      	mov	r1, r4
 80074ae:	9805      	ldr	r0, [sp, #20]
 80074b0:	f7ff f93c 	bl	800672c <_Bfree>
 80074b4:	e5fd      	b.n	80070b2 <_strtod_l+0x72>
 80074b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074b8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80074bc:	4293      	cmp	r3, r2
 80074be:	dbbc      	blt.n	800743a <_strtod_l+0x3fa>
 80074c0:	4c42      	ldr	r4, [pc, #264]	@ (80075cc <_strtod_l+0x58c>)
 80074c2:	f1c5 050f 	rsb	r5, r5, #15
 80074c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80074ca:	4652      	mov	r2, sl
 80074cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074d0:	465b      	mov	r3, fp
 80074d2:	f7f9 f801 	bl	80004d8 <__aeabi_dmul>
 80074d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074d8:	1b5d      	subs	r5, r3, r5
 80074da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80074de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80074e2:	e791      	b.n	8007408 <_strtod_l+0x3c8>
 80074e4:	3316      	adds	r3, #22
 80074e6:	dba8      	blt.n	800743a <_strtod_l+0x3fa>
 80074e8:	4b38      	ldr	r3, [pc, #224]	@ (80075cc <_strtod_l+0x58c>)
 80074ea:	eba9 0808 	sub.w	r8, r9, r8
 80074ee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80074f2:	4650      	mov	r0, sl
 80074f4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80074f8:	4659      	mov	r1, fp
 80074fa:	f7f9 f917 	bl	800072c <__aeabi_ddiv>
 80074fe:	e760      	b.n	80073c2 <_strtod_l+0x382>
 8007500:	4b33      	ldr	r3, [pc, #204]	@ (80075d0 <_strtod_l+0x590>)
 8007502:	4650      	mov	r0, sl
 8007504:	9308      	str	r3, [sp, #32]
 8007506:	2300      	movs	r3, #0
 8007508:	4659      	mov	r1, fp
 800750a:	461e      	mov	r6, r3
 800750c:	1124      	asrs	r4, r4, #4
 800750e:	2c01      	cmp	r4, #1
 8007510:	dc21      	bgt.n	8007556 <_strtod_l+0x516>
 8007512:	b10b      	cbz	r3, 8007518 <_strtod_l+0x4d8>
 8007514:	4682      	mov	sl, r0
 8007516:	468b      	mov	fp, r1
 8007518:	492d      	ldr	r1, [pc, #180]	@ (80075d0 <_strtod_l+0x590>)
 800751a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800751e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007522:	4652      	mov	r2, sl
 8007524:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007528:	465b      	mov	r3, fp
 800752a:	f7f8 ffd5 	bl	80004d8 <__aeabi_dmul>
 800752e:	4b25      	ldr	r3, [pc, #148]	@ (80075c4 <_strtod_l+0x584>)
 8007530:	460a      	mov	r2, r1
 8007532:	400b      	ands	r3, r1
 8007534:	4927      	ldr	r1, [pc, #156]	@ (80075d4 <_strtod_l+0x594>)
 8007536:	4682      	mov	sl, r0
 8007538:	428b      	cmp	r3, r1
 800753a:	d898      	bhi.n	800746e <_strtod_l+0x42e>
 800753c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007540:	428b      	cmp	r3, r1
 8007542:	bf86      	itte	hi
 8007544:	f04f 3aff 	movhi.w	sl, #4294967295
 8007548:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80075d8 <_strtod_l+0x598>
 800754c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007550:	2300      	movs	r3, #0
 8007552:	9308      	str	r3, [sp, #32]
 8007554:	e07a      	b.n	800764c <_strtod_l+0x60c>
 8007556:	07e2      	lsls	r2, r4, #31
 8007558:	d505      	bpl.n	8007566 <_strtod_l+0x526>
 800755a:	9b08      	ldr	r3, [sp, #32]
 800755c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007560:	f7f8 ffba 	bl	80004d8 <__aeabi_dmul>
 8007564:	2301      	movs	r3, #1
 8007566:	9a08      	ldr	r2, [sp, #32]
 8007568:	3601      	adds	r6, #1
 800756a:	3208      	adds	r2, #8
 800756c:	1064      	asrs	r4, r4, #1
 800756e:	9208      	str	r2, [sp, #32]
 8007570:	e7cd      	b.n	800750e <_strtod_l+0x4ce>
 8007572:	d0ed      	beq.n	8007550 <_strtod_l+0x510>
 8007574:	4264      	negs	r4, r4
 8007576:	f014 020f 	ands.w	r2, r4, #15
 800757a:	d00a      	beq.n	8007592 <_strtod_l+0x552>
 800757c:	4b13      	ldr	r3, [pc, #76]	@ (80075cc <_strtod_l+0x58c>)
 800757e:	4650      	mov	r0, sl
 8007580:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007584:	4659      	mov	r1, fp
 8007586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758a:	f7f9 f8cf 	bl	800072c <__aeabi_ddiv>
 800758e:	4682      	mov	sl, r0
 8007590:	468b      	mov	fp, r1
 8007592:	1124      	asrs	r4, r4, #4
 8007594:	d0dc      	beq.n	8007550 <_strtod_l+0x510>
 8007596:	2c1f      	cmp	r4, #31
 8007598:	dd20      	ble.n	80075dc <_strtod_l+0x59c>
 800759a:	2400      	movs	r4, #0
 800759c:	46a0      	mov	r8, r4
 800759e:	46a1      	mov	r9, r4
 80075a0:	940a      	str	r4, [sp, #40]	@ 0x28
 80075a2:	2322      	movs	r3, #34	@ 0x22
 80075a4:	9a05      	ldr	r2, [sp, #20]
 80075a6:	f04f 0a00 	mov.w	sl, #0
 80075aa:	f04f 0b00 	mov.w	fp, #0
 80075ae:	6013      	str	r3, [r2, #0]
 80075b0:	e768      	b.n	8007484 <_strtod_l+0x444>
 80075b2:	bf00      	nop
 80075b4:	08008ee3 	.word	0x08008ee3
 80075b8:	080090fc 	.word	0x080090fc
 80075bc:	08008edb 	.word	0x08008edb
 80075c0:	08008f12 	.word	0x08008f12
 80075c4:	7ff00000 	.word	0x7ff00000
 80075c8:	080092a5 	.word	0x080092a5
 80075cc:	08009030 	.word	0x08009030
 80075d0:	08009008 	.word	0x08009008
 80075d4:	7ca00000 	.word	0x7ca00000
 80075d8:	7fefffff 	.word	0x7fefffff
 80075dc:	f014 0310 	ands.w	r3, r4, #16
 80075e0:	bf18      	it	ne
 80075e2:	236a      	movne	r3, #106	@ 0x6a
 80075e4:	4650      	mov	r0, sl
 80075e6:	9308      	str	r3, [sp, #32]
 80075e8:	4659      	mov	r1, fp
 80075ea:	2300      	movs	r3, #0
 80075ec:	4ea9      	ldr	r6, [pc, #676]	@ (8007894 <_strtod_l+0x854>)
 80075ee:	07e2      	lsls	r2, r4, #31
 80075f0:	d504      	bpl.n	80075fc <_strtod_l+0x5bc>
 80075f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80075f6:	f7f8 ff6f 	bl	80004d8 <__aeabi_dmul>
 80075fa:	2301      	movs	r3, #1
 80075fc:	1064      	asrs	r4, r4, #1
 80075fe:	f106 0608 	add.w	r6, r6, #8
 8007602:	d1f4      	bne.n	80075ee <_strtod_l+0x5ae>
 8007604:	b10b      	cbz	r3, 800760a <_strtod_l+0x5ca>
 8007606:	4682      	mov	sl, r0
 8007608:	468b      	mov	fp, r1
 800760a:	9b08      	ldr	r3, [sp, #32]
 800760c:	b1b3      	cbz	r3, 800763c <_strtod_l+0x5fc>
 800760e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007612:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007616:	2b00      	cmp	r3, #0
 8007618:	4659      	mov	r1, fp
 800761a:	dd0f      	ble.n	800763c <_strtod_l+0x5fc>
 800761c:	2b1f      	cmp	r3, #31
 800761e:	dd57      	ble.n	80076d0 <_strtod_l+0x690>
 8007620:	2b34      	cmp	r3, #52	@ 0x34
 8007622:	bfd8      	it	le
 8007624:	f04f 33ff 	movle.w	r3, #4294967295
 8007628:	f04f 0a00 	mov.w	sl, #0
 800762c:	bfcf      	iteee	gt
 800762e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007632:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007636:	4093      	lslle	r3, r2
 8007638:	ea03 0b01 	andle.w	fp, r3, r1
 800763c:	2200      	movs	r2, #0
 800763e:	2300      	movs	r3, #0
 8007640:	4650      	mov	r0, sl
 8007642:	4659      	mov	r1, fp
 8007644:	f7f9 f9b0 	bl	80009a8 <__aeabi_dcmpeq>
 8007648:	2800      	cmp	r0, #0
 800764a:	d1a6      	bne.n	800759a <_strtod_l+0x55a>
 800764c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800764e:	463a      	mov	r2, r7
 8007650:	9300      	str	r3, [sp, #0]
 8007652:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007654:	462b      	mov	r3, r5
 8007656:	9805      	ldr	r0, [sp, #20]
 8007658:	f7ff f8d0 	bl	80067fc <__s2b>
 800765c:	900a      	str	r0, [sp, #40]	@ 0x28
 800765e:	2800      	cmp	r0, #0
 8007660:	f43f af05 	beq.w	800746e <_strtod_l+0x42e>
 8007664:	2400      	movs	r4, #0
 8007666:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007668:	eba9 0308 	sub.w	r3, r9, r8
 800766c:	2a00      	cmp	r2, #0
 800766e:	bfa8      	it	ge
 8007670:	2300      	movge	r3, #0
 8007672:	46a0      	mov	r8, r4
 8007674:	9312      	str	r3, [sp, #72]	@ 0x48
 8007676:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800767a:	9316      	str	r3, [sp, #88]	@ 0x58
 800767c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800767e:	9805      	ldr	r0, [sp, #20]
 8007680:	6859      	ldr	r1, [r3, #4]
 8007682:	f7ff f813 	bl	80066ac <_Balloc>
 8007686:	4681      	mov	r9, r0
 8007688:	2800      	cmp	r0, #0
 800768a:	f43f aef4 	beq.w	8007476 <_strtod_l+0x436>
 800768e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007690:	300c      	adds	r0, #12
 8007692:	691a      	ldr	r2, [r3, #16]
 8007694:	f103 010c 	add.w	r1, r3, #12
 8007698:	3202      	adds	r2, #2
 800769a:	0092      	lsls	r2, r2, #2
 800769c:	f000 ff3a 	bl	8008514 <memcpy>
 80076a0:	ab1c      	add	r3, sp, #112	@ 0x70
 80076a2:	9301      	str	r3, [sp, #4]
 80076a4:	ab1b      	add	r3, sp, #108	@ 0x6c
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	4652      	mov	r2, sl
 80076aa:	465b      	mov	r3, fp
 80076ac:	9805      	ldr	r0, [sp, #20]
 80076ae:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80076b2:	f7ff fbd5 	bl	8006e60 <__d2b>
 80076b6:	901a      	str	r0, [sp, #104]	@ 0x68
 80076b8:	2800      	cmp	r0, #0
 80076ba:	f43f aedc 	beq.w	8007476 <_strtod_l+0x436>
 80076be:	2101      	movs	r1, #1
 80076c0:	9805      	ldr	r0, [sp, #20]
 80076c2:	f7ff f931 	bl	8006928 <__i2b>
 80076c6:	4680      	mov	r8, r0
 80076c8:	b948      	cbnz	r0, 80076de <_strtod_l+0x69e>
 80076ca:	f04f 0800 	mov.w	r8, #0
 80076ce:	e6d2      	b.n	8007476 <_strtod_l+0x436>
 80076d0:	f04f 32ff 	mov.w	r2, #4294967295
 80076d4:	fa02 f303 	lsl.w	r3, r2, r3
 80076d8:	ea03 0a0a 	and.w	sl, r3, sl
 80076dc:	e7ae      	b.n	800763c <_strtod_l+0x5fc>
 80076de:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80076e0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80076e2:	2d00      	cmp	r5, #0
 80076e4:	bfab      	itete	ge
 80076e6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80076e8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80076ea:	18ef      	addge	r7, r5, r3
 80076ec:	1b5e      	sublt	r6, r3, r5
 80076ee:	9b08      	ldr	r3, [sp, #32]
 80076f0:	bfa8      	it	ge
 80076f2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80076f4:	eba5 0503 	sub.w	r5, r5, r3
 80076f8:	4415      	add	r5, r2
 80076fa:	4b67      	ldr	r3, [pc, #412]	@ (8007898 <_strtod_l+0x858>)
 80076fc:	f105 35ff 	add.w	r5, r5, #4294967295
 8007700:	bfb8      	it	lt
 8007702:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007704:	429d      	cmp	r5, r3
 8007706:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800770a:	da50      	bge.n	80077ae <_strtod_l+0x76e>
 800770c:	1b5b      	subs	r3, r3, r5
 800770e:	2b1f      	cmp	r3, #31
 8007710:	f04f 0101 	mov.w	r1, #1
 8007714:	eba2 0203 	sub.w	r2, r2, r3
 8007718:	dc3d      	bgt.n	8007796 <_strtod_l+0x756>
 800771a:	fa01 f303 	lsl.w	r3, r1, r3
 800771e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007720:	2300      	movs	r3, #0
 8007722:	9310      	str	r3, [sp, #64]	@ 0x40
 8007724:	18bd      	adds	r5, r7, r2
 8007726:	9b08      	ldr	r3, [sp, #32]
 8007728:	42af      	cmp	r7, r5
 800772a:	4416      	add	r6, r2
 800772c:	441e      	add	r6, r3
 800772e:	463b      	mov	r3, r7
 8007730:	bfa8      	it	ge
 8007732:	462b      	movge	r3, r5
 8007734:	42b3      	cmp	r3, r6
 8007736:	bfa8      	it	ge
 8007738:	4633      	movge	r3, r6
 800773a:	2b00      	cmp	r3, #0
 800773c:	bfc2      	ittt	gt
 800773e:	1aed      	subgt	r5, r5, r3
 8007740:	1af6      	subgt	r6, r6, r3
 8007742:	1aff      	subgt	r7, r7, r3
 8007744:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007746:	2b00      	cmp	r3, #0
 8007748:	dd16      	ble.n	8007778 <_strtod_l+0x738>
 800774a:	4641      	mov	r1, r8
 800774c:	461a      	mov	r2, r3
 800774e:	9805      	ldr	r0, [sp, #20]
 8007750:	f7ff f9a8 	bl	8006aa4 <__pow5mult>
 8007754:	4680      	mov	r8, r0
 8007756:	2800      	cmp	r0, #0
 8007758:	d0b7      	beq.n	80076ca <_strtod_l+0x68a>
 800775a:	4601      	mov	r1, r0
 800775c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800775e:	9805      	ldr	r0, [sp, #20]
 8007760:	f7ff f8f8 	bl	8006954 <__multiply>
 8007764:	900e      	str	r0, [sp, #56]	@ 0x38
 8007766:	2800      	cmp	r0, #0
 8007768:	f43f ae85 	beq.w	8007476 <_strtod_l+0x436>
 800776c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800776e:	9805      	ldr	r0, [sp, #20]
 8007770:	f7fe ffdc 	bl	800672c <_Bfree>
 8007774:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007776:	931a      	str	r3, [sp, #104]	@ 0x68
 8007778:	2d00      	cmp	r5, #0
 800777a:	dc1d      	bgt.n	80077b8 <_strtod_l+0x778>
 800777c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800777e:	2b00      	cmp	r3, #0
 8007780:	dd23      	ble.n	80077ca <_strtod_l+0x78a>
 8007782:	4649      	mov	r1, r9
 8007784:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007786:	9805      	ldr	r0, [sp, #20]
 8007788:	f7ff f98c 	bl	8006aa4 <__pow5mult>
 800778c:	4681      	mov	r9, r0
 800778e:	b9e0      	cbnz	r0, 80077ca <_strtod_l+0x78a>
 8007790:	f04f 0900 	mov.w	r9, #0
 8007794:	e66f      	b.n	8007476 <_strtod_l+0x436>
 8007796:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800779a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800779e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80077a2:	35e2      	adds	r5, #226	@ 0xe2
 80077a4:	fa01 f305 	lsl.w	r3, r1, r5
 80077a8:	9310      	str	r3, [sp, #64]	@ 0x40
 80077aa:	9113      	str	r1, [sp, #76]	@ 0x4c
 80077ac:	e7ba      	b.n	8007724 <_strtod_l+0x6e4>
 80077ae:	2300      	movs	r3, #0
 80077b0:	9310      	str	r3, [sp, #64]	@ 0x40
 80077b2:	2301      	movs	r3, #1
 80077b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80077b6:	e7b5      	b.n	8007724 <_strtod_l+0x6e4>
 80077b8:	462a      	mov	r2, r5
 80077ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80077bc:	9805      	ldr	r0, [sp, #20]
 80077be:	f7ff f9cb 	bl	8006b58 <__lshift>
 80077c2:	901a      	str	r0, [sp, #104]	@ 0x68
 80077c4:	2800      	cmp	r0, #0
 80077c6:	d1d9      	bne.n	800777c <_strtod_l+0x73c>
 80077c8:	e655      	b.n	8007476 <_strtod_l+0x436>
 80077ca:	2e00      	cmp	r6, #0
 80077cc:	dd07      	ble.n	80077de <_strtod_l+0x79e>
 80077ce:	4649      	mov	r1, r9
 80077d0:	4632      	mov	r2, r6
 80077d2:	9805      	ldr	r0, [sp, #20]
 80077d4:	f7ff f9c0 	bl	8006b58 <__lshift>
 80077d8:	4681      	mov	r9, r0
 80077da:	2800      	cmp	r0, #0
 80077dc:	d0d8      	beq.n	8007790 <_strtod_l+0x750>
 80077de:	2f00      	cmp	r7, #0
 80077e0:	dd08      	ble.n	80077f4 <_strtod_l+0x7b4>
 80077e2:	4641      	mov	r1, r8
 80077e4:	463a      	mov	r2, r7
 80077e6:	9805      	ldr	r0, [sp, #20]
 80077e8:	f7ff f9b6 	bl	8006b58 <__lshift>
 80077ec:	4680      	mov	r8, r0
 80077ee:	2800      	cmp	r0, #0
 80077f0:	f43f ae41 	beq.w	8007476 <_strtod_l+0x436>
 80077f4:	464a      	mov	r2, r9
 80077f6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80077f8:	9805      	ldr	r0, [sp, #20]
 80077fa:	f7ff fa35 	bl	8006c68 <__mdiff>
 80077fe:	4604      	mov	r4, r0
 8007800:	2800      	cmp	r0, #0
 8007802:	f43f ae38 	beq.w	8007476 <_strtod_l+0x436>
 8007806:	68c3      	ldr	r3, [r0, #12]
 8007808:	4641      	mov	r1, r8
 800780a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800780c:	2300      	movs	r3, #0
 800780e:	60c3      	str	r3, [r0, #12]
 8007810:	f7ff fa0e 	bl	8006c30 <__mcmp>
 8007814:	2800      	cmp	r0, #0
 8007816:	da45      	bge.n	80078a4 <_strtod_l+0x864>
 8007818:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800781a:	ea53 030a 	orrs.w	r3, r3, sl
 800781e:	d16b      	bne.n	80078f8 <_strtod_l+0x8b8>
 8007820:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007824:	2b00      	cmp	r3, #0
 8007826:	d167      	bne.n	80078f8 <_strtod_l+0x8b8>
 8007828:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800782c:	0d1b      	lsrs	r3, r3, #20
 800782e:	051b      	lsls	r3, r3, #20
 8007830:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007834:	d960      	bls.n	80078f8 <_strtod_l+0x8b8>
 8007836:	6963      	ldr	r3, [r4, #20]
 8007838:	b913      	cbnz	r3, 8007840 <_strtod_l+0x800>
 800783a:	6923      	ldr	r3, [r4, #16]
 800783c:	2b01      	cmp	r3, #1
 800783e:	dd5b      	ble.n	80078f8 <_strtod_l+0x8b8>
 8007840:	4621      	mov	r1, r4
 8007842:	2201      	movs	r2, #1
 8007844:	9805      	ldr	r0, [sp, #20]
 8007846:	f7ff f987 	bl	8006b58 <__lshift>
 800784a:	4641      	mov	r1, r8
 800784c:	4604      	mov	r4, r0
 800784e:	f7ff f9ef 	bl	8006c30 <__mcmp>
 8007852:	2800      	cmp	r0, #0
 8007854:	dd50      	ble.n	80078f8 <_strtod_l+0x8b8>
 8007856:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800785a:	9a08      	ldr	r2, [sp, #32]
 800785c:	0d1b      	lsrs	r3, r3, #20
 800785e:	051b      	lsls	r3, r3, #20
 8007860:	2a00      	cmp	r2, #0
 8007862:	d06a      	beq.n	800793a <_strtod_l+0x8fa>
 8007864:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007868:	d867      	bhi.n	800793a <_strtod_l+0x8fa>
 800786a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800786e:	f67f ae98 	bls.w	80075a2 <_strtod_l+0x562>
 8007872:	4650      	mov	r0, sl
 8007874:	4659      	mov	r1, fp
 8007876:	4b09      	ldr	r3, [pc, #36]	@ (800789c <_strtod_l+0x85c>)
 8007878:	2200      	movs	r2, #0
 800787a:	f7f8 fe2d 	bl	80004d8 <__aeabi_dmul>
 800787e:	4b08      	ldr	r3, [pc, #32]	@ (80078a0 <_strtod_l+0x860>)
 8007880:	4682      	mov	sl, r0
 8007882:	400b      	ands	r3, r1
 8007884:	468b      	mov	fp, r1
 8007886:	2b00      	cmp	r3, #0
 8007888:	f47f ae00 	bne.w	800748c <_strtod_l+0x44c>
 800788c:	2322      	movs	r3, #34	@ 0x22
 800788e:	9a05      	ldr	r2, [sp, #20]
 8007890:	6013      	str	r3, [r2, #0]
 8007892:	e5fb      	b.n	800748c <_strtod_l+0x44c>
 8007894:	08009128 	.word	0x08009128
 8007898:	fffffc02 	.word	0xfffffc02
 800789c:	39500000 	.word	0x39500000
 80078a0:	7ff00000 	.word	0x7ff00000
 80078a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80078a8:	d165      	bne.n	8007976 <_strtod_l+0x936>
 80078aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80078ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078b0:	b35a      	cbz	r2, 800790a <_strtod_l+0x8ca>
 80078b2:	4a99      	ldr	r2, [pc, #612]	@ (8007b18 <_strtod_l+0xad8>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d12b      	bne.n	8007910 <_strtod_l+0x8d0>
 80078b8:	9b08      	ldr	r3, [sp, #32]
 80078ba:	4651      	mov	r1, sl
 80078bc:	b303      	cbz	r3, 8007900 <_strtod_l+0x8c0>
 80078be:	465a      	mov	r2, fp
 80078c0:	4b96      	ldr	r3, [pc, #600]	@ (8007b1c <_strtod_l+0xadc>)
 80078c2:	4013      	ands	r3, r2
 80078c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80078c8:	f04f 32ff 	mov.w	r2, #4294967295
 80078cc:	d81b      	bhi.n	8007906 <_strtod_l+0x8c6>
 80078ce:	0d1b      	lsrs	r3, r3, #20
 80078d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80078d4:	fa02 f303 	lsl.w	r3, r2, r3
 80078d8:	4299      	cmp	r1, r3
 80078da:	d119      	bne.n	8007910 <_strtod_l+0x8d0>
 80078dc:	4b90      	ldr	r3, [pc, #576]	@ (8007b20 <_strtod_l+0xae0>)
 80078de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d102      	bne.n	80078ea <_strtod_l+0x8aa>
 80078e4:	3101      	adds	r1, #1
 80078e6:	f43f adc6 	beq.w	8007476 <_strtod_l+0x436>
 80078ea:	f04f 0a00 	mov.w	sl, #0
 80078ee:	4b8b      	ldr	r3, [pc, #556]	@ (8007b1c <_strtod_l+0xadc>)
 80078f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80078f2:	401a      	ands	r2, r3
 80078f4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80078f8:	9b08      	ldr	r3, [sp, #32]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1b9      	bne.n	8007872 <_strtod_l+0x832>
 80078fe:	e5c5      	b.n	800748c <_strtod_l+0x44c>
 8007900:	f04f 33ff 	mov.w	r3, #4294967295
 8007904:	e7e8      	b.n	80078d8 <_strtod_l+0x898>
 8007906:	4613      	mov	r3, r2
 8007908:	e7e6      	b.n	80078d8 <_strtod_l+0x898>
 800790a:	ea53 030a 	orrs.w	r3, r3, sl
 800790e:	d0a2      	beq.n	8007856 <_strtod_l+0x816>
 8007910:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007912:	b1db      	cbz	r3, 800794c <_strtod_l+0x90c>
 8007914:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007916:	4213      	tst	r3, r2
 8007918:	d0ee      	beq.n	80078f8 <_strtod_l+0x8b8>
 800791a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800791c:	4650      	mov	r0, sl
 800791e:	4659      	mov	r1, fp
 8007920:	9a08      	ldr	r2, [sp, #32]
 8007922:	b1bb      	cbz	r3, 8007954 <_strtod_l+0x914>
 8007924:	f7ff fb68 	bl	8006ff8 <sulp>
 8007928:	4602      	mov	r2, r0
 800792a:	460b      	mov	r3, r1
 800792c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007930:	f7f8 fc1c 	bl	800016c <__adddf3>
 8007934:	4682      	mov	sl, r0
 8007936:	468b      	mov	fp, r1
 8007938:	e7de      	b.n	80078f8 <_strtod_l+0x8b8>
 800793a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800793e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007942:	f04f 3aff 	mov.w	sl, #4294967295
 8007946:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800794a:	e7d5      	b.n	80078f8 <_strtod_l+0x8b8>
 800794c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800794e:	ea13 0f0a 	tst.w	r3, sl
 8007952:	e7e1      	b.n	8007918 <_strtod_l+0x8d8>
 8007954:	f7ff fb50 	bl	8006ff8 <sulp>
 8007958:	4602      	mov	r2, r0
 800795a:	460b      	mov	r3, r1
 800795c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007960:	f7f8 fc02 	bl	8000168 <__aeabi_dsub>
 8007964:	2200      	movs	r2, #0
 8007966:	2300      	movs	r3, #0
 8007968:	4682      	mov	sl, r0
 800796a:	468b      	mov	fp, r1
 800796c:	f7f9 f81c 	bl	80009a8 <__aeabi_dcmpeq>
 8007970:	2800      	cmp	r0, #0
 8007972:	d0c1      	beq.n	80078f8 <_strtod_l+0x8b8>
 8007974:	e615      	b.n	80075a2 <_strtod_l+0x562>
 8007976:	4641      	mov	r1, r8
 8007978:	4620      	mov	r0, r4
 800797a:	f7ff fac9 	bl	8006f10 <__ratio>
 800797e:	2200      	movs	r2, #0
 8007980:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007984:	4606      	mov	r6, r0
 8007986:	460f      	mov	r7, r1
 8007988:	f7f9 f822 	bl	80009d0 <__aeabi_dcmple>
 800798c:	2800      	cmp	r0, #0
 800798e:	d06d      	beq.n	8007a6c <_strtod_l+0xa2c>
 8007990:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007992:	2b00      	cmp	r3, #0
 8007994:	d178      	bne.n	8007a88 <_strtod_l+0xa48>
 8007996:	f1ba 0f00 	cmp.w	sl, #0
 800799a:	d156      	bne.n	8007a4a <_strtod_l+0xa0a>
 800799c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800799e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d158      	bne.n	8007a58 <_strtod_l+0xa18>
 80079a6:	2200      	movs	r2, #0
 80079a8:	4630      	mov	r0, r6
 80079aa:	4639      	mov	r1, r7
 80079ac:	4b5d      	ldr	r3, [pc, #372]	@ (8007b24 <_strtod_l+0xae4>)
 80079ae:	f7f9 f805 	bl	80009bc <__aeabi_dcmplt>
 80079b2:	2800      	cmp	r0, #0
 80079b4:	d157      	bne.n	8007a66 <_strtod_l+0xa26>
 80079b6:	4630      	mov	r0, r6
 80079b8:	4639      	mov	r1, r7
 80079ba:	2200      	movs	r2, #0
 80079bc:	4b5a      	ldr	r3, [pc, #360]	@ (8007b28 <_strtod_l+0xae8>)
 80079be:	f7f8 fd8b 	bl	80004d8 <__aeabi_dmul>
 80079c2:	4606      	mov	r6, r0
 80079c4:	460f      	mov	r7, r1
 80079c6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80079ca:	9606      	str	r6, [sp, #24]
 80079cc:	9307      	str	r3, [sp, #28]
 80079ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079d2:	4d52      	ldr	r5, [pc, #328]	@ (8007b1c <_strtod_l+0xadc>)
 80079d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80079d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079da:	401d      	ands	r5, r3
 80079dc:	4b53      	ldr	r3, [pc, #332]	@ (8007b2c <_strtod_l+0xaec>)
 80079de:	429d      	cmp	r5, r3
 80079e0:	f040 80aa 	bne.w	8007b38 <_strtod_l+0xaf8>
 80079e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079e6:	4650      	mov	r0, sl
 80079e8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80079ec:	4659      	mov	r1, fp
 80079ee:	f7ff f9cf 	bl	8006d90 <__ulp>
 80079f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079f6:	f7f8 fd6f 	bl	80004d8 <__aeabi_dmul>
 80079fa:	4652      	mov	r2, sl
 80079fc:	465b      	mov	r3, fp
 80079fe:	f7f8 fbb5 	bl	800016c <__adddf3>
 8007a02:	460b      	mov	r3, r1
 8007a04:	4945      	ldr	r1, [pc, #276]	@ (8007b1c <_strtod_l+0xadc>)
 8007a06:	4a4a      	ldr	r2, [pc, #296]	@ (8007b30 <_strtod_l+0xaf0>)
 8007a08:	4019      	ands	r1, r3
 8007a0a:	4291      	cmp	r1, r2
 8007a0c:	4682      	mov	sl, r0
 8007a0e:	d942      	bls.n	8007a96 <_strtod_l+0xa56>
 8007a10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007a12:	4b43      	ldr	r3, [pc, #268]	@ (8007b20 <_strtod_l+0xae0>)
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d103      	bne.n	8007a20 <_strtod_l+0x9e0>
 8007a18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	f43f ad2b 	beq.w	8007476 <_strtod_l+0x436>
 8007a20:	f04f 3aff 	mov.w	sl, #4294967295
 8007a24:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007b20 <_strtod_l+0xae0>
 8007a28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007a2a:	9805      	ldr	r0, [sp, #20]
 8007a2c:	f7fe fe7e 	bl	800672c <_Bfree>
 8007a30:	4649      	mov	r1, r9
 8007a32:	9805      	ldr	r0, [sp, #20]
 8007a34:	f7fe fe7a 	bl	800672c <_Bfree>
 8007a38:	4641      	mov	r1, r8
 8007a3a:	9805      	ldr	r0, [sp, #20]
 8007a3c:	f7fe fe76 	bl	800672c <_Bfree>
 8007a40:	4621      	mov	r1, r4
 8007a42:	9805      	ldr	r0, [sp, #20]
 8007a44:	f7fe fe72 	bl	800672c <_Bfree>
 8007a48:	e618      	b.n	800767c <_strtod_l+0x63c>
 8007a4a:	f1ba 0f01 	cmp.w	sl, #1
 8007a4e:	d103      	bne.n	8007a58 <_strtod_l+0xa18>
 8007a50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f43f ada5 	beq.w	80075a2 <_strtod_l+0x562>
 8007a58:	2200      	movs	r2, #0
 8007a5a:	4b36      	ldr	r3, [pc, #216]	@ (8007b34 <_strtod_l+0xaf4>)
 8007a5c:	2600      	movs	r6, #0
 8007a5e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007a62:	4f30      	ldr	r7, [pc, #192]	@ (8007b24 <_strtod_l+0xae4>)
 8007a64:	e7b3      	b.n	80079ce <_strtod_l+0x98e>
 8007a66:	2600      	movs	r6, #0
 8007a68:	4f2f      	ldr	r7, [pc, #188]	@ (8007b28 <_strtod_l+0xae8>)
 8007a6a:	e7ac      	b.n	80079c6 <_strtod_l+0x986>
 8007a6c:	4630      	mov	r0, r6
 8007a6e:	4639      	mov	r1, r7
 8007a70:	4b2d      	ldr	r3, [pc, #180]	@ (8007b28 <_strtod_l+0xae8>)
 8007a72:	2200      	movs	r2, #0
 8007a74:	f7f8 fd30 	bl	80004d8 <__aeabi_dmul>
 8007a78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a7a:	4606      	mov	r6, r0
 8007a7c:	460f      	mov	r7, r1
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d0a1      	beq.n	80079c6 <_strtod_l+0x986>
 8007a82:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007a86:	e7a2      	b.n	80079ce <_strtod_l+0x98e>
 8007a88:	2200      	movs	r2, #0
 8007a8a:	4b26      	ldr	r3, [pc, #152]	@ (8007b24 <_strtod_l+0xae4>)
 8007a8c:	4616      	mov	r6, r2
 8007a8e:	461f      	mov	r7, r3
 8007a90:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007a94:	e79b      	b.n	80079ce <_strtod_l+0x98e>
 8007a96:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007a9a:	9b08      	ldr	r3, [sp, #32]
 8007a9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d1c1      	bne.n	8007a28 <_strtod_l+0x9e8>
 8007aa4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007aa8:	0d1b      	lsrs	r3, r3, #20
 8007aaa:	051b      	lsls	r3, r3, #20
 8007aac:	429d      	cmp	r5, r3
 8007aae:	d1bb      	bne.n	8007a28 <_strtod_l+0x9e8>
 8007ab0:	4630      	mov	r0, r6
 8007ab2:	4639      	mov	r1, r7
 8007ab4:	f7f9 fb4c 	bl	8001150 <__aeabi_d2lz>
 8007ab8:	f7f8 fce0 	bl	800047c <__aeabi_l2d>
 8007abc:	4602      	mov	r2, r0
 8007abe:	460b      	mov	r3, r1
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	4639      	mov	r1, r7
 8007ac4:	f7f8 fb50 	bl	8000168 <__aeabi_dsub>
 8007ac8:	460b      	mov	r3, r1
 8007aca:	4602      	mov	r2, r0
 8007acc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007ad0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007ad4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ad6:	ea46 060a 	orr.w	r6, r6, sl
 8007ada:	431e      	orrs	r6, r3
 8007adc:	d069      	beq.n	8007bb2 <_strtod_l+0xb72>
 8007ade:	a30a      	add	r3, pc, #40	@ (adr r3, 8007b08 <_strtod_l+0xac8>)
 8007ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae4:	f7f8 ff6a 	bl	80009bc <__aeabi_dcmplt>
 8007ae8:	2800      	cmp	r0, #0
 8007aea:	f47f accf 	bne.w	800748c <_strtod_l+0x44c>
 8007aee:	a308      	add	r3, pc, #32	@ (adr r3, 8007b10 <_strtod_l+0xad0>)
 8007af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007af8:	f7f8 ff7e 	bl	80009f8 <__aeabi_dcmpgt>
 8007afc:	2800      	cmp	r0, #0
 8007afe:	d093      	beq.n	8007a28 <_strtod_l+0x9e8>
 8007b00:	e4c4      	b.n	800748c <_strtod_l+0x44c>
 8007b02:	bf00      	nop
 8007b04:	f3af 8000 	nop.w
 8007b08:	94a03595 	.word	0x94a03595
 8007b0c:	3fdfffff 	.word	0x3fdfffff
 8007b10:	35afe535 	.word	0x35afe535
 8007b14:	3fe00000 	.word	0x3fe00000
 8007b18:	000fffff 	.word	0x000fffff
 8007b1c:	7ff00000 	.word	0x7ff00000
 8007b20:	7fefffff 	.word	0x7fefffff
 8007b24:	3ff00000 	.word	0x3ff00000
 8007b28:	3fe00000 	.word	0x3fe00000
 8007b2c:	7fe00000 	.word	0x7fe00000
 8007b30:	7c9fffff 	.word	0x7c9fffff
 8007b34:	bff00000 	.word	0xbff00000
 8007b38:	9b08      	ldr	r3, [sp, #32]
 8007b3a:	b323      	cbz	r3, 8007b86 <_strtod_l+0xb46>
 8007b3c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007b40:	d821      	bhi.n	8007b86 <_strtod_l+0xb46>
 8007b42:	a327      	add	r3, pc, #156	@ (adr r3, 8007be0 <_strtod_l+0xba0>)
 8007b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b48:	4630      	mov	r0, r6
 8007b4a:	4639      	mov	r1, r7
 8007b4c:	f7f8 ff40 	bl	80009d0 <__aeabi_dcmple>
 8007b50:	b1a0      	cbz	r0, 8007b7c <_strtod_l+0xb3c>
 8007b52:	4639      	mov	r1, r7
 8007b54:	4630      	mov	r0, r6
 8007b56:	f7f8 ff97 	bl	8000a88 <__aeabi_d2uiz>
 8007b5a:	2801      	cmp	r0, #1
 8007b5c:	bf38      	it	cc
 8007b5e:	2001      	movcc	r0, #1
 8007b60:	f7f8 fc40 	bl	80003e4 <__aeabi_ui2d>
 8007b64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b66:	4606      	mov	r6, r0
 8007b68:	460f      	mov	r7, r1
 8007b6a:	b9fb      	cbnz	r3, 8007bac <_strtod_l+0xb6c>
 8007b6c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007b70:	9014      	str	r0, [sp, #80]	@ 0x50
 8007b72:	9315      	str	r3, [sp, #84]	@ 0x54
 8007b74:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007b78:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007b7c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007b7e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007b82:	1b5b      	subs	r3, r3, r5
 8007b84:	9311      	str	r3, [sp, #68]	@ 0x44
 8007b86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b8a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007b8e:	f7ff f8ff 	bl	8006d90 <__ulp>
 8007b92:	4602      	mov	r2, r0
 8007b94:	460b      	mov	r3, r1
 8007b96:	4650      	mov	r0, sl
 8007b98:	4659      	mov	r1, fp
 8007b9a:	f7f8 fc9d 	bl	80004d8 <__aeabi_dmul>
 8007b9e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007ba2:	f7f8 fae3 	bl	800016c <__adddf3>
 8007ba6:	4682      	mov	sl, r0
 8007ba8:	468b      	mov	fp, r1
 8007baa:	e776      	b.n	8007a9a <_strtod_l+0xa5a>
 8007bac:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007bb0:	e7e0      	b.n	8007b74 <_strtod_l+0xb34>
 8007bb2:	a30d      	add	r3, pc, #52	@ (adr r3, 8007be8 <_strtod_l+0xba8>)
 8007bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb8:	f7f8 ff00 	bl	80009bc <__aeabi_dcmplt>
 8007bbc:	e79e      	b.n	8007afc <_strtod_l+0xabc>
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bc2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007bc4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007bc6:	6013      	str	r3, [r2, #0]
 8007bc8:	f7ff ba77 	b.w	80070ba <_strtod_l+0x7a>
 8007bcc:	2a65      	cmp	r2, #101	@ 0x65
 8007bce:	f43f ab6e 	beq.w	80072ae <_strtod_l+0x26e>
 8007bd2:	2a45      	cmp	r2, #69	@ 0x45
 8007bd4:	f43f ab6b 	beq.w	80072ae <_strtod_l+0x26e>
 8007bd8:	2301      	movs	r3, #1
 8007bda:	f7ff bba6 	b.w	800732a <_strtod_l+0x2ea>
 8007bde:	bf00      	nop
 8007be0:	ffc00000 	.word	0xffc00000
 8007be4:	41dfffff 	.word	0x41dfffff
 8007be8:	94a03595 	.word	0x94a03595
 8007bec:	3fcfffff 	.word	0x3fcfffff

08007bf0 <_strtod_r>:
 8007bf0:	4b01      	ldr	r3, [pc, #4]	@ (8007bf8 <_strtod_r+0x8>)
 8007bf2:	f7ff ba25 	b.w	8007040 <_strtod_l>
 8007bf6:	bf00      	nop
 8007bf8:	2000007c 	.word	0x2000007c

08007bfc <_strtol_l.constprop.0>:
 8007bfc:	2b24      	cmp	r3, #36	@ 0x24
 8007bfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c02:	4686      	mov	lr, r0
 8007c04:	4690      	mov	r8, r2
 8007c06:	d801      	bhi.n	8007c0c <_strtol_l.constprop.0+0x10>
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d106      	bne.n	8007c1a <_strtol_l.constprop.0+0x1e>
 8007c0c:	f7fd fdc0 	bl	8005790 <__errno>
 8007c10:	2316      	movs	r3, #22
 8007c12:	6003      	str	r3, [r0, #0]
 8007c14:	2000      	movs	r0, #0
 8007c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c1a:	460d      	mov	r5, r1
 8007c1c:	4833      	ldr	r0, [pc, #204]	@ (8007cec <_strtol_l.constprop.0+0xf0>)
 8007c1e:	462a      	mov	r2, r5
 8007c20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c24:	5d06      	ldrb	r6, [r0, r4]
 8007c26:	f016 0608 	ands.w	r6, r6, #8
 8007c2a:	d1f8      	bne.n	8007c1e <_strtol_l.constprop.0+0x22>
 8007c2c:	2c2d      	cmp	r4, #45	@ 0x2d
 8007c2e:	d12d      	bne.n	8007c8c <_strtol_l.constprop.0+0x90>
 8007c30:	2601      	movs	r6, #1
 8007c32:	782c      	ldrb	r4, [r5, #0]
 8007c34:	1c95      	adds	r5, r2, #2
 8007c36:	f033 0210 	bics.w	r2, r3, #16
 8007c3a:	d109      	bne.n	8007c50 <_strtol_l.constprop.0+0x54>
 8007c3c:	2c30      	cmp	r4, #48	@ 0x30
 8007c3e:	d12a      	bne.n	8007c96 <_strtol_l.constprop.0+0x9a>
 8007c40:	782a      	ldrb	r2, [r5, #0]
 8007c42:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007c46:	2a58      	cmp	r2, #88	@ 0x58
 8007c48:	d125      	bne.n	8007c96 <_strtol_l.constprop.0+0x9a>
 8007c4a:	2310      	movs	r3, #16
 8007c4c:	786c      	ldrb	r4, [r5, #1]
 8007c4e:	3502      	adds	r5, #2
 8007c50:	2200      	movs	r2, #0
 8007c52:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007c56:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007c5a:	fbbc f9f3 	udiv	r9, ip, r3
 8007c5e:	4610      	mov	r0, r2
 8007c60:	fb03 ca19 	mls	sl, r3, r9, ip
 8007c64:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007c68:	2f09      	cmp	r7, #9
 8007c6a:	d81b      	bhi.n	8007ca4 <_strtol_l.constprop.0+0xa8>
 8007c6c:	463c      	mov	r4, r7
 8007c6e:	42a3      	cmp	r3, r4
 8007c70:	dd27      	ble.n	8007cc2 <_strtol_l.constprop.0+0xc6>
 8007c72:	1c57      	adds	r7, r2, #1
 8007c74:	d007      	beq.n	8007c86 <_strtol_l.constprop.0+0x8a>
 8007c76:	4581      	cmp	r9, r0
 8007c78:	d320      	bcc.n	8007cbc <_strtol_l.constprop.0+0xc0>
 8007c7a:	d101      	bne.n	8007c80 <_strtol_l.constprop.0+0x84>
 8007c7c:	45a2      	cmp	sl, r4
 8007c7e:	db1d      	blt.n	8007cbc <_strtol_l.constprop.0+0xc0>
 8007c80:	2201      	movs	r2, #1
 8007c82:	fb00 4003 	mla	r0, r0, r3, r4
 8007c86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c8a:	e7eb      	b.n	8007c64 <_strtol_l.constprop.0+0x68>
 8007c8c:	2c2b      	cmp	r4, #43	@ 0x2b
 8007c8e:	bf04      	itt	eq
 8007c90:	782c      	ldrbeq	r4, [r5, #0]
 8007c92:	1c95      	addeq	r5, r2, #2
 8007c94:	e7cf      	b.n	8007c36 <_strtol_l.constprop.0+0x3a>
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1da      	bne.n	8007c50 <_strtol_l.constprop.0+0x54>
 8007c9a:	2c30      	cmp	r4, #48	@ 0x30
 8007c9c:	bf0c      	ite	eq
 8007c9e:	2308      	moveq	r3, #8
 8007ca0:	230a      	movne	r3, #10
 8007ca2:	e7d5      	b.n	8007c50 <_strtol_l.constprop.0+0x54>
 8007ca4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007ca8:	2f19      	cmp	r7, #25
 8007caa:	d801      	bhi.n	8007cb0 <_strtol_l.constprop.0+0xb4>
 8007cac:	3c37      	subs	r4, #55	@ 0x37
 8007cae:	e7de      	b.n	8007c6e <_strtol_l.constprop.0+0x72>
 8007cb0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007cb4:	2f19      	cmp	r7, #25
 8007cb6:	d804      	bhi.n	8007cc2 <_strtol_l.constprop.0+0xc6>
 8007cb8:	3c57      	subs	r4, #87	@ 0x57
 8007cba:	e7d8      	b.n	8007c6e <_strtol_l.constprop.0+0x72>
 8007cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8007cc0:	e7e1      	b.n	8007c86 <_strtol_l.constprop.0+0x8a>
 8007cc2:	1c53      	adds	r3, r2, #1
 8007cc4:	d108      	bne.n	8007cd8 <_strtol_l.constprop.0+0xdc>
 8007cc6:	2322      	movs	r3, #34	@ 0x22
 8007cc8:	4660      	mov	r0, ip
 8007cca:	f8ce 3000 	str.w	r3, [lr]
 8007cce:	f1b8 0f00 	cmp.w	r8, #0
 8007cd2:	d0a0      	beq.n	8007c16 <_strtol_l.constprop.0+0x1a>
 8007cd4:	1e69      	subs	r1, r5, #1
 8007cd6:	e006      	b.n	8007ce6 <_strtol_l.constprop.0+0xea>
 8007cd8:	b106      	cbz	r6, 8007cdc <_strtol_l.constprop.0+0xe0>
 8007cda:	4240      	negs	r0, r0
 8007cdc:	f1b8 0f00 	cmp.w	r8, #0
 8007ce0:	d099      	beq.n	8007c16 <_strtol_l.constprop.0+0x1a>
 8007ce2:	2a00      	cmp	r2, #0
 8007ce4:	d1f6      	bne.n	8007cd4 <_strtol_l.constprop.0+0xd8>
 8007ce6:	f8c8 1000 	str.w	r1, [r8]
 8007cea:	e794      	b.n	8007c16 <_strtol_l.constprop.0+0x1a>
 8007cec:	08009151 	.word	0x08009151

08007cf0 <_strtol_r>:
 8007cf0:	f7ff bf84 	b.w	8007bfc <_strtol_l.constprop.0>

08007cf4 <__ssputs_r>:
 8007cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf8:	461f      	mov	r7, r3
 8007cfa:	688e      	ldr	r6, [r1, #8]
 8007cfc:	4682      	mov	sl, r0
 8007cfe:	42be      	cmp	r6, r7
 8007d00:	460c      	mov	r4, r1
 8007d02:	4690      	mov	r8, r2
 8007d04:	680b      	ldr	r3, [r1, #0]
 8007d06:	d82d      	bhi.n	8007d64 <__ssputs_r+0x70>
 8007d08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007d10:	d026      	beq.n	8007d60 <__ssputs_r+0x6c>
 8007d12:	6965      	ldr	r5, [r4, #20]
 8007d14:	6909      	ldr	r1, [r1, #16]
 8007d16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d1a:	eba3 0901 	sub.w	r9, r3, r1
 8007d1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d22:	1c7b      	adds	r3, r7, #1
 8007d24:	444b      	add	r3, r9
 8007d26:	106d      	asrs	r5, r5, #1
 8007d28:	429d      	cmp	r5, r3
 8007d2a:	bf38      	it	cc
 8007d2c:	461d      	movcc	r5, r3
 8007d2e:	0553      	lsls	r3, r2, #21
 8007d30:	d527      	bpl.n	8007d82 <__ssputs_r+0x8e>
 8007d32:	4629      	mov	r1, r5
 8007d34:	f7fe fc2e 	bl	8006594 <_malloc_r>
 8007d38:	4606      	mov	r6, r0
 8007d3a:	b360      	cbz	r0, 8007d96 <__ssputs_r+0xa2>
 8007d3c:	464a      	mov	r2, r9
 8007d3e:	6921      	ldr	r1, [r4, #16]
 8007d40:	f000 fbe8 	bl	8008514 <memcpy>
 8007d44:	89a3      	ldrh	r3, [r4, #12]
 8007d46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007d4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d4e:	81a3      	strh	r3, [r4, #12]
 8007d50:	6126      	str	r6, [r4, #16]
 8007d52:	444e      	add	r6, r9
 8007d54:	6026      	str	r6, [r4, #0]
 8007d56:	463e      	mov	r6, r7
 8007d58:	6165      	str	r5, [r4, #20]
 8007d5a:	eba5 0509 	sub.w	r5, r5, r9
 8007d5e:	60a5      	str	r5, [r4, #8]
 8007d60:	42be      	cmp	r6, r7
 8007d62:	d900      	bls.n	8007d66 <__ssputs_r+0x72>
 8007d64:	463e      	mov	r6, r7
 8007d66:	4632      	mov	r2, r6
 8007d68:	4641      	mov	r1, r8
 8007d6a:	6820      	ldr	r0, [r4, #0]
 8007d6c:	f000 fb96 	bl	800849c <memmove>
 8007d70:	2000      	movs	r0, #0
 8007d72:	68a3      	ldr	r3, [r4, #8]
 8007d74:	1b9b      	subs	r3, r3, r6
 8007d76:	60a3      	str	r3, [r4, #8]
 8007d78:	6823      	ldr	r3, [r4, #0]
 8007d7a:	4433      	add	r3, r6
 8007d7c:	6023      	str	r3, [r4, #0]
 8007d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d82:	462a      	mov	r2, r5
 8007d84:	f000 ff57 	bl	8008c36 <_realloc_r>
 8007d88:	4606      	mov	r6, r0
 8007d8a:	2800      	cmp	r0, #0
 8007d8c:	d1e0      	bne.n	8007d50 <__ssputs_r+0x5c>
 8007d8e:	4650      	mov	r0, sl
 8007d90:	6921      	ldr	r1, [r4, #16]
 8007d92:	f7fe fb8d 	bl	80064b0 <_free_r>
 8007d96:	230c      	movs	r3, #12
 8007d98:	f8ca 3000 	str.w	r3, [sl]
 8007d9c:	89a3      	ldrh	r3, [r4, #12]
 8007d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8007da2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007da6:	81a3      	strh	r3, [r4, #12]
 8007da8:	e7e9      	b.n	8007d7e <__ssputs_r+0x8a>
	...

08007dac <_svfiprintf_r>:
 8007dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db0:	4698      	mov	r8, r3
 8007db2:	898b      	ldrh	r3, [r1, #12]
 8007db4:	4607      	mov	r7, r0
 8007db6:	061b      	lsls	r3, r3, #24
 8007db8:	460d      	mov	r5, r1
 8007dba:	4614      	mov	r4, r2
 8007dbc:	b09d      	sub	sp, #116	@ 0x74
 8007dbe:	d510      	bpl.n	8007de2 <_svfiprintf_r+0x36>
 8007dc0:	690b      	ldr	r3, [r1, #16]
 8007dc2:	b973      	cbnz	r3, 8007de2 <_svfiprintf_r+0x36>
 8007dc4:	2140      	movs	r1, #64	@ 0x40
 8007dc6:	f7fe fbe5 	bl	8006594 <_malloc_r>
 8007dca:	6028      	str	r0, [r5, #0]
 8007dcc:	6128      	str	r0, [r5, #16]
 8007dce:	b930      	cbnz	r0, 8007dde <_svfiprintf_r+0x32>
 8007dd0:	230c      	movs	r3, #12
 8007dd2:	603b      	str	r3, [r7, #0]
 8007dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd8:	b01d      	add	sp, #116	@ 0x74
 8007dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dde:	2340      	movs	r3, #64	@ 0x40
 8007de0:	616b      	str	r3, [r5, #20]
 8007de2:	2300      	movs	r3, #0
 8007de4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007de6:	2320      	movs	r3, #32
 8007de8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007dec:	2330      	movs	r3, #48	@ 0x30
 8007dee:	f04f 0901 	mov.w	r9, #1
 8007df2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007df6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007f90 <_svfiprintf_r+0x1e4>
 8007dfa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007dfe:	4623      	mov	r3, r4
 8007e00:	469a      	mov	sl, r3
 8007e02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e06:	b10a      	cbz	r2, 8007e0c <_svfiprintf_r+0x60>
 8007e08:	2a25      	cmp	r2, #37	@ 0x25
 8007e0a:	d1f9      	bne.n	8007e00 <_svfiprintf_r+0x54>
 8007e0c:	ebba 0b04 	subs.w	fp, sl, r4
 8007e10:	d00b      	beq.n	8007e2a <_svfiprintf_r+0x7e>
 8007e12:	465b      	mov	r3, fp
 8007e14:	4622      	mov	r2, r4
 8007e16:	4629      	mov	r1, r5
 8007e18:	4638      	mov	r0, r7
 8007e1a:	f7ff ff6b 	bl	8007cf4 <__ssputs_r>
 8007e1e:	3001      	adds	r0, #1
 8007e20:	f000 80a7 	beq.w	8007f72 <_svfiprintf_r+0x1c6>
 8007e24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e26:	445a      	add	r2, fp
 8007e28:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e2a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f000 809f 	beq.w	8007f72 <_svfiprintf_r+0x1c6>
 8007e34:	2300      	movs	r3, #0
 8007e36:	f04f 32ff 	mov.w	r2, #4294967295
 8007e3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e3e:	f10a 0a01 	add.w	sl, sl, #1
 8007e42:	9304      	str	r3, [sp, #16]
 8007e44:	9307      	str	r3, [sp, #28]
 8007e46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e4c:	4654      	mov	r4, sl
 8007e4e:	2205      	movs	r2, #5
 8007e50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e54:	484e      	ldr	r0, [pc, #312]	@ (8007f90 <_svfiprintf_r+0x1e4>)
 8007e56:	f7fd fcc8 	bl	80057ea <memchr>
 8007e5a:	9a04      	ldr	r2, [sp, #16]
 8007e5c:	b9d8      	cbnz	r0, 8007e96 <_svfiprintf_r+0xea>
 8007e5e:	06d0      	lsls	r0, r2, #27
 8007e60:	bf44      	itt	mi
 8007e62:	2320      	movmi	r3, #32
 8007e64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e68:	0711      	lsls	r1, r2, #28
 8007e6a:	bf44      	itt	mi
 8007e6c:	232b      	movmi	r3, #43	@ 0x2b
 8007e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e72:	f89a 3000 	ldrb.w	r3, [sl]
 8007e76:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e78:	d015      	beq.n	8007ea6 <_svfiprintf_r+0xfa>
 8007e7a:	4654      	mov	r4, sl
 8007e7c:	2000      	movs	r0, #0
 8007e7e:	f04f 0c0a 	mov.w	ip, #10
 8007e82:	9a07      	ldr	r2, [sp, #28]
 8007e84:	4621      	mov	r1, r4
 8007e86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e8a:	3b30      	subs	r3, #48	@ 0x30
 8007e8c:	2b09      	cmp	r3, #9
 8007e8e:	d94b      	bls.n	8007f28 <_svfiprintf_r+0x17c>
 8007e90:	b1b0      	cbz	r0, 8007ec0 <_svfiprintf_r+0x114>
 8007e92:	9207      	str	r2, [sp, #28]
 8007e94:	e014      	b.n	8007ec0 <_svfiprintf_r+0x114>
 8007e96:	eba0 0308 	sub.w	r3, r0, r8
 8007e9a:	fa09 f303 	lsl.w	r3, r9, r3
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	46a2      	mov	sl, r4
 8007ea2:	9304      	str	r3, [sp, #16]
 8007ea4:	e7d2      	b.n	8007e4c <_svfiprintf_r+0xa0>
 8007ea6:	9b03      	ldr	r3, [sp, #12]
 8007ea8:	1d19      	adds	r1, r3, #4
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	9103      	str	r1, [sp, #12]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	bfbb      	ittet	lt
 8007eb2:	425b      	neglt	r3, r3
 8007eb4:	f042 0202 	orrlt.w	r2, r2, #2
 8007eb8:	9307      	strge	r3, [sp, #28]
 8007eba:	9307      	strlt	r3, [sp, #28]
 8007ebc:	bfb8      	it	lt
 8007ebe:	9204      	strlt	r2, [sp, #16]
 8007ec0:	7823      	ldrb	r3, [r4, #0]
 8007ec2:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ec4:	d10a      	bne.n	8007edc <_svfiprintf_r+0x130>
 8007ec6:	7863      	ldrb	r3, [r4, #1]
 8007ec8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007eca:	d132      	bne.n	8007f32 <_svfiprintf_r+0x186>
 8007ecc:	9b03      	ldr	r3, [sp, #12]
 8007ece:	3402      	adds	r4, #2
 8007ed0:	1d1a      	adds	r2, r3, #4
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	9203      	str	r2, [sp, #12]
 8007ed6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007eda:	9305      	str	r3, [sp, #20]
 8007edc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007f94 <_svfiprintf_r+0x1e8>
 8007ee0:	2203      	movs	r2, #3
 8007ee2:	4650      	mov	r0, sl
 8007ee4:	7821      	ldrb	r1, [r4, #0]
 8007ee6:	f7fd fc80 	bl	80057ea <memchr>
 8007eea:	b138      	cbz	r0, 8007efc <_svfiprintf_r+0x150>
 8007eec:	2240      	movs	r2, #64	@ 0x40
 8007eee:	9b04      	ldr	r3, [sp, #16]
 8007ef0:	eba0 000a 	sub.w	r0, r0, sl
 8007ef4:	4082      	lsls	r2, r0
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	3401      	adds	r4, #1
 8007efa:	9304      	str	r3, [sp, #16]
 8007efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f00:	2206      	movs	r2, #6
 8007f02:	4825      	ldr	r0, [pc, #148]	@ (8007f98 <_svfiprintf_r+0x1ec>)
 8007f04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f08:	f7fd fc6f 	bl	80057ea <memchr>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d036      	beq.n	8007f7e <_svfiprintf_r+0x1d2>
 8007f10:	4b22      	ldr	r3, [pc, #136]	@ (8007f9c <_svfiprintf_r+0x1f0>)
 8007f12:	bb1b      	cbnz	r3, 8007f5c <_svfiprintf_r+0x1b0>
 8007f14:	9b03      	ldr	r3, [sp, #12]
 8007f16:	3307      	adds	r3, #7
 8007f18:	f023 0307 	bic.w	r3, r3, #7
 8007f1c:	3308      	adds	r3, #8
 8007f1e:	9303      	str	r3, [sp, #12]
 8007f20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f22:	4433      	add	r3, r6
 8007f24:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f26:	e76a      	b.n	8007dfe <_svfiprintf_r+0x52>
 8007f28:	460c      	mov	r4, r1
 8007f2a:	2001      	movs	r0, #1
 8007f2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f30:	e7a8      	b.n	8007e84 <_svfiprintf_r+0xd8>
 8007f32:	2300      	movs	r3, #0
 8007f34:	f04f 0c0a 	mov.w	ip, #10
 8007f38:	4619      	mov	r1, r3
 8007f3a:	3401      	adds	r4, #1
 8007f3c:	9305      	str	r3, [sp, #20]
 8007f3e:	4620      	mov	r0, r4
 8007f40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f44:	3a30      	subs	r2, #48	@ 0x30
 8007f46:	2a09      	cmp	r2, #9
 8007f48:	d903      	bls.n	8007f52 <_svfiprintf_r+0x1a6>
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d0c6      	beq.n	8007edc <_svfiprintf_r+0x130>
 8007f4e:	9105      	str	r1, [sp, #20]
 8007f50:	e7c4      	b.n	8007edc <_svfiprintf_r+0x130>
 8007f52:	4604      	mov	r4, r0
 8007f54:	2301      	movs	r3, #1
 8007f56:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f5a:	e7f0      	b.n	8007f3e <_svfiprintf_r+0x192>
 8007f5c:	ab03      	add	r3, sp, #12
 8007f5e:	9300      	str	r3, [sp, #0]
 8007f60:	462a      	mov	r2, r5
 8007f62:	4638      	mov	r0, r7
 8007f64:	4b0e      	ldr	r3, [pc, #56]	@ (8007fa0 <_svfiprintf_r+0x1f4>)
 8007f66:	a904      	add	r1, sp, #16
 8007f68:	f7fc fcba 	bl	80048e0 <_printf_float>
 8007f6c:	1c42      	adds	r2, r0, #1
 8007f6e:	4606      	mov	r6, r0
 8007f70:	d1d6      	bne.n	8007f20 <_svfiprintf_r+0x174>
 8007f72:	89ab      	ldrh	r3, [r5, #12]
 8007f74:	065b      	lsls	r3, r3, #25
 8007f76:	f53f af2d 	bmi.w	8007dd4 <_svfiprintf_r+0x28>
 8007f7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f7c:	e72c      	b.n	8007dd8 <_svfiprintf_r+0x2c>
 8007f7e:	ab03      	add	r3, sp, #12
 8007f80:	9300      	str	r3, [sp, #0]
 8007f82:	462a      	mov	r2, r5
 8007f84:	4638      	mov	r0, r7
 8007f86:	4b06      	ldr	r3, [pc, #24]	@ (8007fa0 <_svfiprintf_r+0x1f4>)
 8007f88:	a904      	add	r1, sp, #16
 8007f8a:	f7fc ff47 	bl	8004e1c <_printf_i>
 8007f8e:	e7ed      	b.n	8007f6c <_svfiprintf_r+0x1c0>
 8007f90:	08009251 	.word	0x08009251
 8007f94:	08009257 	.word	0x08009257
 8007f98:	0800925b 	.word	0x0800925b
 8007f9c:	080048e1 	.word	0x080048e1
 8007fa0:	08007cf5 	.word	0x08007cf5

08007fa4 <__sfputc_r>:
 8007fa4:	6893      	ldr	r3, [r2, #8]
 8007fa6:	b410      	push	{r4}
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	6093      	str	r3, [r2, #8]
 8007fae:	da07      	bge.n	8007fc0 <__sfputc_r+0x1c>
 8007fb0:	6994      	ldr	r4, [r2, #24]
 8007fb2:	42a3      	cmp	r3, r4
 8007fb4:	db01      	blt.n	8007fba <__sfputc_r+0x16>
 8007fb6:	290a      	cmp	r1, #10
 8007fb8:	d102      	bne.n	8007fc0 <__sfputc_r+0x1c>
 8007fba:	bc10      	pop	{r4}
 8007fbc:	f000 b9da 	b.w	8008374 <__swbuf_r>
 8007fc0:	6813      	ldr	r3, [r2, #0]
 8007fc2:	1c58      	adds	r0, r3, #1
 8007fc4:	6010      	str	r0, [r2, #0]
 8007fc6:	7019      	strb	r1, [r3, #0]
 8007fc8:	4608      	mov	r0, r1
 8007fca:	bc10      	pop	{r4}
 8007fcc:	4770      	bx	lr

08007fce <__sfputs_r>:
 8007fce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd0:	4606      	mov	r6, r0
 8007fd2:	460f      	mov	r7, r1
 8007fd4:	4614      	mov	r4, r2
 8007fd6:	18d5      	adds	r5, r2, r3
 8007fd8:	42ac      	cmp	r4, r5
 8007fda:	d101      	bne.n	8007fe0 <__sfputs_r+0x12>
 8007fdc:	2000      	movs	r0, #0
 8007fde:	e007      	b.n	8007ff0 <__sfputs_r+0x22>
 8007fe0:	463a      	mov	r2, r7
 8007fe2:	4630      	mov	r0, r6
 8007fe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fe8:	f7ff ffdc 	bl	8007fa4 <__sfputc_r>
 8007fec:	1c43      	adds	r3, r0, #1
 8007fee:	d1f3      	bne.n	8007fd8 <__sfputs_r+0xa>
 8007ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ff4 <_vfiprintf_r>:
 8007ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ff8:	460d      	mov	r5, r1
 8007ffa:	4614      	mov	r4, r2
 8007ffc:	4698      	mov	r8, r3
 8007ffe:	4606      	mov	r6, r0
 8008000:	b09d      	sub	sp, #116	@ 0x74
 8008002:	b118      	cbz	r0, 800800c <_vfiprintf_r+0x18>
 8008004:	6a03      	ldr	r3, [r0, #32]
 8008006:	b90b      	cbnz	r3, 800800c <_vfiprintf_r+0x18>
 8008008:	f7fd fac4 	bl	8005594 <__sinit>
 800800c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800800e:	07d9      	lsls	r1, r3, #31
 8008010:	d405      	bmi.n	800801e <_vfiprintf_r+0x2a>
 8008012:	89ab      	ldrh	r3, [r5, #12]
 8008014:	059a      	lsls	r2, r3, #22
 8008016:	d402      	bmi.n	800801e <_vfiprintf_r+0x2a>
 8008018:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800801a:	f7fd fbe4 	bl	80057e6 <__retarget_lock_acquire_recursive>
 800801e:	89ab      	ldrh	r3, [r5, #12]
 8008020:	071b      	lsls	r3, r3, #28
 8008022:	d501      	bpl.n	8008028 <_vfiprintf_r+0x34>
 8008024:	692b      	ldr	r3, [r5, #16]
 8008026:	b99b      	cbnz	r3, 8008050 <_vfiprintf_r+0x5c>
 8008028:	4629      	mov	r1, r5
 800802a:	4630      	mov	r0, r6
 800802c:	f000 f9e0 	bl	80083f0 <__swsetup_r>
 8008030:	b170      	cbz	r0, 8008050 <_vfiprintf_r+0x5c>
 8008032:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008034:	07dc      	lsls	r4, r3, #31
 8008036:	d504      	bpl.n	8008042 <_vfiprintf_r+0x4e>
 8008038:	f04f 30ff 	mov.w	r0, #4294967295
 800803c:	b01d      	add	sp, #116	@ 0x74
 800803e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008042:	89ab      	ldrh	r3, [r5, #12]
 8008044:	0598      	lsls	r0, r3, #22
 8008046:	d4f7      	bmi.n	8008038 <_vfiprintf_r+0x44>
 8008048:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800804a:	f7fd fbcd 	bl	80057e8 <__retarget_lock_release_recursive>
 800804e:	e7f3      	b.n	8008038 <_vfiprintf_r+0x44>
 8008050:	2300      	movs	r3, #0
 8008052:	9309      	str	r3, [sp, #36]	@ 0x24
 8008054:	2320      	movs	r3, #32
 8008056:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800805a:	2330      	movs	r3, #48	@ 0x30
 800805c:	f04f 0901 	mov.w	r9, #1
 8008060:	f8cd 800c 	str.w	r8, [sp, #12]
 8008064:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008210 <_vfiprintf_r+0x21c>
 8008068:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800806c:	4623      	mov	r3, r4
 800806e:	469a      	mov	sl, r3
 8008070:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008074:	b10a      	cbz	r2, 800807a <_vfiprintf_r+0x86>
 8008076:	2a25      	cmp	r2, #37	@ 0x25
 8008078:	d1f9      	bne.n	800806e <_vfiprintf_r+0x7a>
 800807a:	ebba 0b04 	subs.w	fp, sl, r4
 800807e:	d00b      	beq.n	8008098 <_vfiprintf_r+0xa4>
 8008080:	465b      	mov	r3, fp
 8008082:	4622      	mov	r2, r4
 8008084:	4629      	mov	r1, r5
 8008086:	4630      	mov	r0, r6
 8008088:	f7ff ffa1 	bl	8007fce <__sfputs_r>
 800808c:	3001      	adds	r0, #1
 800808e:	f000 80a7 	beq.w	80081e0 <_vfiprintf_r+0x1ec>
 8008092:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008094:	445a      	add	r2, fp
 8008096:	9209      	str	r2, [sp, #36]	@ 0x24
 8008098:	f89a 3000 	ldrb.w	r3, [sl]
 800809c:	2b00      	cmp	r3, #0
 800809e:	f000 809f 	beq.w	80081e0 <_vfiprintf_r+0x1ec>
 80080a2:	2300      	movs	r3, #0
 80080a4:	f04f 32ff 	mov.w	r2, #4294967295
 80080a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080ac:	f10a 0a01 	add.w	sl, sl, #1
 80080b0:	9304      	str	r3, [sp, #16]
 80080b2:	9307      	str	r3, [sp, #28]
 80080b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80080b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80080ba:	4654      	mov	r4, sl
 80080bc:	2205      	movs	r2, #5
 80080be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080c2:	4853      	ldr	r0, [pc, #332]	@ (8008210 <_vfiprintf_r+0x21c>)
 80080c4:	f7fd fb91 	bl	80057ea <memchr>
 80080c8:	9a04      	ldr	r2, [sp, #16]
 80080ca:	b9d8      	cbnz	r0, 8008104 <_vfiprintf_r+0x110>
 80080cc:	06d1      	lsls	r1, r2, #27
 80080ce:	bf44      	itt	mi
 80080d0:	2320      	movmi	r3, #32
 80080d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080d6:	0713      	lsls	r3, r2, #28
 80080d8:	bf44      	itt	mi
 80080da:	232b      	movmi	r3, #43	@ 0x2b
 80080dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080e0:	f89a 3000 	ldrb.w	r3, [sl]
 80080e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80080e6:	d015      	beq.n	8008114 <_vfiprintf_r+0x120>
 80080e8:	4654      	mov	r4, sl
 80080ea:	2000      	movs	r0, #0
 80080ec:	f04f 0c0a 	mov.w	ip, #10
 80080f0:	9a07      	ldr	r2, [sp, #28]
 80080f2:	4621      	mov	r1, r4
 80080f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080f8:	3b30      	subs	r3, #48	@ 0x30
 80080fa:	2b09      	cmp	r3, #9
 80080fc:	d94b      	bls.n	8008196 <_vfiprintf_r+0x1a2>
 80080fe:	b1b0      	cbz	r0, 800812e <_vfiprintf_r+0x13a>
 8008100:	9207      	str	r2, [sp, #28]
 8008102:	e014      	b.n	800812e <_vfiprintf_r+0x13a>
 8008104:	eba0 0308 	sub.w	r3, r0, r8
 8008108:	fa09 f303 	lsl.w	r3, r9, r3
 800810c:	4313      	orrs	r3, r2
 800810e:	46a2      	mov	sl, r4
 8008110:	9304      	str	r3, [sp, #16]
 8008112:	e7d2      	b.n	80080ba <_vfiprintf_r+0xc6>
 8008114:	9b03      	ldr	r3, [sp, #12]
 8008116:	1d19      	adds	r1, r3, #4
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	9103      	str	r1, [sp, #12]
 800811c:	2b00      	cmp	r3, #0
 800811e:	bfbb      	ittet	lt
 8008120:	425b      	neglt	r3, r3
 8008122:	f042 0202 	orrlt.w	r2, r2, #2
 8008126:	9307      	strge	r3, [sp, #28]
 8008128:	9307      	strlt	r3, [sp, #28]
 800812a:	bfb8      	it	lt
 800812c:	9204      	strlt	r2, [sp, #16]
 800812e:	7823      	ldrb	r3, [r4, #0]
 8008130:	2b2e      	cmp	r3, #46	@ 0x2e
 8008132:	d10a      	bne.n	800814a <_vfiprintf_r+0x156>
 8008134:	7863      	ldrb	r3, [r4, #1]
 8008136:	2b2a      	cmp	r3, #42	@ 0x2a
 8008138:	d132      	bne.n	80081a0 <_vfiprintf_r+0x1ac>
 800813a:	9b03      	ldr	r3, [sp, #12]
 800813c:	3402      	adds	r4, #2
 800813e:	1d1a      	adds	r2, r3, #4
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	9203      	str	r2, [sp, #12]
 8008144:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008148:	9305      	str	r3, [sp, #20]
 800814a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008214 <_vfiprintf_r+0x220>
 800814e:	2203      	movs	r2, #3
 8008150:	4650      	mov	r0, sl
 8008152:	7821      	ldrb	r1, [r4, #0]
 8008154:	f7fd fb49 	bl	80057ea <memchr>
 8008158:	b138      	cbz	r0, 800816a <_vfiprintf_r+0x176>
 800815a:	2240      	movs	r2, #64	@ 0x40
 800815c:	9b04      	ldr	r3, [sp, #16]
 800815e:	eba0 000a 	sub.w	r0, r0, sl
 8008162:	4082      	lsls	r2, r0
 8008164:	4313      	orrs	r3, r2
 8008166:	3401      	adds	r4, #1
 8008168:	9304      	str	r3, [sp, #16]
 800816a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800816e:	2206      	movs	r2, #6
 8008170:	4829      	ldr	r0, [pc, #164]	@ (8008218 <_vfiprintf_r+0x224>)
 8008172:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008176:	f7fd fb38 	bl	80057ea <memchr>
 800817a:	2800      	cmp	r0, #0
 800817c:	d03f      	beq.n	80081fe <_vfiprintf_r+0x20a>
 800817e:	4b27      	ldr	r3, [pc, #156]	@ (800821c <_vfiprintf_r+0x228>)
 8008180:	bb1b      	cbnz	r3, 80081ca <_vfiprintf_r+0x1d6>
 8008182:	9b03      	ldr	r3, [sp, #12]
 8008184:	3307      	adds	r3, #7
 8008186:	f023 0307 	bic.w	r3, r3, #7
 800818a:	3308      	adds	r3, #8
 800818c:	9303      	str	r3, [sp, #12]
 800818e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008190:	443b      	add	r3, r7
 8008192:	9309      	str	r3, [sp, #36]	@ 0x24
 8008194:	e76a      	b.n	800806c <_vfiprintf_r+0x78>
 8008196:	460c      	mov	r4, r1
 8008198:	2001      	movs	r0, #1
 800819a:	fb0c 3202 	mla	r2, ip, r2, r3
 800819e:	e7a8      	b.n	80080f2 <_vfiprintf_r+0xfe>
 80081a0:	2300      	movs	r3, #0
 80081a2:	f04f 0c0a 	mov.w	ip, #10
 80081a6:	4619      	mov	r1, r3
 80081a8:	3401      	adds	r4, #1
 80081aa:	9305      	str	r3, [sp, #20]
 80081ac:	4620      	mov	r0, r4
 80081ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081b2:	3a30      	subs	r2, #48	@ 0x30
 80081b4:	2a09      	cmp	r2, #9
 80081b6:	d903      	bls.n	80081c0 <_vfiprintf_r+0x1cc>
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d0c6      	beq.n	800814a <_vfiprintf_r+0x156>
 80081bc:	9105      	str	r1, [sp, #20]
 80081be:	e7c4      	b.n	800814a <_vfiprintf_r+0x156>
 80081c0:	4604      	mov	r4, r0
 80081c2:	2301      	movs	r3, #1
 80081c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80081c8:	e7f0      	b.n	80081ac <_vfiprintf_r+0x1b8>
 80081ca:	ab03      	add	r3, sp, #12
 80081cc:	9300      	str	r3, [sp, #0]
 80081ce:	462a      	mov	r2, r5
 80081d0:	4630      	mov	r0, r6
 80081d2:	4b13      	ldr	r3, [pc, #76]	@ (8008220 <_vfiprintf_r+0x22c>)
 80081d4:	a904      	add	r1, sp, #16
 80081d6:	f7fc fb83 	bl	80048e0 <_printf_float>
 80081da:	4607      	mov	r7, r0
 80081dc:	1c78      	adds	r0, r7, #1
 80081de:	d1d6      	bne.n	800818e <_vfiprintf_r+0x19a>
 80081e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081e2:	07d9      	lsls	r1, r3, #31
 80081e4:	d405      	bmi.n	80081f2 <_vfiprintf_r+0x1fe>
 80081e6:	89ab      	ldrh	r3, [r5, #12]
 80081e8:	059a      	lsls	r2, r3, #22
 80081ea:	d402      	bmi.n	80081f2 <_vfiprintf_r+0x1fe>
 80081ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081ee:	f7fd fafb 	bl	80057e8 <__retarget_lock_release_recursive>
 80081f2:	89ab      	ldrh	r3, [r5, #12]
 80081f4:	065b      	lsls	r3, r3, #25
 80081f6:	f53f af1f 	bmi.w	8008038 <_vfiprintf_r+0x44>
 80081fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081fc:	e71e      	b.n	800803c <_vfiprintf_r+0x48>
 80081fe:	ab03      	add	r3, sp, #12
 8008200:	9300      	str	r3, [sp, #0]
 8008202:	462a      	mov	r2, r5
 8008204:	4630      	mov	r0, r6
 8008206:	4b06      	ldr	r3, [pc, #24]	@ (8008220 <_vfiprintf_r+0x22c>)
 8008208:	a904      	add	r1, sp, #16
 800820a:	f7fc fe07 	bl	8004e1c <_printf_i>
 800820e:	e7e4      	b.n	80081da <_vfiprintf_r+0x1e6>
 8008210:	08009251 	.word	0x08009251
 8008214:	08009257 	.word	0x08009257
 8008218:	0800925b 	.word	0x0800925b
 800821c:	080048e1 	.word	0x080048e1
 8008220:	08007fcf 	.word	0x08007fcf

08008224 <__sflush_r>:
 8008224:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800822a:	0716      	lsls	r6, r2, #28
 800822c:	4605      	mov	r5, r0
 800822e:	460c      	mov	r4, r1
 8008230:	d454      	bmi.n	80082dc <__sflush_r+0xb8>
 8008232:	684b      	ldr	r3, [r1, #4]
 8008234:	2b00      	cmp	r3, #0
 8008236:	dc02      	bgt.n	800823e <__sflush_r+0x1a>
 8008238:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800823a:	2b00      	cmp	r3, #0
 800823c:	dd48      	ble.n	80082d0 <__sflush_r+0xac>
 800823e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008240:	2e00      	cmp	r6, #0
 8008242:	d045      	beq.n	80082d0 <__sflush_r+0xac>
 8008244:	2300      	movs	r3, #0
 8008246:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800824a:	682f      	ldr	r7, [r5, #0]
 800824c:	6a21      	ldr	r1, [r4, #32]
 800824e:	602b      	str	r3, [r5, #0]
 8008250:	d030      	beq.n	80082b4 <__sflush_r+0x90>
 8008252:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008254:	89a3      	ldrh	r3, [r4, #12]
 8008256:	0759      	lsls	r1, r3, #29
 8008258:	d505      	bpl.n	8008266 <__sflush_r+0x42>
 800825a:	6863      	ldr	r3, [r4, #4]
 800825c:	1ad2      	subs	r2, r2, r3
 800825e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008260:	b10b      	cbz	r3, 8008266 <__sflush_r+0x42>
 8008262:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008264:	1ad2      	subs	r2, r2, r3
 8008266:	2300      	movs	r3, #0
 8008268:	4628      	mov	r0, r5
 800826a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800826c:	6a21      	ldr	r1, [r4, #32]
 800826e:	47b0      	blx	r6
 8008270:	1c43      	adds	r3, r0, #1
 8008272:	89a3      	ldrh	r3, [r4, #12]
 8008274:	d106      	bne.n	8008284 <__sflush_r+0x60>
 8008276:	6829      	ldr	r1, [r5, #0]
 8008278:	291d      	cmp	r1, #29
 800827a:	d82b      	bhi.n	80082d4 <__sflush_r+0xb0>
 800827c:	4a28      	ldr	r2, [pc, #160]	@ (8008320 <__sflush_r+0xfc>)
 800827e:	410a      	asrs	r2, r1
 8008280:	07d6      	lsls	r6, r2, #31
 8008282:	d427      	bmi.n	80082d4 <__sflush_r+0xb0>
 8008284:	2200      	movs	r2, #0
 8008286:	6062      	str	r2, [r4, #4]
 8008288:	6922      	ldr	r2, [r4, #16]
 800828a:	04d9      	lsls	r1, r3, #19
 800828c:	6022      	str	r2, [r4, #0]
 800828e:	d504      	bpl.n	800829a <__sflush_r+0x76>
 8008290:	1c42      	adds	r2, r0, #1
 8008292:	d101      	bne.n	8008298 <__sflush_r+0x74>
 8008294:	682b      	ldr	r3, [r5, #0]
 8008296:	b903      	cbnz	r3, 800829a <__sflush_r+0x76>
 8008298:	6560      	str	r0, [r4, #84]	@ 0x54
 800829a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800829c:	602f      	str	r7, [r5, #0]
 800829e:	b1b9      	cbz	r1, 80082d0 <__sflush_r+0xac>
 80082a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082a4:	4299      	cmp	r1, r3
 80082a6:	d002      	beq.n	80082ae <__sflush_r+0x8a>
 80082a8:	4628      	mov	r0, r5
 80082aa:	f7fe f901 	bl	80064b0 <_free_r>
 80082ae:	2300      	movs	r3, #0
 80082b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80082b2:	e00d      	b.n	80082d0 <__sflush_r+0xac>
 80082b4:	2301      	movs	r3, #1
 80082b6:	4628      	mov	r0, r5
 80082b8:	47b0      	blx	r6
 80082ba:	4602      	mov	r2, r0
 80082bc:	1c50      	adds	r0, r2, #1
 80082be:	d1c9      	bne.n	8008254 <__sflush_r+0x30>
 80082c0:	682b      	ldr	r3, [r5, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d0c6      	beq.n	8008254 <__sflush_r+0x30>
 80082c6:	2b1d      	cmp	r3, #29
 80082c8:	d001      	beq.n	80082ce <__sflush_r+0xaa>
 80082ca:	2b16      	cmp	r3, #22
 80082cc:	d11d      	bne.n	800830a <__sflush_r+0xe6>
 80082ce:	602f      	str	r7, [r5, #0]
 80082d0:	2000      	movs	r0, #0
 80082d2:	e021      	b.n	8008318 <__sflush_r+0xf4>
 80082d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082d8:	b21b      	sxth	r3, r3
 80082da:	e01a      	b.n	8008312 <__sflush_r+0xee>
 80082dc:	690f      	ldr	r7, [r1, #16]
 80082de:	2f00      	cmp	r7, #0
 80082e0:	d0f6      	beq.n	80082d0 <__sflush_r+0xac>
 80082e2:	0793      	lsls	r3, r2, #30
 80082e4:	bf18      	it	ne
 80082e6:	2300      	movne	r3, #0
 80082e8:	680e      	ldr	r6, [r1, #0]
 80082ea:	bf08      	it	eq
 80082ec:	694b      	ldreq	r3, [r1, #20]
 80082ee:	1bf6      	subs	r6, r6, r7
 80082f0:	600f      	str	r7, [r1, #0]
 80082f2:	608b      	str	r3, [r1, #8]
 80082f4:	2e00      	cmp	r6, #0
 80082f6:	ddeb      	ble.n	80082d0 <__sflush_r+0xac>
 80082f8:	4633      	mov	r3, r6
 80082fa:	463a      	mov	r2, r7
 80082fc:	4628      	mov	r0, r5
 80082fe:	6a21      	ldr	r1, [r4, #32]
 8008300:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008304:	47e0      	blx	ip
 8008306:	2800      	cmp	r0, #0
 8008308:	dc07      	bgt.n	800831a <__sflush_r+0xf6>
 800830a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800830e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008312:	f04f 30ff 	mov.w	r0, #4294967295
 8008316:	81a3      	strh	r3, [r4, #12]
 8008318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800831a:	4407      	add	r7, r0
 800831c:	1a36      	subs	r6, r6, r0
 800831e:	e7e9      	b.n	80082f4 <__sflush_r+0xd0>
 8008320:	dfbffffe 	.word	0xdfbffffe

08008324 <_fflush_r>:
 8008324:	b538      	push	{r3, r4, r5, lr}
 8008326:	690b      	ldr	r3, [r1, #16]
 8008328:	4605      	mov	r5, r0
 800832a:	460c      	mov	r4, r1
 800832c:	b913      	cbnz	r3, 8008334 <_fflush_r+0x10>
 800832e:	2500      	movs	r5, #0
 8008330:	4628      	mov	r0, r5
 8008332:	bd38      	pop	{r3, r4, r5, pc}
 8008334:	b118      	cbz	r0, 800833e <_fflush_r+0x1a>
 8008336:	6a03      	ldr	r3, [r0, #32]
 8008338:	b90b      	cbnz	r3, 800833e <_fflush_r+0x1a>
 800833a:	f7fd f92b 	bl	8005594 <__sinit>
 800833e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d0f3      	beq.n	800832e <_fflush_r+0xa>
 8008346:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008348:	07d0      	lsls	r0, r2, #31
 800834a:	d404      	bmi.n	8008356 <_fflush_r+0x32>
 800834c:	0599      	lsls	r1, r3, #22
 800834e:	d402      	bmi.n	8008356 <_fflush_r+0x32>
 8008350:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008352:	f7fd fa48 	bl	80057e6 <__retarget_lock_acquire_recursive>
 8008356:	4628      	mov	r0, r5
 8008358:	4621      	mov	r1, r4
 800835a:	f7ff ff63 	bl	8008224 <__sflush_r>
 800835e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008360:	4605      	mov	r5, r0
 8008362:	07da      	lsls	r2, r3, #31
 8008364:	d4e4      	bmi.n	8008330 <_fflush_r+0xc>
 8008366:	89a3      	ldrh	r3, [r4, #12]
 8008368:	059b      	lsls	r3, r3, #22
 800836a:	d4e1      	bmi.n	8008330 <_fflush_r+0xc>
 800836c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800836e:	f7fd fa3b 	bl	80057e8 <__retarget_lock_release_recursive>
 8008372:	e7dd      	b.n	8008330 <_fflush_r+0xc>

08008374 <__swbuf_r>:
 8008374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008376:	460e      	mov	r6, r1
 8008378:	4614      	mov	r4, r2
 800837a:	4605      	mov	r5, r0
 800837c:	b118      	cbz	r0, 8008386 <__swbuf_r+0x12>
 800837e:	6a03      	ldr	r3, [r0, #32]
 8008380:	b90b      	cbnz	r3, 8008386 <__swbuf_r+0x12>
 8008382:	f7fd f907 	bl	8005594 <__sinit>
 8008386:	69a3      	ldr	r3, [r4, #24]
 8008388:	60a3      	str	r3, [r4, #8]
 800838a:	89a3      	ldrh	r3, [r4, #12]
 800838c:	071a      	lsls	r2, r3, #28
 800838e:	d501      	bpl.n	8008394 <__swbuf_r+0x20>
 8008390:	6923      	ldr	r3, [r4, #16]
 8008392:	b943      	cbnz	r3, 80083a6 <__swbuf_r+0x32>
 8008394:	4621      	mov	r1, r4
 8008396:	4628      	mov	r0, r5
 8008398:	f000 f82a 	bl	80083f0 <__swsetup_r>
 800839c:	b118      	cbz	r0, 80083a6 <__swbuf_r+0x32>
 800839e:	f04f 37ff 	mov.w	r7, #4294967295
 80083a2:	4638      	mov	r0, r7
 80083a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083a6:	6823      	ldr	r3, [r4, #0]
 80083a8:	6922      	ldr	r2, [r4, #16]
 80083aa:	b2f6      	uxtb	r6, r6
 80083ac:	1a98      	subs	r0, r3, r2
 80083ae:	6963      	ldr	r3, [r4, #20]
 80083b0:	4637      	mov	r7, r6
 80083b2:	4283      	cmp	r3, r0
 80083b4:	dc05      	bgt.n	80083c2 <__swbuf_r+0x4e>
 80083b6:	4621      	mov	r1, r4
 80083b8:	4628      	mov	r0, r5
 80083ba:	f7ff ffb3 	bl	8008324 <_fflush_r>
 80083be:	2800      	cmp	r0, #0
 80083c0:	d1ed      	bne.n	800839e <__swbuf_r+0x2a>
 80083c2:	68a3      	ldr	r3, [r4, #8]
 80083c4:	3b01      	subs	r3, #1
 80083c6:	60a3      	str	r3, [r4, #8]
 80083c8:	6823      	ldr	r3, [r4, #0]
 80083ca:	1c5a      	adds	r2, r3, #1
 80083cc:	6022      	str	r2, [r4, #0]
 80083ce:	701e      	strb	r6, [r3, #0]
 80083d0:	6962      	ldr	r2, [r4, #20]
 80083d2:	1c43      	adds	r3, r0, #1
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d004      	beq.n	80083e2 <__swbuf_r+0x6e>
 80083d8:	89a3      	ldrh	r3, [r4, #12]
 80083da:	07db      	lsls	r3, r3, #31
 80083dc:	d5e1      	bpl.n	80083a2 <__swbuf_r+0x2e>
 80083de:	2e0a      	cmp	r6, #10
 80083e0:	d1df      	bne.n	80083a2 <__swbuf_r+0x2e>
 80083e2:	4621      	mov	r1, r4
 80083e4:	4628      	mov	r0, r5
 80083e6:	f7ff ff9d 	bl	8008324 <_fflush_r>
 80083ea:	2800      	cmp	r0, #0
 80083ec:	d0d9      	beq.n	80083a2 <__swbuf_r+0x2e>
 80083ee:	e7d6      	b.n	800839e <__swbuf_r+0x2a>

080083f0 <__swsetup_r>:
 80083f0:	b538      	push	{r3, r4, r5, lr}
 80083f2:	4b29      	ldr	r3, [pc, #164]	@ (8008498 <__swsetup_r+0xa8>)
 80083f4:	4605      	mov	r5, r0
 80083f6:	6818      	ldr	r0, [r3, #0]
 80083f8:	460c      	mov	r4, r1
 80083fa:	b118      	cbz	r0, 8008404 <__swsetup_r+0x14>
 80083fc:	6a03      	ldr	r3, [r0, #32]
 80083fe:	b90b      	cbnz	r3, 8008404 <__swsetup_r+0x14>
 8008400:	f7fd f8c8 	bl	8005594 <__sinit>
 8008404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008408:	0719      	lsls	r1, r3, #28
 800840a:	d422      	bmi.n	8008452 <__swsetup_r+0x62>
 800840c:	06da      	lsls	r2, r3, #27
 800840e:	d407      	bmi.n	8008420 <__swsetup_r+0x30>
 8008410:	2209      	movs	r2, #9
 8008412:	602a      	str	r2, [r5, #0]
 8008414:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008418:	f04f 30ff 	mov.w	r0, #4294967295
 800841c:	81a3      	strh	r3, [r4, #12]
 800841e:	e033      	b.n	8008488 <__swsetup_r+0x98>
 8008420:	0758      	lsls	r0, r3, #29
 8008422:	d512      	bpl.n	800844a <__swsetup_r+0x5a>
 8008424:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008426:	b141      	cbz	r1, 800843a <__swsetup_r+0x4a>
 8008428:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800842c:	4299      	cmp	r1, r3
 800842e:	d002      	beq.n	8008436 <__swsetup_r+0x46>
 8008430:	4628      	mov	r0, r5
 8008432:	f7fe f83d 	bl	80064b0 <_free_r>
 8008436:	2300      	movs	r3, #0
 8008438:	6363      	str	r3, [r4, #52]	@ 0x34
 800843a:	89a3      	ldrh	r3, [r4, #12]
 800843c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008440:	81a3      	strh	r3, [r4, #12]
 8008442:	2300      	movs	r3, #0
 8008444:	6063      	str	r3, [r4, #4]
 8008446:	6923      	ldr	r3, [r4, #16]
 8008448:	6023      	str	r3, [r4, #0]
 800844a:	89a3      	ldrh	r3, [r4, #12]
 800844c:	f043 0308 	orr.w	r3, r3, #8
 8008450:	81a3      	strh	r3, [r4, #12]
 8008452:	6923      	ldr	r3, [r4, #16]
 8008454:	b94b      	cbnz	r3, 800846a <__swsetup_r+0x7a>
 8008456:	89a3      	ldrh	r3, [r4, #12]
 8008458:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800845c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008460:	d003      	beq.n	800846a <__swsetup_r+0x7a>
 8008462:	4621      	mov	r1, r4
 8008464:	4628      	mov	r0, r5
 8008466:	f000 fc58 	bl	8008d1a <__smakebuf_r>
 800846a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800846e:	f013 0201 	ands.w	r2, r3, #1
 8008472:	d00a      	beq.n	800848a <__swsetup_r+0x9a>
 8008474:	2200      	movs	r2, #0
 8008476:	60a2      	str	r2, [r4, #8]
 8008478:	6962      	ldr	r2, [r4, #20]
 800847a:	4252      	negs	r2, r2
 800847c:	61a2      	str	r2, [r4, #24]
 800847e:	6922      	ldr	r2, [r4, #16]
 8008480:	b942      	cbnz	r2, 8008494 <__swsetup_r+0xa4>
 8008482:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008486:	d1c5      	bne.n	8008414 <__swsetup_r+0x24>
 8008488:	bd38      	pop	{r3, r4, r5, pc}
 800848a:	0799      	lsls	r1, r3, #30
 800848c:	bf58      	it	pl
 800848e:	6962      	ldrpl	r2, [r4, #20]
 8008490:	60a2      	str	r2, [r4, #8]
 8008492:	e7f4      	b.n	800847e <__swsetup_r+0x8e>
 8008494:	2000      	movs	r0, #0
 8008496:	e7f7      	b.n	8008488 <__swsetup_r+0x98>
 8008498:	2000002c 	.word	0x2000002c

0800849c <memmove>:
 800849c:	4288      	cmp	r0, r1
 800849e:	b510      	push	{r4, lr}
 80084a0:	eb01 0402 	add.w	r4, r1, r2
 80084a4:	d902      	bls.n	80084ac <memmove+0x10>
 80084a6:	4284      	cmp	r4, r0
 80084a8:	4623      	mov	r3, r4
 80084aa:	d807      	bhi.n	80084bc <memmove+0x20>
 80084ac:	1e43      	subs	r3, r0, #1
 80084ae:	42a1      	cmp	r1, r4
 80084b0:	d008      	beq.n	80084c4 <memmove+0x28>
 80084b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084ba:	e7f8      	b.n	80084ae <memmove+0x12>
 80084bc:	4601      	mov	r1, r0
 80084be:	4402      	add	r2, r0
 80084c0:	428a      	cmp	r2, r1
 80084c2:	d100      	bne.n	80084c6 <memmove+0x2a>
 80084c4:	bd10      	pop	{r4, pc}
 80084c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80084ce:	e7f7      	b.n	80084c0 <memmove+0x24>

080084d0 <strncmp>:
 80084d0:	b510      	push	{r4, lr}
 80084d2:	b16a      	cbz	r2, 80084f0 <strncmp+0x20>
 80084d4:	3901      	subs	r1, #1
 80084d6:	1884      	adds	r4, r0, r2
 80084d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d103      	bne.n	80084ec <strncmp+0x1c>
 80084e4:	42a0      	cmp	r0, r4
 80084e6:	d001      	beq.n	80084ec <strncmp+0x1c>
 80084e8:	2a00      	cmp	r2, #0
 80084ea:	d1f5      	bne.n	80084d8 <strncmp+0x8>
 80084ec:	1ad0      	subs	r0, r2, r3
 80084ee:	bd10      	pop	{r4, pc}
 80084f0:	4610      	mov	r0, r2
 80084f2:	e7fc      	b.n	80084ee <strncmp+0x1e>

080084f4 <_sbrk_r>:
 80084f4:	b538      	push	{r3, r4, r5, lr}
 80084f6:	2300      	movs	r3, #0
 80084f8:	4d05      	ldr	r5, [pc, #20]	@ (8008510 <_sbrk_r+0x1c>)
 80084fa:	4604      	mov	r4, r0
 80084fc:	4608      	mov	r0, r1
 80084fe:	602b      	str	r3, [r5, #0]
 8008500:	f7f9 fa12 	bl	8001928 <_sbrk>
 8008504:	1c43      	adds	r3, r0, #1
 8008506:	d102      	bne.n	800850e <_sbrk_r+0x1a>
 8008508:	682b      	ldr	r3, [r5, #0]
 800850a:	b103      	cbz	r3, 800850e <_sbrk_r+0x1a>
 800850c:	6023      	str	r3, [r4, #0]
 800850e:	bd38      	pop	{r3, r4, r5, pc}
 8008510:	20000488 	.word	0x20000488

08008514 <memcpy>:
 8008514:	440a      	add	r2, r1
 8008516:	4291      	cmp	r1, r2
 8008518:	f100 33ff 	add.w	r3, r0, #4294967295
 800851c:	d100      	bne.n	8008520 <memcpy+0xc>
 800851e:	4770      	bx	lr
 8008520:	b510      	push	{r4, lr}
 8008522:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008526:	4291      	cmp	r1, r2
 8008528:	f803 4f01 	strb.w	r4, [r3, #1]!
 800852c:	d1f9      	bne.n	8008522 <memcpy+0xe>
 800852e:	bd10      	pop	{r4, pc}

08008530 <nan>:
 8008530:	2000      	movs	r0, #0
 8008532:	4901      	ldr	r1, [pc, #4]	@ (8008538 <nan+0x8>)
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop
 8008538:	7ff80000 	.word	0x7ff80000

0800853c <__assert_func>:
 800853c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800853e:	4614      	mov	r4, r2
 8008540:	461a      	mov	r2, r3
 8008542:	4b09      	ldr	r3, [pc, #36]	@ (8008568 <__assert_func+0x2c>)
 8008544:	4605      	mov	r5, r0
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	68d8      	ldr	r0, [r3, #12]
 800854a:	b954      	cbnz	r4, 8008562 <__assert_func+0x26>
 800854c:	4b07      	ldr	r3, [pc, #28]	@ (800856c <__assert_func+0x30>)
 800854e:	461c      	mov	r4, r3
 8008550:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008554:	9100      	str	r1, [sp, #0]
 8008556:	462b      	mov	r3, r5
 8008558:	4905      	ldr	r1, [pc, #20]	@ (8008570 <__assert_func+0x34>)
 800855a:	f000 fba7 	bl	8008cac <fiprintf>
 800855e:	f000 fc3b 	bl	8008dd8 <abort>
 8008562:	4b04      	ldr	r3, [pc, #16]	@ (8008574 <__assert_func+0x38>)
 8008564:	e7f4      	b.n	8008550 <__assert_func+0x14>
 8008566:	bf00      	nop
 8008568:	2000002c 	.word	0x2000002c
 800856c:	080092a5 	.word	0x080092a5
 8008570:	08009277 	.word	0x08009277
 8008574:	0800926a 	.word	0x0800926a

08008578 <_calloc_r>:
 8008578:	b570      	push	{r4, r5, r6, lr}
 800857a:	fba1 5402 	umull	r5, r4, r1, r2
 800857e:	b93c      	cbnz	r4, 8008590 <_calloc_r+0x18>
 8008580:	4629      	mov	r1, r5
 8008582:	f7fe f807 	bl	8006594 <_malloc_r>
 8008586:	4606      	mov	r6, r0
 8008588:	b928      	cbnz	r0, 8008596 <_calloc_r+0x1e>
 800858a:	2600      	movs	r6, #0
 800858c:	4630      	mov	r0, r6
 800858e:	bd70      	pop	{r4, r5, r6, pc}
 8008590:	220c      	movs	r2, #12
 8008592:	6002      	str	r2, [r0, #0]
 8008594:	e7f9      	b.n	800858a <_calloc_r+0x12>
 8008596:	462a      	mov	r2, r5
 8008598:	4621      	mov	r1, r4
 800859a:	f7fd f8a6 	bl	80056ea <memset>
 800859e:	e7f5      	b.n	800858c <_calloc_r+0x14>

080085a0 <rshift>:
 80085a0:	6903      	ldr	r3, [r0, #16]
 80085a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80085a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80085aa:	f100 0414 	add.w	r4, r0, #20
 80085ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 80085b2:	dd46      	ble.n	8008642 <rshift+0xa2>
 80085b4:	f011 011f 	ands.w	r1, r1, #31
 80085b8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80085bc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80085c0:	d10c      	bne.n	80085dc <rshift+0x3c>
 80085c2:	4629      	mov	r1, r5
 80085c4:	f100 0710 	add.w	r7, r0, #16
 80085c8:	42b1      	cmp	r1, r6
 80085ca:	d335      	bcc.n	8008638 <rshift+0x98>
 80085cc:	1a9b      	subs	r3, r3, r2
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	1eea      	subs	r2, r5, #3
 80085d2:	4296      	cmp	r6, r2
 80085d4:	bf38      	it	cc
 80085d6:	2300      	movcc	r3, #0
 80085d8:	4423      	add	r3, r4
 80085da:	e015      	b.n	8008608 <rshift+0x68>
 80085dc:	46a1      	mov	r9, r4
 80085de:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80085e2:	f1c1 0820 	rsb	r8, r1, #32
 80085e6:	40cf      	lsrs	r7, r1
 80085e8:	f105 0e04 	add.w	lr, r5, #4
 80085ec:	4576      	cmp	r6, lr
 80085ee:	46f4      	mov	ip, lr
 80085f0:	d816      	bhi.n	8008620 <rshift+0x80>
 80085f2:	1a9a      	subs	r2, r3, r2
 80085f4:	0092      	lsls	r2, r2, #2
 80085f6:	3a04      	subs	r2, #4
 80085f8:	3501      	adds	r5, #1
 80085fa:	42ae      	cmp	r6, r5
 80085fc:	bf38      	it	cc
 80085fe:	2200      	movcc	r2, #0
 8008600:	18a3      	adds	r3, r4, r2
 8008602:	50a7      	str	r7, [r4, r2]
 8008604:	b107      	cbz	r7, 8008608 <rshift+0x68>
 8008606:	3304      	adds	r3, #4
 8008608:	42a3      	cmp	r3, r4
 800860a:	eba3 0204 	sub.w	r2, r3, r4
 800860e:	bf08      	it	eq
 8008610:	2300      	moveq	r3, #0
 8008612:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008616:	6102      	str	r2, [r0, #16]
 8008618:	bf08      	it	eq
 800861a:	6143      	streq	r3, [r0, #20]
 800861c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008620:	f8dc c000 	ldr.w	ip, [ip]
 8008624:	fa0c fc08 	lsl.w	ip, ip, r8
 8008628:	ea4c 0707 	orr.w	r7, ip, r7
 800862c:	f849 7b04 	str.w	r7, [r9], #4
 8008630:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008634:	40cf      	lsrs	r7, r1
 8008636:	e7d9      	b.n	80085ec <rshift+0x4c>
 8008638:	f851 cb04 	ldr.w	ip, [r1], #4
 800863c:	f847 cf04 	str.w	ip, [r7, #4]!
 8008640:	e7c2      	b.n	80085c8 <rshift+0x28>
 8008642:	4623      	mov	r3, r4
 8008644:	e7e0      	b.n	8008608 <rshift+0x68>

08008646 <__hexdig_fun>:
 8008646:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800864a:	2b09      	cmp	r3, #9
 800864c:	d802      	bhi.n	8008654 <__hexdig_fun+0xe>
 800864e:	3820      	subs	r0, #32
 8008650:	b2c0      	uxtb	r0, r0
 8008652:	4770      	bx	lr
 8008654:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008658:	2b05      	cmp	r3, #5
 800865a:	d801      	bhi.n	8008660 <__hexdig_fun+0x1a>
 800865c:	3847      	subs	r0, #71	@ 0x47
 800865e:	e7f7      	b.n	8008650 <__hexdig_fun+0xa>
 8008660:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008664:	2b05      	cmp	r3, #5
 8008666:	d801      	bhi.n	800866c <__hexdig_fun+0x26>
 8008668:	3827      	subs	r0, #39	@ 0x27
 800866a:	e7f1      	b.n	8008650 <__hexdig_fun+0xa>
 800866c:	2000      	movs	r0, #0
 800866e:	4770      	bx	lr

08008670 <__gethex>:
 8008670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008674:	468a      	mov	sl, r1
 8008676:	4690      	mov	r8, r2
 8008678:	b085      	sub	sp, #20
 800867a:	9302      	str	r3, [sp, #8]
 800867c:	680b      	ldr	r3, [r1, #0]
 800867e:	9001      	str	r0, [sp, #4]
 8008680:	1c9c      	adds	r4, r3, #2
 8008682:	46a1      	mov	r9, r4
 8008684:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008688:	2830      	cmp	r0, #48	@ 0x30
 800868a:	d0fa      	beq.n	8008682 <__gethex+0x12>
 800868c:	eba9 0303 	sub.w	r3, r9, r3
 8008690:	f1a3 0b02 	sub.w	fp, r3, #2
 8008694:	f7ff ffd7 	bl	8008646 <__hexdig_fun>
 8008698:	4605      	mov	r5, r0
 800869a:	2800      	cmp	r0, #0
 800869c:	d168      	bne.n	8008770 <__gethex+0x100>
 800869e:	2201      	movs	r2, #1
 80086a0:	4648      	mov	r0, r9
 80086a2:	499f      	ldr	r1, [pc, #636]	@ (8008920 <__gethex+0x2b0>)
 80086a4:	f7ff ff14 	bl	80084d0 <strncmp>
 80086a8:	4607      	mov	r7, r0
 80086aa:	2800      	cmp	r0, #0
 80086ac:	d167      	bne.n	800877e <__gethex+0x10e>
 80086ae:	f899 0001 	ldrb.w	r0, [r9, #1]
 80086b2:	4626      	mov	r6, r4
 80086b4:	f7ff ffc7 	bl	8008646 <__hexdig_fun>
 80086b8:	2800      	cmp	r0, #0
 80086ba:	d062      	beq.n	8008782 <__gethex+0x112>
 80086bc:	4623      	mov	r3, r4
 80086be:	7818      	ldrb	r0, [r3, #0]
 80086c0:	4699      	mov	r9, r3
 80086c2:	2830      	cmp	r0, #48	@ 0x30
 80086c4:	f103 0301 	add.w	r3, r3, #1
 80086c8:	d0f9      	beq.n	80086be <__gethex+0x4e>
 80086ca:	f7ff ffbc 	bl	8008646 <__hexdig_fun>
 80086ce:	fab0 f580 	clz	r5, r0
 80086d2:	f04f 0b01 	mov.w	fp, #1
 80086d6:	096d      	lsrs	r5, r5, #5
 80086d8:	464a      	mov	r2, r9
 80086da:	4616      	mov	r6, r2
 80086dc:	7830      	ldrb	r0, [r6, #0]
 80086de:	3201      	adds	r2, #1
 80086e0:	f7ff ffb1 	bl	8008646 <__hexdig_fun>
 80086e4:	2800      	cmp	r0, #0
 80086e6:	d1f8      	bne.n	80086da <__gethex+0x6a>
 80086e8:	2201      	movs	r2, #1
 80086ea:	4630      	mov	r0, r6
 80086ec:	498c      	ldr	r1, [pc, #560]	@ (8008920 <__gethex+0x2b0>)
 80086ee:	f7ff feef 	bl	80084d0 <strncmp>
 80086f2:	2800      	cmp	r0, #0
 80086f4:	d13f      	bne.n	8008776 <__gethex+0x106>
 80086f6:	b944      	cbnz	r4, 800870a <__gethex+0x9a>
 80086f8:	1c74      	adds	r4, r6, #1
 80086fa:	4622      	mov	r2, r4
 80086fc:	4616      	mov	r6, r2
 80086fe:	7830      	ldrb	r0, [r6, #0]
 8008700:	3201      	adds	r2, #1
 8008702:	f7ff ffa0 	bl	8008646 <__hexdig_fun>
 8008706:	2800      	cmp	r0, #0
 8008708:	d1f8      	bne.n	80086fc <__gethex+0x8c>
 800870a:	1ba4      	subs	r4, r4, r6
 800870c:	00a7      	lsls	r7, r4, #2
 800870e:	7833      	ldrb	r3, [r6, #0]
 8008710:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008714:	2b50      	cmp	r3, #80	@ 0x50
 8008716:	d13e      	bne.n	8008796 <__gethex+0x126>
 8008718:	7873      	ldrb	r3, [r6, #1]
 800871a:	2b2b      	cmp	r3, #43	@ 0x2b
 800871c:	d033      	beq.n	8008786 <__gethex+0x116>
 800871e:	2b2d      	cmp	r3, #45	@ 0x2d
 8008720:	d034      	beq.n	800878c <__gethex+0x11c>
 8008722:	2400      	movs	r4, #0
 8008724:	1c71      	adds	r1, r6, #1
 8008726:	7808      	ldrb	r0, [r1, #0]
 8008728:	f7ff ff8d 	bl	8008646 <__hexdig_fun>
 800872c:	1e43      	subs	r3, r0, #1
 800872e:	b2db      	uxtb	r3, r3
 8008730:	2b18      	cmp	r3, #24
 8008732:	d830      	bhi.n	8008796 <__gethex+0x126>
 8008734:	f1a0 0210 	sub.w	r2, r0, #16
 8008738:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800873c:	f7ff ff83 	bl	8008646 <__hexdig_fun>
 8008740:	f100 3cff 	add.w	ip, r0, #4294967295
 8008744:	fa5f fc8c 	uxtb.w	ip, ip
 8008748:	f1bc 0f18 	cmp.w	ip, #24
 800874c:	f04f 030a 	mov.w	r3, #10
 8008750:	d91e      	bls.n	8008790 <__gethex+0x120>
 8008752:	b104      	cbz	r4, 8008756 <__gethex+0xe6>
 8008754:	4252      	negs	r2, r2
 8008756:	4417      	add	r7, r2
 8008758:	f8ca 1000 	str.w	r1, [sl]
 800875c:	b1ed      	cbz	r5, 800879a <__gethex+0x12a>
 800875e:	f1bb 0f00 	cmp.w	fp, #0
 8008762:	bf0c      	ite	eq
 8008764:	2506      	moveq	r5, #6
 8008766:	2500      	movne	r5, #0
 8008768:	4628      	mov	r0, r5
 800876a:	b005      	add	sp, #20
 800876c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008770:	2500      	movs	r5, #0
 8008772:	462c      	mov	r4, r5
 8008774:	e7b0      	b.n	80086d8 <__gethex+0x68>
 8008776:	2c00      	cmp	r4, #0
 8008778:	d1c7      	bne.n	800870a <__gethex+0x9a>
 800877a:	4627      	mov	r7, r4
 800877c:	e7c7      	b.n	800870e <__gethex+0x9e>
 800877e:	464e      	mov	r6, r9
 8008780:	462f      	mov	r7, r5
 8008782:	2501      	movs	r5, #1
 8008784:	e7c3      	b.n	800870e <__gethex+0x9e>
 8008786:	2400      	movs	r4, #0
 8008788:	1cb1      	adds	r1, r6, #2
 800878a:	e7cc      	b.n	8008726 <__gethex+0xb6>
 800878c:	2401      	movs	r4, #1
 800878e:	e7fb      	b.n	8008788 <__gethex+0x118>
 8008790:	fb03 0002 	mla	r0, r3, r2, r0
 8008794:	e7ce      	b.n	8008734 <__gethex+0xc4>
 8008796:	4631      	mov	r1, r6
 8008798:	e7de      	b.n	8008758 <__gethex+0xe8>
 800879a:	4629      	mov	r1, r5
 800879c:	eba6 0309 	sub.w	r3, r6, r9
 80087a0:	3b01      	subs	r3, #1
 80087a2:	2b07      	cmp	r3, #7
 80087a4:	dc0a      	bgt.n	80087bc <__gethex+0x14c>
 80087a6:	9801      	ldr	r0, [sp, #4]
 80087a8:	f7fd ff80 	bl	80066ac <_Balloc>
 80087ac:	4604      	mov	r4, r0
 80087ae:	b940      	cbnz	r0, 80087c2 <__gethex+0x152>
 80087b0:	4602      	mov	r2, r0
 80087b2:	21e4      	movs	r1, #228	@ 0xe4
 80087b4:	4b5b      	ldr	r3, [pc, #364]	@ (8008924 <__gethex+0x2b4>)
 80087b6:	485c      	ldr	r0, [pc, #368]	@ (8008928 <__gethex+0x2b8>)
 80087b8:	f7ff fec0 	bl	800853c <__assert_func>
 80087bc:	3101      	adds	r1, #1
 80087be:	105b      	asrs	r3, r3, #1
 80087c0:	e7ef      	b.n	80087a2 <__gethex+0x132>
 80087c2:	2300      	movs	r3, #0
 80087c4:	f100 0a14 	add.w	sl, r0, #20
 80087c8:	4655      	mov	r5, sl
 80087ca:	469b      	mov	fp, r3
 80087cc:	45b1      	cmp	r9, r6
 80087ce:	d337      	bcc.n	8008840 <__gethex+0x1d0>
 80087d0:	f845 bb04 	str.w	fp, [r5], #4
 80087d4:	eba5 050a 	sub.w	r5, r5, sl
 80087d8:	10ad      	asrs	r5, r5, #2
 80087da:	6125      	str	r5, [r4, #16]
 80087dc:	4658      	mov	r0, fp
 80087de:	f7fe f857 	bl	8006890 <__hi0bits>
 80087e2:	016d      	lsls	r5, r5, #5
 80087e4:	f8d8 6000 	ldr.w	r6, [r8]
 80087e8:	1a2d      	subs	r5, r5, r0
 80087ea:	42b5      	cmp	r5, r6
 80087ec:	dd54      	ble.n	8008898 <__gethex+0x228>
 80087ee:	1bad      	subs	r5, r5, r6
 80087f0:	4629      	mov	r1, r5
 80087f2:	4620      	mov	r0, r4
 80087f4:	f7fe fbdf 	bl	8006fb6 <__any_on>
 80087f8:	4681      	mov	r9, r0
 80087fa:	b178      	cbz	r0, 800881c <__gethex+0x1ac>
 80087fc:	f04f 0901 	mov.w	r9, #1
 8008800:	1e6b      	subs	r3, r5, #1
 8008802:	1159      	asrs	r1, r3, #5
 8008804:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008808:	f003 021f 	and.w	r2, r3, #31
 800880c:	fa09 f202 	lsl.w	r2, r9, r2
 8008810:	420a      	tst	r2, r1
 8008812:	d003      	beq.n	800881c <__gethex+0x1ac>
 8008814:	454b      	cmp	r3, r9
 8008816:	dc36      	bgt.n	8008886 <__gethex+0x216>
 8008818:	f04f 0902 	mov.w	r9, #2
 800881c:	4629      	mov	r1, r5
 800881e:	4620      	mov	r0, r4
 8008820:	f7ff febe 	bl	80085a0 <rshift>
 8008824:	442f      	add	r7, r5
 8008826:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800882a:	42bb      	cmp	r3, r7
 800882c:	da42      	bge.n	80088b4 <__gethex+0x244>
 800882e:	4621      	mov	r1, r4
 8008830:	9801      	ldr	r0, [sp, #4]
 8008832:	f7fd ff7b 	bl	800672c <_Bfree>
 8008836:	2300      	movs	r3, #0
 8008838:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800883a:	25a3      	movs	r5, #163	@ 0xa3
 800883c:	6013      	str	r3, [r2, #0]
 800883e:	e793      	b.n	8008768 <__gethex+0xf8>
 8008840:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008844:	2a2e      	cmp	r2, #46	@ 0x2e
 8008846:	d012      	beq.n	800886e <__gethex+0x1fe>
 8008848:	2b20      	cmp	r3, #32
 800884a:	d104      	bne.n	8008856 <__gethex+0x1e6>
 800884c:	f845 bb04 	str.w	fp, [r5], #4
 8008850:	f04f 0b00 	mov.w	fp, #0
 8008854:	465b      	mov	r3, fp
 8008856:	7830      	ldrb	r0, [r6, #0]
 8008858:	9303      	str	r3, [sp, #12]
 800885a:	f7ff fef4 	bl	8008646 <__hexdig_fun>
 800885e:	9b03      	ldr	r3, [sp, #12]
 8008860:	f000 000f 	and.w	r0, r0, #15
 8008864:	4098      	lsls	r0, r3
 8008866:	ea4b 0b00 	orr.w	fp, fp, r0
 800886a:	3304      	adds	r3, #4
 800886c:	e7ae      	b.n	80087cc <__gethex+0x15c>
 800886e:	45b1      	cmp	r9, r6
 8008870:	d8ea      	bhi.n	8008848 <__gethex+0x1d8>
 8008872:	2201      	movs	r2, #1
 8008874:	4630      	mov	r0, r6
 8008876:	492a      	ldr	r1, [pc, #168]	@ (8008920 <__gethex+0x2b0>)
 8008878:	9303      	str	r3, [sp, #12]
 800887a:	f7ff fe29 	bl	80084d0 <strncmp>
 800887e:	9b03      	ldr	r3, [sp, #12]
 8008880:	2800      	cmp	r0, #0
 8008882:	d1e1      	bne.n	8008848 <__gethex+0x1d8>
 8008884:	e7a2      	b.n	80087cc <__gethex+0x15c>
 8008886:	4620      	mov	r0, r4
 8008888:	1ea9      	subs	r1, r5, #2
 800888a:	f7fe fb94 	bl	8006fb6 <__any_on>
 800888e:	2800      	cmp	r0, #0
 8008890:	d0c2      	beq.n	8008818 <__gethex+0x1a8>
 8008892:	f04f 0903 	mov.w	r9, #3
 8008896:	e7c1      	b.n	800881c <__gethex+0x1ac>
 8008898:	da09      	bge.n	80088ae <__gethex+0x23e>
 800889a:	1b75      	subs	r5, r6, r5
 800889c:	4621      	mov	r1, r4
 800889e:	462a      	mov	r2, r5
 80088a0:	9801      	ldr	r0, [sp, #4]
 80088a2:	f7fe f959 	bl	8006b58 <__lshift>
 80088a6:	4604      	mov	r4, r0
 80088a8:	1b7f      	subs	r7, r7, r5
 80088aa:	f100 0a14 	add.w	sl, r0, #20
 80088ae:	f04f 0900 	mov.w	r9, #0
 80088b2:	e7b8      	b.n	8008826 <__gethex+0x1b6>
 80088b4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80088b8:	42bd      	cmp	r5, r7
 80088ba:	dd6f      	ble.n	800899c <__gethex+0x32c>
 80088bc:	1bed      	subs	r5, r5, r7
 80088be:	42ae      	cmp	r6, r5
 80088c0:	dc34      	bgt.n	800892c <__gethex+0x2bc>
 80088c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80088c6:	2b02      	cmp	r3, #2
 80088c8:	d022      	beq.n	8008910 <__gethex+0x2a0>
 80088ca:	2b03      	cmp	r3, #3
 80088cc:	d024      	beq.n	8008918 <__gethex+0x2a8>
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d115      	bne.n	80088fe <__gethex+0x28e>
 80088d2:	42ae      	cmp	r6, r5
 80088d4:	d113      	bne.n	80088fe <__gethex+0x28e>
 80088d6:	2e01      	cmp	r6, #1
 80088d8:	d10b      	bne.n	80088f2 <__gethex+0x282>
 80088da:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80088de:	9a02      	ldr	r2, [sp, #8]
 80088e0:	2562      	movs	r5, #98	@ 0x62
 80088e2:	6013      	str	r3, [r2, #0]
 80088e4:	2301      	movs	r3, #1
 80088e6:	6123      	str	r3, [r4, #16]
 80088e8:	f8ca 3000 	str.w	r3, [sl]
 80088ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088ee:	601c      	str	r4, [r3, #0]
 80088f0:	e73a      	b.n	8008768 <__gethex+0xf8>
 80088f2:	4620      	mov	r0, r4
 80088f4:	1e71      	subs	r1, r6, #1
 80088f6:	f7fe fb5e 	bl	8006fb6 <__any_on>
 80088fa:	2800      	cmp	r0, #0
 80088fc:	d1ed      	bne.n	80088da <__gethex+0x26a>
 80088fe:	4621      	mov	r1, r4
 8008900:	9801      	ldr	r0, [sp, #4]
 8008902:	f7fd ff13 	bl	800672c <_Bfree>
 8008906:	2300      	movs	r3, #0
 8008908:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800890a:	2550      	movs	r5, #80	@ 0x50
 800890c:	6013      	str	r3, [r2, #0]
 800890e:	e72b      	b.n	8008768 <__gethex+0xf8>
 8008910:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008912:	2b00      	cmp	r3, #0
 8008914:	d1f3      	bne.n	80088fe <__gethex+0x28e>
 8008916:	e7e0      	b.n	80088da <__gethex+0x26a>
 8008918:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1dd      	bne.n	80088da <__gethex+0x26a>
 800891e:	e7ee      	b.n	80088fe <__gethex+0x28e>
 8008920:	080090f8 	.word	0x080090f8
 8008924:	08008f8b 	.word	0x08008f8b
 8008928:	080092a6 	.word	0x080092a6
 800892c:	1e6f      	subs	r7, r5, #1
 800892e:	f1b9 0f00 	cmp.w	r9, #0
 8008932:	d130      	bne.n	8008996 <__gethex+0x326>
 8008934:	b127      	cbz	r7, 8008940 <__gethex+0x2d0>
 8008936:	4639      	mov	r1, r7
 8008938:	4620      	mov	r0, r4
 800893a:	f7fe fb3c 	bl	8006fb6 <__any_on>
 800893e:	4681      	mov	r9, r0
 8008940:	2301      	movs	r3, #1
 8008942:	4629      	mov	r1, r5
 8008944:	1b76      	subs	r6, r6, r5
 8008946:	2502      	movs	r5, #2
 8008948:	117a      	asrs	r2, r7, #5
 800894a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800894e:	f007 071f 	and.w	r7, r7, #31
 8008952:	40bb      	lsls	r3, r7
 8008954:	4213      	tst	r3, r2
 8008956:	4620      	mov	r0, r4
 8008958:	bf18      	it	ne
 800895a:	f049 0902 	orrne.w	r9, r9, #2
 800895e:	f7ff fe1f 	bl	80085a0 <rshift>
 8008962:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008966:	f1b9 0f00 	cmp.w	r9, #0
 800896a:	d047      	beq.n	80089fc <__gethex+0x38c>
 800896c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008970:	2b02      	cmp	r3, #2
 8008972:	d015      	beq.n	80089a0 <__gethex+0x330>
 8008974:	2b03      	cmp	r3, #3
 8008976:	d017      	beq.n	80089a8 <__gethex+0x338>
 8008978:	2b01      	cmp	r3, #1
 800897a:	d109      	bne.n	8008990 <__gethex+0x320>
 800897c:	f019 0f02 	tst.w	r9, #2
 8008980:	d006      	beq.n	8008990 <__gethex+0x320>
 8008982:	f8da 3000 	ldr.w	r3, [sl]
 8008986:	ea49 0903 	orr.w	r9, r9, r3
 800898a:	f019 0f01 	tst.w	r9, #1
 800898e:	d10e      	bne.n	80089ae <__gethex+0x33e>
 8008990:	f045 0510 	orr.w	r5, r5, #16
 8008994:	e032      	b.n	80089fc <__gethex+0x38c>
 8008996:	f04f 0901 	mov.w	r9, #1
 800899a:	e7d1      	b.n	8008940 <__gethex+0x2d0>
 800899c:	2501      	movs	r5, #1
 800899e:	e7e2      	b.n	8008966 <__gethex+0x2f6>
 80089a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089a2:	f1c3 0301 	rsb	r3, r3, #1
 80089a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80089a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d0f0      	beq.n	8008990 <__gethex+0x320>
 80089ae:	f04f 0c00 	mov.w	ip, #0
 80089b2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80089b6:	f104 0314 	add.w	r3, r4, #20
 80089ba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80089be:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80089c2:	4618      	mov	r0, r3
 80089c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80089c8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80089cc:	d01b      	beq.n	8008a06 <__gethex+0x396>
 80089ce:	3201      	adds	r2, #1
 80089d0:	6002      	str	r2, [r0, #0]
 80089d2:	2d02      	cmp	r5, #2
 80089d4:	f104 0314 	add.w	r3, r4, #20
 80089d8:	d13c      	bne.n	8008a54 <__gethex+0x3e4>
 80089da:	f8d8 2000 	ldr.w	r2, [r8]
 80089de:	3a01      	subs	r2, #1
 80089e0:	42b2      	cmp	r2, r6
 80089e2:	d109      	bne.n	80089f8 <__gethex+0x388>
 80089e4:	2201      	movs	r2, #1
 80089e6:	1171      	asrs	r1, r6, #5
 80089e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80089ec:	f006 061f 	and.w	r6, r6, #31
 80089f0:	fa02 f606 	lsl.w	r6, r2, r6
 80089f4:	421e      	tst	r6, r3
 80089f6:	d13a      	bne.n	8008a6e <__gethex+0x3fe>
 80089f8:	f045 0520 	orr.w	r5, r5, #32
 80089fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089fe:	601c      	str	r4, [r3, #0]
 8008a00:	9b02      	ldr	r3, [sp, #8]
 8008a02:	601f      	str	r7, [r3, #0]
 8008a04:	e6b0      	b.n	8008768 <__gethex+0xf8>
 8008a06:	4299      	cmp	r1, r3
 8008a08:	f843 cc04 	str.w	ip, [r3, #-4]
 8008a0c:	d8d9      	bhi.n	80089c2 <__gethex+0x352>
 8008a0e:	68a3      	ldr	r3, [r4, #8]
 8008a10:	459b      	cmp	fp, r3
 8008a12:	db17      	blt.n	8008a44 <__gethex+0x3d4>
 8008a14:	6861      	ldr	r1, [r4, #4]
 8008a16:	9801      	ldr	r0, [sp, #4]
 8008a18:	3101      	adds	r1, #1
 8008a1a:	f7fd fe47 	bl	80066ac <_Balloc>
 8008a1e:	4681      	mov	r9, r0
 8008a20:	b918      	cbnz	r0, 8008a2a <__gethex+0x3ba>
 8008a22:	4602      	mov	r2, r0
 8008a24:	2184      	movs	r1, #132	@ 0x84
 8008a26:	4b19      	ldr	r3, [pc, #100]	@ (8008a8c <__gethex+0x41c>)
 8008a28:	e6c5      	b.n	80087b6 <__gethex+0x146>
 8008a2a:	6922      	ldr	r2, [r4, #16]
 8008a2c:	f104 010c 	add.w	r1, r4, #12
 8008a30:	3202      	adds	r2, #2
 8008a32:	0092      	lsls	r2, r2, #2
 8008a34:	300c      	adds	r0, #12
 8008a36:	f7ff fd6d 	bl	8008514 <memcpy>
 8008a3a:	4621      	mov	r1, r4
 8008a3c:	9801      	ldr	r0, [sp, #4]
 8008a3e:	f7fd fe75 	bl	800672c <_Bfree>
 8008a42:	464c      	mov	r4, r9
 8008a44:	6923      	ldr	r3, [r4, #16]
 8008a46:	1c5a      	adds	r2, r3, #1
 8008a48:	6122      	str	r2, [r4, #16]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008a50:	615a      	str	r2, [r3, #20]
 8008a52:	e7be      	b.n	80089d2 <__gethex+0x362>
 8008a54:	6922      	ldr	r2, [r4, #16]
 8008a56:	455a      	cmp	r2, fp
 8008a58:	dd0b      	ble.n	8008a72 <__gethex+0x402>
 8008a5a:	2101      	movs	r1, #1
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f7ff fd9f 	bl	80085a0 <rshift>
 8008a62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008a66:	3701      	adds	r7, #1
 8008a68:	42bb      	cmp	r3, r7
 8008a6a:	f6ff aee0 	blt.w	800882e <__gethex+0x1be>
 8008a6e:	2501      	movs	r5, #1
 8008a70:	e7c2      	b.n	80089f8 <__gethex+0x388>
 8008a72:	f016 061f 	ands.w	r6, r6, #31
 8008a76:	d0fa      	beq.n	8008a6e <__gethex+0x3fe>
 8008a78:	4453      	add	r3, sl
 8008a7a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008a7e:	f7fd ff07 	bl	8006890 <__hi0bits>
 8008a82:	f1c6 0620 	rsb	r6, r6, #32
 8008a86:	42b0      	cmp	r0, r6
 8008a88:	dbe7      	blt.n	8008a5a <__gethex+0x3ea>
 8008a8a:	e7f0      	b.n	8008a6e <__gethex+0x3fe>
 8008a8c:	08008f8b 	.word	0x08008f8b

08008a90 <L_shift>:
 8008a90:	f1c2 0208 	rsb	r2, r2, #8
 8008a94:	0092      	lsls	r2, r2, #2
 8008a96:	b570      	push	{r4, r5, r6, lr}
 8008a98:	f1c2 0620 	rsb	r6, r2, #32
 8008a9c:	6843      	ldr	r3, [r0, #4]
 8008a9e:	6804      	ldr	r4, [r0, #0]
 8008aa0:	fa03 f506 	lsl.w	r5, r3, r6
 8008aa4:	432c      	orrs	r4, r5
 8008aa6:	40d3      	lsrs	r3, r2
 8008aa8:	6004      	str	r4, [r0, #0]
 8008aaa:	f840 3f04 	str.w	r3, [r0, #4]!
 8008aae:	4288      	cmp	r0, r1
 8008ab0:	d3f4      	bcc.n	8008a9c <L_shift+0xc>
 8008ab2:	bd70      	pop	{r4, r5, r6, pc}

08008ab4 <__match>:
 8008ab4:	b530      	push	{r4, r5, lr}
 8008ab6:	6803      	ldr	r3, [r0, #0]
 8008ab8:	3301      	adds	r3, #1
 8008aba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008abe:	b914      	cbnz	r4, 8008ac6 <__match+0x12>
 8008ac0:	6003      	str	r3, [r0, #0]
 8008ac2:	2001      	movs	r0, #1
 8008ac4:	bd30      	pop	{r4, r5, pc}
 8008ac6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008aca:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008ace:	2d19      	cmp	r5, #25
 8008ad0:	bf98      	it	ls
 8008ad2:	3220      	addls	r2, #32
 8008ad4:	42a2      	cmp	r2, r4
 8008ad6:	d0f0      	beq.n	8008aba <__match+0x6>
 8008ad8:	2000      	movs	r0, #0
 8008ada:	e7f3      	b.n	8008ac4 <__match+0x10>

08008adc <__hexnan>:
 8008adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae0:	2500      	movs	r5, #0
 8008ae2:	680b      	ldr	r3, [r1, #0]
 8008ae4:	4682      	mov	sl, r0
 8008ae6:	115e      	asrs	r6, r3, #5
 8008ae8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008aec:	f013 031f 	ands.w	r3, r3, #31
 8008af0:	bf18      	it	ne
 8008af2:	3604      	addne	r6, #4
 8008af4:	1f37      	subs	r7, r6, #4
 8008af6:	4690      	mov	r8, r2
 8008af8:	46b9      	mov	r9, r7
 8008afa:	463c      	mov	r4, r7
 8008afc:	46ab      	mov	fp, r5
 8008afe:	b087      	sub	sp, #28
 8008b00:	6801      	ldr	r1, [r0, #0]
 8008b02:	9301      	str	r3, [sp, #4]
 8008b04:	f846 5c04 	str.w	r5, [r6, #-4]
 8008b08:	9502      	str	r5, [sp, #8]
 8008b0a:	784a      	ldrb	r2, [r1, #1]
 8008b0c:	1c4b      	adds	r3, r1, #1
 8008b0e:	9303      	str	r3, [sp, #12]
 8008b10:	b342      	cbz	r2, 8008b64 <__hexnan+0x88>
 8008b12:	4610      	mov	r0, r2
 8008b14:	9105      	str	r1, [sp, #20]
 8008b16:	9204      	str	r2, [sp, #16]
 8008b18:	f7ff fd95 	bl	8008646 <__hexdig_fun>
 8008b1c:	2800      	cmp	r0, #0
 8008b1e:	d151      	bne.n	8008bc4 <__hexnan+0xe8>
 8008b20:	9a04      	ldr	r2, [sp, #16]
 8008b22:	9905      	ldr	r1, [sp, #20]
 8008b24:	2a20      	cmp	r2, #32
 8008b26:	d818      	bhi.n	8008b5a <__hexnan+0x7e>
 8008b28:	9b02      	ldr	r3, [sp, #8]
 8008b2a:	459b      	cmp	fp, r3
 8008b2c:	dd13      	ble.n	8008b56 <__hexnan+0x7a>
 8008b2e:	454c      	cmp	r4, r9
 8008b30:	d206      	bcs.n	8008b40 <__hexnan+0x64>
 8008b32:	2d07      	cmp	r5, #7
 8008b34:	dc04      	bgt.n	8008b40 <__hexnan+0x64>
 8008b36:	462a      	mov	r2, r5
 8008b38:	4649      	mov	r1, r9
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	f7ff ffa8 	bl	8008a90 <L_shift>
 8008b40:	4544      	cmp	r4, r8
 8008b42:	d952      	bls.n	8008bea <__hexnan+0x10e>
 8008b44:	2300      	movs	r3, #0
 8008b46:	f1a4 0904 	sub.w	r9, r4, #4
 8008b4a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008b4e:	461d      	mov	r5, r3
 8008b50:	464c      	mov	r4, r9
 8008b52:	f8cd b008 	str.w	fp, [sp, #8]
 8008b56:	9903      	ldr	r1, [sp, #12]
 8008b58:	e7d7      	b.n	8008b0a <__hexnan+0x2e>
 8008b5a:	2a29      	cmp	r2, #41	@ 0x29
 8008b5c:	d157      	bne.n	8008c0e <__hexnan+0x132>
 8008b5e:	3102      	adds	r1, #2
 8008b60:	f8ca 1000 	str.w	r1, [sl]
 8008b64:	f1bb 0f00 	cmp.w	fp, #0
 8008b68:	d051      	beq.n	8008c0e <__hexnan+0x132>
 8008b6a:	454c      	cmp	r4, r9
 8008b6c:	d206      	bcs.n	8008b7c <__hexnan+0xa0>
 8008b6e:	2d07      	cmp	r5, #7
 8008b70:	dc04      	bgt.n	8008b7c <__hexnan+0xa0>
 8008b72:	462a      	mov	r2, r5
 8008b74:	4649      	mov	r1, r9
 8008b76:	4620      	mov	r0, r4
 8008b78:	f7ff ff8a 	bl	8008a90 <L_shift>
 8008b7c:	4544      	cmp	r4, r8
 8008b7e:	d936      	bls.n	8008bee <__hexnan+0x112>
 8008b80:	4623      	mov	r3, r4
 8008b82:	f1a8 0204 	sub.w	r2, r8, #4
 8008b86:	f853 1b04 	ldr.w	r1, [r3], #4
 8008b8a:	429f      	cmp	r7, r3
 8008b8c:	f842 1f04 	str.w	r1, [r2, #4]!
 8008b90:	d2f9      	bcs.n	8008b86 <__hexnan+0xaa>
 8008b92:	1b3b      	subs	r3, r7, r4
 8008b94:	f023 0303 	bic.w	r3, r3, #3
 8008b98:	3304      	adds	r3, #4
 8008b9a:	3401      	adds	r4, #1
 8008b9c:	3e03      	subs	r6, #3
 8008b9e:	42b4      	cmp	r4, r6
 8008ba0:	bf88      	it	hi
 8008ba2:	2304      	movhi	r3, #4
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	4443      	add	r3, r8
 8008ba8:	f843 2b04 	str.w	r2, [r3], #4
 8008bac:	429f      	cmp	r7, r3
 8008bae:	d2fb      	bcs.n	8008ba8 <__hexnan+0xcc>
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	b91b      	cbnz	r3, 8008bbc <__hexnan+0xe0>
 8008bb4:	4547      	cmp	r7, r8
 8008bb6:	d128      	bne.n	8008c0a <__hexnan+0x12e>
 8008bb8:	2301      	movs	r3, #1
 8008bba:	603b      	str	r3, [r7, #0]
 8008bbc:	2005      	movs	r0, #5
 8008bbe:	b007      	add	sp, #28
 8008bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bc4:	3501      	adds	r5, #1
 8008bc6:	2d08      	cmp	r5, #8
 8008bc8:	f10b 0b01 	add.w	fp, fp, #1
 8008bcc:	dd06      	ble.n	8008bdc <__hexnan+0x100>
 8008bce:	4544      	cmp	r4, r8
 8008bd0:	d9c1      	bls.n	8008b56 <__hexnan+0x7a>
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	2501      	movs	r5, #1
 8008bd6:	f844 3c04 	str.w	r3, [r4, #-4]
 8008bda:	3c04      	subs	r4, #4
 8008bdc:	6822      	ldr	r2, [r4, #0]
 8008bde:	f000 000f 	and.w	r0, r0, #15
 8008be2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008be6:	6020      	str	r0, [r4, #0]
 8008be8:	e7b5      	b.n	8008b56 <__hexnan+0x7a>
 8008bea:	2508      	movs	r5, #8
 8008bec:	e7b3      	b.n	8008b56 <__hexnan+0x7a>
 8008bee:	9b01      	ldr	r3, [sp, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d0dd      	beq.n	8008bb0 <__hexnan+0xd4>
 8008bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8008bf8:	f1c3 0320 	rsb	r3, r3, #32
 8008bfc:	40da      	lsrs	r2, r3
 8008bfe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008c02:	4013      	ands	r3, r2
 8008c04:	f846 3c04 	str.w	r3, [r6, #-4]
 8008c08:	e7d2      	b.n	8008bb0 <__hexnan+0xd4>
 8008c0a:	3f04      	subs	r7, #4
 8008c0c:	e7d0      	b.n	8008bb0 <__hexnan+0xd4>
 8008c0e:	2004      	movs	r0, #4
 8008c10:	e7d5      	b.n	8008bbe <__hexnan+0xe2>

08008c12 <__ascii_mbtowc>:
 8008c12:	b082      	sub	sp, #8
 8008c14:	b901      	cbnz	r1, 8008c18 <__ascii_mbtowc+0x6>
 8008c16:	a901      	add	r1, sp, #4
 8008c18:	b142      	cbz	r2, 8008c2c <__ascii_mbtowc+0x1a>
 8008c1a:	b14b      	cbz	r3, 8008c30 <__ascii_mbtowc+0x1e>
 8008c1c:	7813      	ldrb	r3, [r2, #0]
 8008c1e:	600b      	str	r3, [r1, #0]
 8008c20:	7812      	ldrb	r2, [r2, #0]
 8008c22:	1e10      	subs	r0, r2, #0
 8008c24:	bf18      	it	ne
 8008c26:	2001      	movne	r0, #1
 8008c28:	b002      	add	sp, #8
 8008c2a:	4770      	bx	lr
 8008c2c:	4610      	mov	r0, r2
 8008c2e:	e7fb      	b.n	8008c28 <__ascii_mbtowc+0x16>
 8008c30:	f06f 0001 	mvn.w	r0, #1
 8008c34:	e7f8      	b.n	8008c28 <__ascii_mbtowc+0x16>

08008c36 <_realloc_r>:
 8008c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c3a:	4680      	mov	r8, r0
 8008c3c:	4615      	mov	r5, r2
 8008c3e:	460c      	mov	r4, r1
 8008c40:	b921      	cbnz	r1, 8008c4c <_realloc_r+0x16>
 8008c42:	4611      	mov	r1, r2
 8008c44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c48:	f7fd bca4 	b.w	8006594 <_malloc_r>
 8008c4c:	b92a      	cbnz	r2, 8008c5a <_realloc_r+0x24>
 8008c4e:	f7fd fc2f 	bl	80064b0 <_free_r>
 8008c52:	2400      	movs	r4, #0
 8008c54:	4620      	mov	r0, r4
 8008c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c5a:	f000 f8c4 	bl	8008de6 <_malloc_usable_size_r>
 8008c5e:	4285      	cmp	r5, r0
 8008c60:	4606      	mov	r6, r0
 8008c62:	d802      	bhi.n	8008c6a <_realloc_r+0x34>
 8008c64:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008c68:	d8f4      	bhi.n	8008c54 <_realloc_r+0x1e>
 8008c6a:	4629      	mov	r1, r5
 8008c6c:	4640      	mov	r0, r8
 8008c6e:	f7fd fc91 	bl	8006594 <_malloc_r>
 8008c72:	4607      	mov	r7, r0
 8008c74:	2800      	cmp	r0, #0
 8008c76:	d0ec      	beq.n	8008c52 <_realloc_r+0x1c>
 8008c78:	42b5      	cmp	r5, r6
 8008c7a:	462a      	mov	r2, r5
 8008c7c:	4621      	mov	r1, r4
 8008c7e:	bf28      	it	cs
 8008c80:	4632      	movcs	r2, r6
 8008c82:	f7ff fc47 	bl	8008514 <memcpy>
 8008c86:	4621      	mov	r1, r4
 8008c88:	4640      	mov	r0, r8
 8008c8a:	f7fd fc11 	bl	80064b0 <_free_r>
 8008c8e:	463c      	mov	r4, r7
 8008c90:	e7e0      	b.n	8008c54 <_realloc_r+0x1e>

08008c92 <__ascii_wctomb>:
 8008c92:	4603      	mov	r3, r0
 8008c94:	4608      	mov	r0, r1
 8008c96:	b141      	cbz	r1, 8008caa <__ascii_wctomb+0x18>
 8008c98:	2aff      	cmp	r2, #255	@ 0xff
 8008c9a:	d904      	bls.n	8008ca6 <__ascii_wctomb+0x14>
 8008c9c:	228a      	movs	r2, #138	@ 0x8a
 8008c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca2:	601a      	str	r2, [r3, #0]
 8008ca4:	4770      	bx	lr
 8008ca6:	2001      	movs	r0, #1
 8008ca8:	700a      	strb	r2, [r1, #0]
 8008caa:	4770      	bx	lr

08008cac <fiprintf>:
 8008cac:	b40e      	push	{r1, r2, r3}
 8008cae:	b503      	push	{r0, r1, lr}
 8008cb0:	4601      	mov	r1, r0
 8008cb2:	ab03      	add	r3, sp, #12
 8008cb4:	4805      	ldr	r0, [pc, #20]	@ (8008ccc <fiprintf+0x20>)
 8008cb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cba:	6800      	ldr	r0, [r0, #0]
 8008cbc:	9301      	str	r3, [sp, #4]
 8008cbe:	f7ff f999 	bl	8007ff4 <_vfiprintf_r>
 8008cc2:	b002      	add	sp, #8
 8008cc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cc8:	b003      	add	sp, #12
 8008cca:	4770      	bx	lr
 8008ccc:	2000002c 	.word	0x2000002c

08008cd0 <__swhatbuf_r>:
 8008cd0:	b570      	push	{r4, r5, r6, lr}
 8008cd2:	460c      	mov	r4, r1
 8008cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cd8:	4615      	mov	r5, r2
 8008cda:	2900      	cmp	r1, #0
 8008cdc:	461e      	mov	r6, r3
 8008cde:	b096      	sub	sp, #88	@ 0x58
 8008ce0:	da0c      	bge.n	8008cfc <__swhatbuf_r+0x2c>
 8008ce2:	89a3      	ldrh	r3, [r4, #12]
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008cea:	bf14      	ite	ne
 8008cec:	2340      	movne	r3, #64	@ 0x40
 8008cee:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008cf2:	2000      	movs	r0, #0
 8008cf4:	6031      	str	r1, [r6, #0]
 8008cf6:	602b      	str	r3, [r5, #0]
 8008cf8:	b016      	add	sp, #88	@ 0x58
 8008cfa:	bd70      	pop	{r4, r5, r6, pc}
 8008cfc:	466a      	mov	r2, sp
 8008cfe:	f000 f849 	bl	8008d94 <_fstat_r>
 8008d02:	2800      	cmp	r0, #0
 8008d04:	dbed      	blt.n	8008ce2 <__swhatbuf_r+0x12>
 8008d06:	9901      	ldr	r1, [sp, #4]
 8008d08:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008d0c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008d10:	4259      	negs	r1, r3
 8008d12:	4159      	adcs	r1, r3
 8008d14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d18:	e7eb      	b.n	8008cf2 <__swhatbuf_r+0x22>

08008d1a <__smakebuf_r>:
 8008d1a:	898b      	ldrh	r3, [r1, #12]
 8008d1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d1e:	079d      	lsls	r5, r3, #30
 8008d20:	4606      	mov	r6, r0
 8008d22:	460c      	mov	r4, r1
 8008d24:	d507      	bpl.n	8008d36 <__smakebuf_r+0x1c>
 8008d26:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008d2a:	6023      	str	r3, [r4, #0]
 8008d2c:	6123      	str	r3, [r4, #16]
 8008d2e:	2301      	movs	r3, #1
 8008d30:	6163      	str	r3, [r4, #20]
 8008d32:	b003      	add	sp, #12
 8008d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d36:	466a      	mov	r2, sp
 8008d38:	ab01      	add	r3, sp, #4
 8008d3a:	f7ff ffc9 	bl	8008cd0 <__swhatbuf_r>
 8008d3e:	9f00      	ldr	r7, [sp, #0]
 8008d40:	4605      	mov	r5, r0
 8008d42:	4639      	mov	r1, r7
 8008d44:	4630      	mov	r0, r6
 8008d46:	f7fd fc25 	bl	8006594 <_malloc_r>
 8008d4a:	b948      	cbnz	r0, 8008d60 <__smakebuf_r+0x46>
 8008d4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d50:	059a      	lsls	r2, r3, #22
 8008d52:	d4ee      	bmi.n	8008d32 <__smakebuf_r+0x18>
 8008d54:	f023 0303 	bic.w	r3, r3, #3
 8008d58:	f043 0302 	orr.w	r3, r3, #2
 8008d5c:	81a3      	strh	r3, [r4, #12]
 8008d5e:	e7e2      	b.n	8008d26 <__smakebuf_r+0xc>
 8008d60:	89a3      	ldrh	r3, [r4, #12]
 8008d62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d6a:	81a3      	strh	r3, [r4, #12]
 8008d6c:	9b01      	ldr	r3, [sp, #4]
 8008d6e:	6020      	str	r0, [r4, #0]
 8008d70:	b15b      	cbz	r3, 8008d8a <__smakebuf_r+0x70>
 8008d72:	4630      	mov	r0, r6
 8008d74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d78:	f000 f81e 	bl	8008db8 <_isatty_r>
 8008d7c:	b128      	cbz	r0, 8008d8a <__smakebuf_r+0x70>
 8008d7e:	89a3      	ldrh	r3, [r4, #12]
 8008d80:	f023 0303 	bic.w	r3, r3, #3
 8008d84:	f043 0301 	orr.w	r3, r3, #1
 8008d88:	81a3      	strh	r3, [r4, #12]
 8008d8a:	89a3      	ldrh	r3, [r4, #12]
 8008d8c:	431d      	orrs	r5, r3
 8008d8e:	81a5      	strh	r5, [r4, #12]
 8008d90:	e7cf      	b.n	8008d32 <__smakebuf_r+0x18>
	...

08008d94 <_fstat_r>:
 8008d94:	b538      	push	{r3, r4, r5, lr}
 8008d96:	2300      	movs	r3, #0
 8008d98:	4d06      	ldr	r5, [pc, #24]	@ (8008db4 <_fstat_r+0x20>)
 8008d9a:	4604      	mov	r4, r0
 8008d9c:	4608      	mov	r0, r1
 8008d9e:	4611      	mov	r1, r2
 8008da0:	602b      	str	r3, [r5, #0]
 8008da2:	f7f8 fd9b 	bl	80018dc <_fstat>
 8008da6:	1c43      	adds	r3, r0, #1
 8008da8:	d102      	bne.n	8008db0 <_fstat_r+0x1c>
 8008daa:	682b      	ldr	r3, [r5, #0]
 8008dac:	b103      	cbz	r3, 8008db0 <_fstat_r+0x1c>
 8008dae:	6023      	str	r3, [r4, #0]
 8008db0:	bd38      	pop	{r3, r4, r5, pc}
 8008db2:	bf00      	nop
 8008db4:	20000488 	.word	0x20000488

08008db8 <_isatty_r>:
 8008db8:	b538      	push	{r3, r4, r5, lr}
 8008dba:	2300      	movs	r3, #0
 8008dbc:	4d05      	ldr	r5, [pc, #20]	@ (8008dd4 <_isatty_r+0x1c>)
 8008dbe:	4604      	mov	r4, r0
 8008dc0:	4608      	mov	r0, r1
 8008dc2:	602b      	str	r3, [r5, #0]
 8008dc4:	f7f8 fd99 	bl	80018fa <_isatty>
 8008dc8:	1c43      	adds	r3, r0, #1
 8008dca:	d102      	bne.n	8008dd2 <_isatty_r+0x1a>
 8008dcc:	682b      	ldr	r3, [r5, #0]
 8008dce:	b103      	cbz	r3, 8008dd2 <_isatty_r+0x1a>
 8008dd0:	6023      	str	r3, [r4, #0]
 8008dd2:	bd38      	pop	{r3, r4, r5, pc}
 8008dd4:	20000488 	.word	0x20000488

08008dd8 <abort>:
 8008dd8:	2006      	movs	r0, #6
 8008dda:	b508      	push	{r3, lr}
 8008ddc:	f000 f834 	bl	8008e48 <raise>
 8008de0:	2001      	movs	r0, #1
 8008de2:	f7f8 fd2c 	bl	800183e <_exit>

08008de6 <_malloc_usable_size_r>:
 8008de6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dea:	1f18      	subs	r0, r3, #4
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	bfbc      	itt	lt
 8008df0:	580b      	ldrlt	r3, [r1, r0]
 8008df2:	18c0      	addlt	r0, r0, r3
 8008df4:	4770      	bx	lr

08008df6 <_raise_r>:
 8008df6:	291f      	cmp	r1, #31
 8008df8:	b538      	push	{r3, r4, r5, lr}
 8008dfa:	4605      	mov	r5, r0
 8008dfc:	460c      	mov	r4, r1
 8008dfe:	d904      	bls.n	8008e0a <_raise_r+0x14>
 8008e00:	2316      	movs	r3, #22
 8008e02:	6003      	str	r3, [r0, #0]
 8008e04:	f04f 30ff 	mov.w	r0, #4294967295
 8008e08:	bd38      	pop	{r3, r4, r5, pc}
 8008e0a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008e0c:	b112      	cbz	r2, 8008e14 <_raise_r+0x1e>
 8008e0e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e12:	b94b      	cbnz	r3, 8008e28 <_raise_r+0x32>
 8008e14:	4628      	mov	r0, r5
 8008e16:	f000 f831 	bl	8008e7c <_getpid_r>
 8008e1a:	4622      	mov	r2, r4
 8008e1c:	4601      	mov	r1, r0
 8008e1e:	4628      	mov	r0, r5
 8008e20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e24:	f000 b818 	b.w	8008e58 <_kill_r>
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d00a      	beq.n	8008e42 <_raise_r+0x4c>
 8008e2c:	1c59      	adds	r1, r3, #1
 8008e2e:	d103      	bne.n	8008e38 <_raise_r+0x42>
 8008e30:	2316      	movs	r3, #22
 8008e32:	6003      	str	r3, [r0, #0]
 8008e34:	2001      	movs	r0, #1
 8008e36:	e7e7      	b.n	8008e08 <_raise_r+0x12>
 8008e38:	2100      	movs	r1, #0
 8008e3a:	4620      	mov	r0, r4
 8008e3c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008e40:	4798      	blx	r3
 8008e42:	2000      	movs	r0, #0
 8008e44:	e7e0      	b.n	8008e08 <_raise_r+0x12>
	...

08008e48 <raise>:
 8008e48:	4b02      	ldr	r3, [pc, #8]	@ (8008e54 <raise+0xc>)
 8008e4a:	4601      	mov	r1, r0
 8008e4c:	6818      	ldr	r0, [r3, #0]
 8008e4e:	f7ff bfd2 	b.w	8008df6 <_raise_r>
 8008e52:	bf00      	nop
 8008e54:	2000002c 	.word	0x2000002c

08008e58 <_kill_r>:
 8008e58:	b538      	push	{r3, r4, r5, lr}
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	4d06      	ldr	r5, [pc, #24]	@ (8008e78 <_kill_r+0x20>)
 8008e5e:	4604      	mov	r4, r0
 8008e60:	4608      	mov	r0, r1
 8008e62:	4611      	mov	r1, r2
 8008e64:	602b      	str	r3, [r5, #0]
 8008e66:	f7f8 fcda 	bl	800181e <_kill>
 8008e6a:	1c43      	adds	r3, r0, #1
 8008e6c:	d102      	bne.n	8008e74 <_kill_r+0x1c>
 8008e6e:	682b      	ldr	r3, [r5, #0]
 8008e70:	b103      	cbz	r3, 8008e74 <_kill_r+0x1c>
 8008e72:	6023      	str	r3, [r4, #0]
 8008e74:	bd38      	pop	{r3, r4, r5, pc}
 8008e76:	bf00      	nop
 8008e78:	20000488 	.word	0x20000488

08008e7c <_getpid_r>:
 8008e7c:	f7f8 bcc8 	b.w	8001810 <_getpid>

08008e80 <_init>:
 8008e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e82:	bf00      	nop
 8008e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e86:	bc08      	pop	{r3}
 8008e88:	469e      	mov	lr, r3
 8008e8a:	4770      	bx	lr

08008e8c <_fini>:
 8008e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e8e:	bf00      	nop
 8008e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e92:	bc08      	pop	{r3}
 8008e94:	469e      	mov	lr, r3
 8008e96:	4770      	bx	lr
